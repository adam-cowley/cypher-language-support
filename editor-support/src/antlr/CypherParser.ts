// Generated from src/antlr/CypherParser.g4 by ANTLR 4.9.0-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { FailedPredicateException } from "antlr4ts/FailedPredicateException";
import { NotNull } from "antlr4ts/Decorators";
import { NoViableAltException } from "antlr4ts/NoViableAltException";
import { Override } from "antlr4ts/Decorators";
import { Parser } from "antlr4ts/Parser";
import { ParserRuleContext } from "antlr4ts/ParserRuleContext";
import { ParserATNSimulator } from "antlr4ts/atn/ParserATNSimulator";
import { ParseTreeListener } from "antlr4ts/tree/ParseTreeListener";
import { ParseTreeVisitor } from "antlr4ts/tree/ParseTreeVisitor";
import { RecognitionException } from "antlr4ts/RecognitionException";
import { RuleContext } from "antlr4ts/RuleContext";
//import { RuleVersion } from "antlr4ts/RuleVersion";
import { TerminalNode } from "antlr4ts/tree/TerminalNode";
import { Token } from "antlr4ts/Token";
import { TokenStream } from "antlr4ts/TokenStream";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";

import { CypherParserListener } from "./CypherParserListener";
import { CypherParserVisitor } from "./CypherParserVisitor";


export class CypherParser extends Parser {
	public static readonly SPACE = 1;
	public static readonly SINGLE_LINE_COMMENT = 2;
	public static readonly DECIMAL_DOUBLE = 3;
	public static readonly UNSIGNED_DECIMAL_INTEGER = 4;
	public static readonly UNSIGNED_HEX_INTEGER = 5;
	public static readonly UNSIGNED_OCTAL_INTEGER = 6;
	public static readonly ACCESS = 7;
	public static readonly ACTIVE = 8;
	public static readonly ADMIN = 9;
	public static readonly ADMINISTRATOR = 10;
	public static readonly ALIAS = 11;
	public static readonly ALIASES = 12;
	public static readonly ALL_SHORTEST_PATH = 13;
	public static readonly ALL = 14;
	public static readonly ALTER = 15;
	public static readonly AND = 16;
	public static readonly ANY = 17;
	public static readonly AS = 18;
	public static readonly ASC = 19;
	public static readonly ASSERT = 20;
	public static readonly ASSIGN = 21;
	public static readonly AT = 22;
	public static readonly BAR = 23;
	public static readonly BOOSTED = 24;
	public static readonly BREAK = 25;
	public static readonly BRIEF = 26;
	public static readonly BTREE = 27;
	public static readonly BUILT = 28;
	public static readonly BY = 29;
	public static readonly CALL = 30;
	public static readonly CASE = 31;
	public static readonly CHANGE = 32;
	public static readonly COLON = 33;
	public static readonly COMMA = 34;
	public static readonly COMMAND = 35;
	public static readonly COMMANDS = 36;
	public static readonly COMMIT = 37;
	public static readonly COMPOSITE = 38;
	public static readonly CONSTRAINT = 39;
	public static readonly CONSTRAINTS = 40;
	public static readonly CONTAINS = 41;
	public static readonly COPY = 42;
	public static readonly CONTINUE = 43;
	public static readonly COUNT = 44;
	public static readonly CREATE = 45;
	public static readonly CSV = 46;
	public static readonly CURRENT = 47;
	public static readonly DATA = 48;
	public static readonly DATABASE = 49;
	public static readonly DATABASES = 50;
	public static readonly DBMS = 51;
	public static readonly DEALLOCATE = 52;
	public static readonly DEFAULT_TOKEN = 53;
	public static readonly DEFINED = 54;
	public static readonly DELETE = 55;
	public static readonly DENY = 56;
	public static readonly DESC = 57;
	public static readonly DESTROY = 58;
	public static readonly DETACH = 59;
	public static readonly DOLLAR = 60;
	public static readonly DISTINCT = 61;
	public static readonly DIVIDE = 62;
	public static readonly DOT = 63;
	public static readonly DOTDOT = 64;
	public static readonly DRIVER = 65;
	public static readonly DROP = 66;
	public static readonly DRYRUN = 67;
	public static readonly DUMP = 68;
	public static readonly EACH = 69;
	public static readonly ENABLE = 70;
	public static readonly ELEMENT = 71;
	public static readonly ELEMENTS = 72;
	public static readonly ELSE = 73;
	public static readonly ENCRYPTED = 74;
	public static readonly END = 75;
	public static readonly ENDS = 76;
	public static readonly EQ = 77;
	public static readonly EXECUTABLE = 78;
	public static readonly EXECUTE = 79;
	public static readonly EXIST = 80;
	public static readonly EXISTENCE = 81;
	public static readonly EXISTS = 82;
	public static readonly ERROR = 83;
	public static readonly FAIL = 84;
	public static readonly FALSE = 85;
	public static readonly FIELDTERMINATOR = 86;
	public static readonly FOR = 87;
	public static readonly FOREACH = 88;
	public static readonly FROM = 89;
	public static readonly FULLTEXT = 90;
	public static readonly FUNCTION = 91;
	public static readonly FUNCTIONS = 92;
	public static readonly GE = 93;
	public static readonly GRANT = 94;
	public static readonly GRAPH = 95;
	public static readonly GRAPHS = 96;
	public static readonly GT = 97;
	public static readonly HEADERS = 98;
	public static readonly HOME = 99;
	public static readonly IF = 100;
	public static readonly IMPERSONATE = 101;
	public static readonly IMMUTABLE = 102;
	public static readonly IN = 103;
	public static readonly INDEX = 104;
	public static readonly INDEXES = 105;
	public static readonly INF = 106;
	public static readonly INFINITY = 107;
	public static readonly IS = 108;
	public static readonly JOIN = 109;
	public static readonly KEY = 110;
	public static readonly LABEL = 111;
	public static readonly LABELS = 112;
	public static readonly AMPERSAND = 113;
	public static readonly EXCLAMATION_MARK = 114;
	public static readonly LBRACKET = 115;
	public static readonly LCURLY = 116;
	public static readonly LE = 117;
	public static readonly LIMITROWS = 118;
	public static readonly LOAD = 119;
	public static readonly LOOKUP = 120;
	public static readonly LPAREN = 121;
	public static readonly LT = 122;
	public static readonly MANAGEMENT = 123;
	public static readonly MATCH = 124;
	public static readonly MERGE = 125;
	public static readonly MINUS = 126;
	public static readonly PERCENT = 127;
	public static readonly NEQ = 128;
	public static readonly NEQ2 = 129;
	public static readonly NAME = 130;
	public static readonly NAMES = 131;
	public static readonly NAN = 132;
	public static readonly NEW = 133;
	public static readonly NODE = 134;
	public static readonly NODES = 135;
	public static readonly NONE = 136;
	public static readonly NOT = 137;
	public static readonly NOWAIT = 138;
	public static readonly NULL = 139;
	public static readonly OF = 140;
	public static readonly ON = 141;
	public static readonly ONLY = 142;
	public static readonly OPTIONAL = 143;
	public static readonly OPTIONS = 144;
	public static readonly OPTION = 145;
	public static readonly OR = 146;
	public static readonly ORDER = 147;
	public static readonly OUTPUT = 148;
	public static readonly PASSWORD = 149;
	public static readonly PASSWORDS = 150;
	public static readonly PERIODIC = 151;
	public static readonly PLAINTEXT = 152;
	public static readonly PLUS = 153;
	public static readonly PLUSEQUAL = 154;
	public static readonly POINT = 155;
	public static readonly POPULATED = 156;
	public static readonly POW = 157;
	public static readonly PRIMARY = 158;
	public static readonly PRIMARIES = 159;
	public static readonly PRIVILEGE = 160;
	public static readonly PRIVILEGES = 161;
	public static readonly PROCEDURE = 162;
	public static readonly PROCEDURES = 163;
	public static readonly PROPERTIES = 164;
	public static readonly PROPERTY = 165;
	public static readonly QUESTION = 166;
	public static readonly RANGE = 167;
	public static readonly RBRACKET = 168;
	public static readonly RCURLY = 169;
	public static readonly READ = 170;
	public static readonly REALLOCATE = 171;
	public static readonly REDUCE = 172;
	public static readonly RENAME = 173;
	public static readonly REGEQ = 174;
	public static readonly REL = 175;
	public static readonly RELATIONSHIP = 176;
	public static readonly RELATIONSHIPS = 177;
	public static readonly REMOVE = 178;
	public static readonly REPLACE = 179;
	public static readonly REPORT = 180;
	public static readonly REQUIRE = 181;
	public static readonly REQUIRED = 182;
	public static readonly RETURN = 183;
	public static readonly REVOKE = 184;
	public static readonly ROLE = 185;
	public static readonly ROLES = 186;
	public static readonly ROW = 187;
	public static readonly ROWS = 188;
	public static readonly RPAREN = 189;
	public static readonly SCAN = 190;
	public static readonly SEC = 191;
	public static readonly SECOND = 192;
	public static readonly SECONDARY = 193;
	public static readonly SECONDARIES = 194;
	public static readonly SECONDS = 195;
	public static readonly SEEK = 196;
	public static readonly SEMICOLON = 197;
	public static readonly SERVER = 198;
	public static readonly SERVERS = 199;
	public static readonly SET = 200;
	public static readonly SETTING = 201;
	public static readonly SETTINGS = 202;
	public static readonly SHORTEST_PATH = 203;
	public static readonly SHOW = 204;
	public static readonly SINGLE = 205;
	public static readonly SKIPROWS = 206;
	public static readonly START = 207;
	public static readonly STARTS = 208;
	public static readonly STATUS = 209;
	public static readonly STOP = 210;
	public static readonly SUSPENDED = 211;
	public static readonly TARGET = 212;
	public static readonly TERMINATE = 213;
	public static readonly TEXT = 214;
	public static readonly THEN = 215;
	public static readonly TIMES = 216;
	public static readonly TO = 217;
	public static readonly TOPOLOGY = 218;
	public static readonly TRANSACTION = 219;
	public static readonly TRANSACTIONS = 220;
	public static readonly TRAVERSE = 221;
	public static readonly TRUE = 222;
	public static readonly TYPE = 223;
	public static readonly TYPES = 224;
	public static readonly UNION = 225;
	public static readonly UNIQUE = 226;
	public static readonly UNIQUENESS = 227;
	public static readonly UNWIND = 228;
	public static readonly USE = 229;
	public static readonly USER = 230;
	public static readonly USERS = 231;
	public static readonly USING = 232;
	public static readonly VERBOSE = 233;
	public static readonly WAIT = 234;
	public static readonly WHEN = 235;
	public static readonly WHERE = 236;
	public static readonly WITH = 237;
	public static readonly WRITE = 238;
	public static readonly XOR = 239;
	public static readonly YIELD = 240;
	public static readonly IDENTIFIER = 241;
	public static readonly ARROW_LINE = 242;
	public static readonly ARROW_LEFT_HEAD = 243;
	public static readonly ARROW_RIGHT_HEAD = 244;
	public static readonly FORMAL_COMMENT = 245;
	public static readonly STRING_LITERAL1 = 246;
	public static readonly STRING_LITERAL2 = 247;
	public static readonly MULTI_LINE_COMMENT = 248;
	public static readonly ESCAPED_SYMBOLIC_NAME = 249;
	public static readonly MORE1 = 250;
	public static readonly STRING1_OPEN = 251;
	public static readonly STRING2_OPEN = 252;
	public static readonly ESCAPED_SYMBOLIC_NAME_OPEN = 253;
	public static readonly MORE3 = 254;
	public static readonly MORE4 = 255;
	public static readonly MORE5 = 256;
	public static readonly MORE6 = 257;
	public static readonly MORE7 = 258;
	public static readonly MORE8 = 259;
	public static readonly MORE9 = 260;
	public static readonly MORE10 = 261;
	public static readonly MORE11 = 262;
	public static readonly MORE24 = 263;
	public static readonly RULE_statements = 0;
	public static readonly RULE_statement = 1;
	public static readonly RULE_singleQueryOrCommand = 2;
	public static readonly RULE_singleQueryOrCommandWithUseClause = 3;
	public static readonly RULE_periodicCommitQueryHintFailure = 4;
	public static readonly RULE_regularQuery = 5;
	public static readonly RULE_union = 6;
	public static readonly RULE_singleQuery = 7;
	public static readonly RULE_singleQueryWithUseClause = 8;
	public static readonly RULE_clause = 9;
	public static readonly RULE_useClause = 10;
	public static readonly RULE_returnClause = 11;
	public static readonly RULE_returnBody = 12;
	public static readonly RULE_returnItem = 13;
	public static readonly RULE_returnItems = 14;
	public static readonly RULE_orderItem = 15;
	public static readonly RULE_skip = 16;
	public static readonly RULE_limit = 17;
	public static readonly RULE_whereClause = 18;
	public static readonly RULE_withClause = 19;
	public static readonly RULE_createClause = 20;
	public static readonly RULE_setClause = 21;
	public static readonly RULE_setItem = 22;
	public static readonly RULE_removeClause = 23;
	public static readonly RULE_removeItem = 24;
	public static readonly RULE_deleteClause = 25;
	public static readonly RULE_matchClause = 26;
	public static readonly RULE_hints = 27;
	public static readonly RULE_indexHintBody = 28;
	public static readonly RULE_mergeClause = 29;
	public static readonly RULE_unwindClause = 30;
	public static readonly RULE_callClause = 31;
	public static readonly RULE_procedureName = 32;
	public static readonly RULE_procedureArgument = 33;
	public static readonly RULE_procedureResultItem = 34;
	public static readonly RULE_loadCSVClause = 35;
	public static readonly RULE_foreachClause = 36;
	public static readonly RULE_subqueryClause = 37;
	public static readonly RULE_subqueryInTransactionsParameters = 38;
	public static readonly RULE_subqueryInTransactionsBatchParameters = 39;
	public static readonly RULE_subqueryInTransactionsErrorParameters = 40;
	public static readonly RULE_subqueryInTransactionsReportParameters = 41;
	public static readonly RULE_patternList = 42;
	public static readonly RULE_pattern = 43;
	public static readonly RULE_quantifier = 44;
	public static readonly RULE_anonymousPattern = 45;
	public static readonly RULE_shortestPathPattern = 46;
	public static readonly RULE_maybeQuantifiedRelationshipPattern = 47;
	public static readonly RULE_everyPathPattern = 48;
	public static readonly RULE_everyPathPatternNonEmpty = 49;
	public static readonly RULE_nodePattern = 50;
	public static readonly RULE_parenthesizedPath = 51;
	public static readonly RULE_nodeLabels = 52;
	public static readonly RULE_labelExpressionPredicate = 53;
	public static readonly RULE_labelOrRelType = 54;
	public static readonly RULE_labelOrRelTypes = 55;
	public static readonly RULE_properties = 56;
	public static readonly RULE_relationshipPattern = 57;
	public static readonly RULE_leftArrow = 58;
	public static readonly RULE_arrowLine = 59;
	public static readonly RULE_rightArrow = 60;
	public static readonly RULE_pathLength = 61;
	public static readonly RULE_pathLengthLiteral = 62;
	public static readonly RULE_labelExpression = 63;
	public static readonly RULE_labelExpressionName = 64;
	public static readonly RULE_labelExpression4 = 65;
	public static readonly RULE_labelExpression4ExpectingBar = 66;
	public static readonly RULE_labelExpression3 = 67;
	public static readonly RULE_labelExpression2 = 68;
	public static readonly RULE_labelExpression1 = 69;
	public static readonly RULE_expression = 70;
	public static readonly RULE_expression12 = 71;
	public static readonly RULE_expression11 = 72;
	public static readonly RULE_expression10 = 73;
	public static readonly RULE_expression9 = 74;
	public static readonly RULE_expression8 = 75;
	public static readonly RULE_expression7 = 76;
	public static readonly RULE_comparisonExpression6 = 77;
	public static readonly RULE_expression6 = 78;
	public static readonly RULE_expression5 = 79;
	public static readonly RULE_expression4 = 80;
	public static readonly RULE_expression3 = 81;
	public static readonly RULE_expression2 = 82;
	public static readonly RULE_postFix1 = 83;
	public static readonly RULE_property = 84;
	public static readonly RULE_propertyExpression = 85;
	public static readonly RULE_expression1 = 86;
	public static readonly RULE_literal = 87;
	public static readonly RULE_caseExpression = 88;
	public static readonly RULE_listComprehension = 89;
	public static readonly RULE_patternComprehension = 90;
	public static readonly RULE_patternComprehensionPrefix = 91;
	public static readonly RULE_reduceExpression = 92;
	public static readonly RULE_allExpression = 93;
	public static readonly RULE_anyExpression = 94;
	public static readonly RULE_noneExpression = 95;
	public static readonly RULE_singleExpression = 96;
	public static readonly RULE_patternExpression = 97;
	public static readonly RULE_shortestPathExpression = 98;
	public static readonly RULE_mapProjection = 99;
	public static readonly RULE_mapProjectionItem = 100;
	public static readonly RULE_existsExpression = 101;
	public static readonly RULE_countExpression = 102;
	public static readonly RULE_stringLiteral = 103;
	public static readonly RULE_numberLiteral = 104;
	public static readonly RULE_signedIntegerLiteral = 105;
	public static readonly RULE_listLiteral = 106;
	public static readonly RULE_mapLiteral = 107;
	public static readonly RULE_propertyKeyName = 108;
	public static readonly RULE_parameter = 109;
	public static readonly RULE_functionInvocation = 110;
	public static readonly RULE_functionName = 111;
	public static readonly RULE_functionArgument = 112;
	public static readonly RULE_namespace = 113;
	public static readonly RULE_variableList1 = 114;
	public static readonly RULE_variable = 115;
	public static readonly RULE_symbolicNameList1 = 116;
	public static readonly RULE_createCommand = 117;
	public static readonly RULE_command = 118;
	public static readonly RULE_commandWithUseGraph = 119;
	public static readonly RULE_dropCommand = 120;
	public static readonly RULE_alterCommand = 121;
	public static readonly RULE_showCommand = 122;
	public static readonly RULE_terminateCommand = 123;
	public static readonly RULE_showAllCommand = 124;
	public static readonly RULE_showNodeCommand = 125;
	public static readonly RULE_showRelationshipCommand = 126;
	public static readonly RULE_showRelCommand = 127;
	public static readonly RULE_showPropertyCommand = 128;
	public static readonly RULE_yieldItem = 129;
	public static readonly RULE_yieldClause = 130;
	public static readonly RULE_showIndexesAllowBrief = 131;
	public static readonly RULE_showIndexesNoBrief = 132;
	public static readonly RULE_showConstraintsAllowBriefAndYield = 133;
	public static readonly RULE_showConstraintsAllowBrief = 134;
	public static readonly RULE_showConstraintsAllowYield = 135;
	public static readonly RULE_showProcedures = 136;
	public static readonly RULE_showFunctions = 137;
	public static readonly RULE_showTransactions = 138;
	public static readonly RULE_terminateTransactions = 139;
	public static readonly RULE_showOrTerminateTransactions = 140;
	public static readonly RULE_stringsOrExpression = 141;
	public static readonly RULE_showSettings = 142;
	public static readonly RULE_createConstraint = 143;
	public static readonly RULE_dropConstraint = 144;
	public static readonly RULE_createIndex = 145;
	public static readonly RULE_oldCreateIndex = 146;
	public static readonly RULE_createIndex_ = 147;
	public static readonly RULE_createFulltextIndex = 148;
	public static readonly RULE_createLookupIndex = 149;
	public static readonly RULE_dropIndex = 150;
	public static readonly RULE_propertyList = 151;
	public static readonly RULE_renameCommand = 152;
	public static readonly RULE_grantCommand = 153;
	public static readonly RULE_revokeCommand = 154;
	public static readonly RULE_enableServerCommand = 155;
	public static readonly RULE_alterServer = 156;
	public static readonly RULE_renameServer = 157;
	public static readonly RULE_dropServer = 158;
	public static readonly RULE_showServers = 159;
	public static readonly RULE_allocationCommand = 160;
	public static readonly RULE_deallocateDatabaseFromServers = 161;
	public static readonly RULE_reallocateDatabases = 162;
	public static readonly RULE_createRole = 163;
	public static readonly RULE_dropRole = 164;
	public static readonly RULE_renameRole = 165;
	public static readonly RULE_showRoles = 166;
	public static readonly RULE_grantRole = 167;
	public static readonly RULE_revokeRole = 168;
	public static readonly RULE_createUser = 169;
	public static readonly RULE_dropUser = 170;
	public static readonly RULE_renameUser = 171;
	public static readonly RULE_alterCurrentUser = 172;
	public static readonly RULE_alterUser = 173;
	public static readonly RULE_setPassword = 174;
	public static readonly RULE_passwordExpression = 175;
	public static readonly RULE_passwordChangeRequired = 176;
	public static readonly RULE_userStatus = 177;
	public static readonly RULE_homeDatabase = 178;
	public static readonly RULE_showUsers = 179;
	public static readonly RULE_showCurrentUser = 180;
	public static readonly RULE_showPrivileges = 181;
	public static readonly RULE_showRolePrivileges = 182;
	public static readonly RULE_showUserPrivileges = 183;
	public static readonly RULE_grantRoleManagement = 184;
	public static readonly RULE_revokeRoleManagement = 185;
	public static readonly RULE_roleManagementPrivilege = 186;
	public static readonly RULE_grantPrivilege = 187;
	public static readonly RULE_denyPrivilege = 188;
	public static readonly RULE_revokePrivilege = 189;
	public static readonly RULE_privilege = 190;
	public static readonly RULE_allPrivilege = 191;
	public static readonly RULE_createPrivilege = 192;
	public static readonly RULE_dropPrivilege = 193;
	public static readonly RULE_showPrivilege = 194;
	public static readonly RULE_setPrivilege = 195;
	public static readonly RULE_removePrivilege = 196;
	public static readonly RULE_writePrivilege = 197;
	public static readonly RULE_databasePrivilege = 198;
	public static readonly RULE_dbmsPrivilege = 199;
	public static readonly RULE_executeFunctionQualifier = 200;
	public static readonly RULE_executeProcedureQualifier = 201;
	public static readonly RULE_settingQualifier = 202;
	public static readonly RULE_globs = 203;
	public static readonly RULE_qualifiedGraphPrivilegesWithProperty = 204;
	public static readonly RULE_qualifiedGraphPrivileges = 205;
	public static readonly RULE_labelResource = 206;
	public static readonly RULE_propertyResource = 207;
	public static readonly RULE_graphQualifier = 208;
	public static readonly RULE_createDatabase = 209;
	public static readonly RULE_options_ = 210;
	public static readonly RULE_createCompositeDatabase = 211;
	public static readonly RULE_dropDatabase = 212;
	public static readonly RULE_alterDatabase = 213;
	public static readonly RULE_startDatabase = 214;
	public static readonly RULE_stopDatabase = 215;
	public static readonly RULE_waitClause = 216;
	public static readonly RULE_showDatabase = 217;
	public static readonly RULE_databaseScopeList = 218;
	public static readonly RULE_graphScopeList = 219;
	public static readonly RULE_createAlias = 220;
	public static readonly RULE_dropAlias = 221;
	public static readonly RULE_alterAlias = 222;
	public static readonly RULE_showAliases = 223;
	public static readonly RULE_symbolicAliasNameList = 224;
	public static readonly RULE_symbolicAliasName = 225;
	public static readonly RULE_symbolicNameOrStringParameterList = 226;
	public static readonly RULE_symbolicNameOrStringParameter = 227;
	public static readonly RULE_glob = 228;
	public static readonly RULE_globRecursive = 229;
	public static readonly RULE_globPart = 230;
	public static readonly RULE_stringImage = 231;
	public static readonly RULE_stringList = 232;
	public static readonly RULE_stringToken = 233;
	public static readonly RULE_stringOrParameter = 234;
	public static readonly RULE_mapOrParameter = 235;
	public static readonly RULE_map = 236;
	public static readonly RULE_symbolicNamePositions = 237;
	public static readonly RULE_symbolicNameString = 238;
	public static readonly RULE_escapedSymbolicNameString = 239;
	public static readonly RULE_unescapedSymbolicNameString = 240;
	public static readonly RULE_endOfFile = 241;
	// tslint:disable:no-trailing-whitespace
	public static readonly ruleNames: string[] = [
		"statements", "statement", "singleQueryOrCommand", "singleQueryOrCommandWithUseClause", 
		"periodicCommitQueryHintFailure", "regularQuery", "union", "singleQuery", 
		"singleQueryWithUseClause", "clause", "useClause", "returnClause", "returnBody", 
		"returnItem", "returnItems", "orderItem", "skip", "limit", "whereClause", 
		"withClause", "createClause", "setClause", "setItem", "removeClause", 
		"removeItem", "deleteClause", "matchClause", "hints", "indexHintBody", 
		"mergeClause", "unwindClause", "callClause", "procedureName", "procedureArgument", 
		"procedureResultItem", "loadCSVClause", "foreachClause", "subqueryClause", 
		"subqueryInTransactionsParameters", "subqueryInTransactionsBatchParameters", 
		"subqueryInTransactionsErrorParameters", "subqueryInTransactionsReportParameters", 
		"patternList", "pattern", "quantifier", "anonymousPattern", "shortestPathPattern", 
		"maybeQuantifiedRelationshipPattern", "everyPathPattern", "everyPathPatternNonEmpty", 
		"nodePattern", "parenthesizedPath", "nodeLabels", "labelExpressionPredicate", 
		"labelOrRelType", "labelOrRelTypes", "properties", "relationshipPattern", 
		"leftArrow", "arrowLine", "rightArrow", "pathLength", "pathLengthLiteral", 
		"labelExpression", "labelExpressionName", "labelExpression4", "labelExpression4ExpectingBar", 
		"labelExpression3", "labelExpression2", "labelExpression1", "expression", 
		"expression12", "expression11", "expression10", "expression9", "expression8", 
		"expression7", "comparisonExpression6", "expression6", "expression5", 
		"expression4", "expression3", "expression2", "postFix1", "property", "propertyExpression", 
		"expression1", "literal", "caseExpression", "listComprehension", "patternComprehension", 
		"patternComprehensionPrefix", "reduceExpression", "allExpression", "anyExpression", 
		"noneExpression", "singleExpression", "patternExpression", "shortestPathExpression", 
		"mapProjection", "mapProjectionItem", "existsExpression", "countExpression", 
		"stringLiteral", "numberLiteral", "signedIntegerLiteral", "listLiteral", 
		"mapLiteral", "propertyKeyName", "parameter", "functionInvocation", "functionName", 
		"functionArgument", "namespace", "variableList1", "variable", "symbolicNameList1", 
		"createCommand", "command", "commandWithUseGraph", "dropCommand", "alterCommand", 
		"showCommand", "terminateCommand", "showAllCommand", "showNodeCommand", 
		"showRelationshipCommand", "showRelCommand", "showPropertyCommand", "yieldItem", 
		"yieldClause", "showIndexesAllowBrief", "showIndexesNoBrief", "showConstraintsAllowBriefAndYield", 
		"showConstraintsAllowBrief", "showConstraintsAllowYield", "showProcedures", 
		"showFunctions", "showTransactions", "terminateTransactions", "showOrTerminateTransactions", 
		"stringsOrExpression", "showSettings", "createConstraint", "dropConstraint", 
		"createIndex", "oldCreateIndex", "createIndex_", "createFulltextIndex", 
		"createLookupIndex", "dropIndex", "propertyList", "renameCommand", "grantCommand", 
		"revokeCommand", "enableServerCommand", "alterServer", "renameServer", 
		"dropServer", "showServers", "allocationCommand", "deallocateDatabaseFromServers", 
		"reallocateDatabases", "createRole", "dropRole", "renameRole", "showRoles", 
		"grantRole", "revokeRole", "createUser", "dropUser", "renameUser", "alterCurrentUser", 
		"alterUser", "setPassword", "passwordExpression", "passwordChangeRequired", 
		"userStatus", "homeDatabase", "showUsers", "showCurrentUser", "showPrivileges", 
		"showRolePrivileges", "showUserPrivileges", "grantRoleManagement", "revokeRoleManagement", 
		"roleManagementPrivilege", "grantPrivilege", "denyPrivilege", "revokePrivilege", 
		"privilege", "allPrivilege", "createPrivilege", "dropPrivilege", "showPrivilege", 
		"setPrivilege", "removePrivilege", "writePrivilege", "databasePrivilege", 
		"dbmsPrivilege", "executeFunctionQualifier", "executeProcedureQualifier", 
		"settingQualifier", "globs", "qualifiedGraphPrivilegesWithProperty", "qualifiedGraphPrivileges", 
		"labelResource", "propertyResource", "graphQualifier", "createDatabase", 
		"options_", "createCompositeDatabase", "dropDatabase", "alterDatabase", 
		"startDatabase", "stopDatabase", "waitClause", "showDatabase", "databaseScopeList", 
		"graphScopeList", "createAlias", "dropAlias", "alterAlias", "showAliases", 
		"symbolicAliasNameList", "symbolicAliasName", "symbolicNameOrStringParameterList", 
		"symbolicNameOrStringParameter", "glob", "globRecursive", "globPart", 
		"stringImage", "stringList", "stringToken", "stringOrParameter", "mapOrParameter", 
		"map", "symbolicNamePositions", "symbolicNameString", "escapedSymbolicNameString", 
		"unescapedSymbolicNameString", "endOfFile",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, "'|'", undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "':'", "','", undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "'$'", undefined, "'/'", "'.'", "'..'", 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "'='", undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"'>='", undefined, undefined, undefined, "'>'", undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'&'", 
		"'!'", "'['", "'{'", "'<='", undefined, undefined, undefined, "'('", "'<'", 
		undefined, undefined, undefined, "'-'", "'%'", "'!='", "'<>'", undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "'+'", "'+='", undefined, undefined, "'^'", undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'?'", 
		undefined, "']'", "'}'", undefined, undefined, undefined, undefined, "'=~'", 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		"')'", undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, "';'", undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, "'*'", 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, undefined, "'/*'", undefined, 
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, undefined, "'``'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "SPACE", "SINGLE_LINE_COMMENT", "DECIMAL_DOUBLE", "UNSIGNED_DECIMAL_INTEGER", 
		"UNSIGNED_HEX_INTEGER", "UNSIGNED_OCTAL_INTEGER", "ACCESS", "ACTIVE", 
		"ADMIN", "ADMINISTRATOR", "ALIAS", "ALIASES", "ALL_SHORTEST_PATH", "ALL", 
		"ALTER", "AND", "ANY", "AS", "ASC", "ASSERT", "ASSIGN", "AT", "BAR", "BOOSTED", 
		"BREAK", "BRIEF", "BTREE", "BUILT", "BY", "CALL", "CASE", "CHANGE", "COLON", 
		"COMMA", "COMMAND", "COMMANDS", "COMMIT", "COMPOSITE", "CONSTRAINT", "CONSTRAINTS", 
		"CONTAINS", "COPY", "CONTINUE", "COUNT", "CREATE", "CSV", "CURRENT", "DATA", 
		"DATABASE", "DATABASES", "DBMS", "DEALLOCATE", "DEFAULT_TOKEN", "DEFINED", 
		"DELETE", "DENY", "DESC", "DESTROY", "DETACH", "DOLLAR", "DISTINCT", "DIVIDE", 
		"DOT", "DOTDOT", "DRIVER", "DROP", "DRYRUN", "DUMP", "EACH", "ENABLE", 
		"ELEMENT", "ELEMENTS", "ELSE", "ENCRYPTED", "END", "ENDS", "EQ", "EXECUTABLE", 
		"EXECUTE", "EXIST", "EXISTENCE", "EXISTS", "ERROR", "FAIL", "FALSE", "FIELDTERMINATOR", 
		"FOR", "FOREACH", "FROM", "FULLTEXT", "FUNCTION", "FUNCTIONS", "GE", "GRANT", 
		"GRAPH", "GRAPHS", "GT", "HEADERS", "HOME", "IF", "IMPERSONATE", "IMMUTABLE", 
		"IN", "INDEX", "INDEXES", "INF", "INFINITY", "IS", "JOIN", "KEY", "LABEL", 
		"LABELS", "AMPERSAND", "EXCLAMATION_MARK", "LBRACKET", "LCURLY", "LE", 
		"LIMITROWS", "LOAD", "LOOKUP", "LPAREN", "LT", "MANAGEMENT", "MATCH", 
		"MERGE", "MINUS", "PERCENT", "NEQ", "NEQ2", "NAME", "NAMES", "NAN", "NEW", 
		"NODE", "NODES", "NONE", "NOT", "NOWAIT", "NULL", "OF", "ON", "ONLY", 
		"OPTIONAL", "OPTIONS", "OPTION", "OR", "ORDER", "OUTPUT", "PASSWORD", 
		"PASSWORDS", "PERIODIC", "PLAINTEXT", "PLUS", "PLUSEQUAL", "POINT", "POPULATED", 
		"POW", "PRIMARY", "PRIMARIES", "PRIVILEGE", "PRIVILEGES", "PROCEDURE", 
		"PROCEDURES", "PROPERTIES", "PROPERTY", "QUESTION", "RANGE", "RBRACKET", 
		"RCURLY", "READ", "REALLOCATE", "REDUCE", "RENAME", "REGEQ", "REL", "RELATIONSHIP", 
		"RELATIONSHIPS", "REMOVE", "REPLACE", "REPORT", "REQUIRE", "REQUIRED", 
		"RETURN", "REVOKE", "ROLE", "ROLES", "ROW", "ROWS", "RPAREN", "SCAN", 
		"SEC", "SECOND", "SECONDARY", "SECONDARIES", "SECONDS", "SEEK", "SEMICOLON", 
		"SERVER", "SERVERS", "SET", "SETTING", "SETTINGS", "SHORTEST_PATH", "SHOW", 
		"SINGLE", "SKIPROWS", "START", "STARTS", "STATUS", "STOP", "SUSPENDED", 
		"TARGET", "TERMINATE", "TEXT", "THEN", "TIMES", "TO", "TOPOLOGY", "TRANSACTION", 
		"TRANSACTIONS", "TRAVERSE", "TRUE", "TYPE", "TYPES", "UNION", "UNIQUE", 
		"UNIQUENESS", "UNWIND", "USE", "USER", "USERS", "USING", "VERBOSE", "WAIT", 
		"WHEN", "WHERE", "WITH", "WRITE", "XOR", "YIELD", "IDENTIFIER", "ARROW_LINE", 
		"ARROW_LEFT_HEAD", "ARROW_RIGHT_HEAD", "FORMAL_COMMENT", "STRING_LITERAL1", 
		"STRING_LITERAL2", "MULTI_LINE_COMMENT", "ESCAPED_SYMBOLIC_NAME", "MORE1", 
		"STRING1_OPEN", "STRING2_OPEN", "ESCAPED_SYMBOLIC_NAME_OPEN", "MORE3", 
		"MORE4", "MORE5", "MORE6", "MORE7", "MORE8", "MORE9", "MORE10", "MORE11", 
		"MORE24",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(CypherParser._LITERAL_NAMES, CypherParser._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return CypherParser.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace

	// @Override
	public get grammarFileName(): string { return "CypherParser.g4"; }

	// @Override
	public get ruleNames(): string[] { return CypherParser.ruleNames; }

	// @Override
	public get serializedATN(): string { return CypherParser._serializedATN; }

	protected createFailedPredicateException(predicate?: string, message?: string): FailedPredicateException {
		return new FailedPredicateException(this, predicate, message);
	}

	constructor(input: TokenStream) {
		super(input);
		this._interp = new ParserATNSimulator(CypherParser._ATN, this);
	}
	// @RuleVersion(0)
	public statements(): StatementsContext {
		let _localctx: StatementsContext = new StatementsContext(this._ctx, this.state);
		this.enterRule(_localctx, 0, CypherParser.RULE_statements);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 485;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 484;
				this.statement();
				}
				}
				this.state = 487;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === CypherParser.ALTER || _la === CypherParser.CALL || ((((_la - 45)) & ~0x1F) === 0 && ((1 << (_la - 45)) & ((1 << (CypherParser.CREATE - 45)) | (1 << (CypherParser.DEALLOCATE - 45)) | (1 << (CypherParser.DELETE - 45)) | (1 << (CypherParser.DENY - 45)) | (1 << (CypherParser.DETACH - 45)) | (1 << (CypherParser.DROP - 45)) | (1 << (CypherParser.DRYRUN - 45)) | (1 << (CypherParser.ENABLE - 45)))) !== 0) || ((((_la - 88)) & ~0x1F) === 0 && ((1 << (_la - 88)) & ((1 << (CypherParser.FOREACH - 88)) | (1 << (CypherParser.GRANT - 88)) | (1 << (CypherParser.LOAD - 88)))) !== 0) || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (CypherParser.MATCH - 124)) | (1 << (CypherParser.MERGE - 124)) | (1 << (CypherParser.OPTIONAL - 124)))) !== 0) || ((((_la - 171)) & ~0x1F) === 0 && ((1 << (_la - 171)) & ((1 << (CypherParser.REALLOCATE - 171)) | (1 << (CypherParser.RENAME - 171)) | (1 << (CypherParser.REMOVE - 171)) | (1 << (CypherParser.RETURN - 171)) | (1 << (CypherParser.REVOKE - 171)) | (1 << (CypherParser.SET - 171)))) !== 0) || ((((_la - 204)) & ~0x1F) === 0 && ((1 << (_la - 204)) & ((1 << (CypherParser.SHOW - 204)) | (1 << (CypherParser.START - 204)) | (1 << (CypherParser.STOP - 204)) | (1 << (CypherParser.TERMINATE - 204)) | (1 << (CypherParser.UNWIND - 204)) | (1 << (CypherParser.USE - 204)) | (1 << (CypherParser.USING - 204)))) !== 0) || _la === CypherParser.WITH);
			this.state = 489;
			this.match(CypherParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public statement(): StatementContext {
		let _localctx: StatementContext = new StatementContext(this._ctx, this.state);
		this.enterRule(_localctx, 2, CypherParser.RULE_statement);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 492;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.USING) {
				{
				this.state = 491;
				this.periodicCommitQueryHintFailure();
				}
			}

			this.state = 498;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 2, this._ctx) ) {
			case 1:
				{
				this.state = 494;
				this.useClause();
				this.state = 495;
				this.singleQueryOrCommandWithUseClause();
				}
				break;

			case 2:
				{
				this.state = 497;
				this.singleQueryOrCommand();
				}
				break;
			}
			this.state = 501;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.SEMICOLON) {
				{
				this.state = 500;
				this.match(CypherParser.SEMICOLON);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleQueryOrCommand(): SingleQueryOrCommandContext {
		let _localctx: SingleQueryOrCommandContext = new SingleQueryOrCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 4, CypherParser.RULE_singleQueryOrCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 512;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 5, this._ctx) ) {
			case 1:
				{
				this.state = 503;
				this.createCommand();
				}
				break;

			case 2:
				{
				this.state = 504;
				this.command();
				}
				break;

			case 3:
				{
				this.state = 505;
				this.singleQuery();
				this.state = 509;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.UNION) {
					{
					{
					this.state = 506;
					this.union();
					}
					}
					this.state = 511;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleQueryOrCommandWithUseClause(): SingleQueryOrCommandWithUseClauseContext {
		let _localctx: SingleQueryOrCommandWithUseClauseContext = new SingleQueryOrCommandWithUseClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 6, CypherParser.RULE_singleQueryOrCommandWithUseClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 523;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 7, this._ctx) ) {
			case 1:
				{
				this.state = 514;
				this.createCommand();
				}
				break;

			case 2:
				{
				this.state = 515;
				this.command();
				}
				break;

			case 3:
				{
				this.state = 516;
				this.singleQueryWithUseClause();
				this.state = 520;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.UNION) {
					{
					{
					this.state = 517;
					this.union();
					}
					}
					this.state = 522;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public periodicCommitQueryHintFailure(): PeriodicCommitQueryHintFailureContext {
		let _localctx: PeriodicCommitQueryHintFailureContext = new PeriodicCommitQueryHintFailureContext(this._ctx, this.state);
		this.enterRule(_localctx, 8, CypherParser.RULE_periodicCommitQueryHintFailure);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 525;
			this.match(CypherParser.USING);
			this.state = 526;
			this.match(CypherParser.PERIODIC);
			this.state = 527;
			this.match(CypherParser.COMMIT);
			this.state = 529;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.UNSIGNED_DECIMAL_INTEGER) {
				{
				this.state = 528;
				this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public regularQuery(): RegularQueryContext {
		let _localctx: RegularQueryContext = new RegularQueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 10, CypherParser.RULE_regularQuery);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 531;
			this.singleQuery();
			this.state = 535;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.UNION) {
				{
				{
				this.state = 532;
				this.union();
				}
				}
				this.state = 537;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public union(): UnionContext {
		let _localctx: UnionContext = new UnionContext(this._ctx, this.state);
		this.enterRule(_localctx, 12, CypherParser.RULE_union);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 538;
			this.match(CypherParser.UNION);
			this.state = 540;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.ALL) {
				{
				this.state = 539;
				this.match(CypherParser.ALL);
				}
			}

			this.state = 542;
			this.singleQuery();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleQuery(): SingleQueryContext {
		let _localctx: SingleQueryContext = new SingleQueryContext(this._ctx, this.state);
		this.enterRule(_localctx, 14, CypherParser.RULE_singleQuery);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 545;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 544;
					this.clause();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 547;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 11, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleQueryWithUseClause(): SingleQueryWithUseClauseContext {
		let _localctx: SingleQueryWithUseClauseContext = new SingleQueryWithUseClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 16, CypherParser.RULE_singleQueryWithUseClause);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 552;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 549;
					this.clause();
					}
					}
				}
				this.state = 554;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 12, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public clause(): ClauseContext {
		let _localctx: ClauseContext = new ClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 18, CypherParser.RULE_clause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 569;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 13, this._ctx) ) {
			case 1:
				{
				this.state = 555;
				this.useClause();
				}
				break;

			case 2:
				{
				this.state = 556;
				this.returnClause();
				}
				break;

			case 3:
				{
				this.state = 557;
				this.createClause();
				}
				break;

			case 4:
				{
				this.state = 558;
				this.deleteClause();
				}
				break;

			case 5:
				{
				this.state = 559;
				this.setClause();
				}
				break;

			case 6:
				{
				this.state = 560;
				this.removeClause();
				}
				break;

			case 7:
				{
				this.state = 561;
				this.matchClause();
				}
				break;

			case 8:
				{
				this.state = 562;
				this.mergeClause();
				}
				break;

			case 9:
				{
				this.state = 563;
				this.withClause();
				}
				break;

			case 10:
				{
				this.state = 564;
				this.unwindClause();
				}
				break;

			case 11:
				{
				this.state = 565;
				this.callClause();
				}
				break;

			case 12:
				{
				this.state = 566;
				this.subqueryClause();
				}
				break;

			case 13:
				{
				this.state = 567;
				this.loadCSVClause();
				}
				break;

			case 14:
				{
				this.state = 568;
				this.foreachClause();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public useClause(): UseClauseContext {
		let _localctx: UseClauseContext = new UseClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 20, CypherParser.RULE_useClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 571;
			this.match(CypherParser.USE);
			this.state = 575;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 14, this._ctx) ) {
			case 1:
				{
				this.state = 572;
				this.match(CypherParser.GRAPH);
				this.state = 573;
				this.expression();
				}
				break;

			case 2:
				{
				this.state = 574;
				this.expression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnClause(): ReturnClauseContext {
		let _localctx: ReturnClauseContext = new ReturnClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 22, CypherParser.RULE_returnClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 577;
			this.match(CypherParser.RETURN);
			this.state = 578;
			this.returnBody();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnBody(): ReturnBodyContext {
		let _localctx: ReturnBodyContext = new ReturnBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 24, CypherParser.RULE_returnBody);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 581;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 15, this._ctx) ) {
			case 1:
				{
				this.state = 580;
				this.match(CypherParser.DISTINCT);
				}
				break;
			}
			this.state = 583;
			this.returnItems();
			this.state = 594;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.ORDER) {
				{
				this.state = 584;
				this.match(CypherParser.ORDER);
				this.state = 585;
				this.match(CypherParser.BY);
				this.state = 586;
				this.orderItem();
				this.state = 591;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.COMMA) {
					{
					{
					this.state = 587;
					this.match(CypherParser.COMMA);
					this.state = 588;
					this.orderItem();
					}
					}
					this.state = 593;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 597;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.SKIPROWS) {
				{
				this.state = 596;
				this.skip();
				}
			}

			this.state = 600;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.LIMITROWS) {
				{
				this.state = 599;
				this.limit();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnItem(): ReturnItemContext {
		let _localctx: ReturnItemContext = new ReturnItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 26, CypherParser.RULE_returnItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 602;
			this.expression();
			this.state = 605;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.AS) {
				{
				this.state = 603;
				this.match(CypherParser.AS);
				this.state = 604;
				this.variable();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public returnItems(): ReturnItemsContext {
		let _localctx: ReturnItemsContext = new ReturnItemsContext(this._ctx, this.state);
		this.enterRule(_localctx, 28, CypherParser.RULE_returnItems);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 623;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.TIMES:
				{
				this.state = 607;
				this.match(CypherParser.TIMES);
				this.state = 612;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.COMMA) {
					{
					{
					this.state = 608;
					this.match(CypherParser.COMMA);
					this.state = 609;
					this.returnItem();
					}
					}
					this.state = 614;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case CypherParser.DECIMAL_DOUBLE:
			case CypherParser.UNSIGNED_DECIMAL_INTEGER:
			case CypherParser.UNSIGNED_HEX_INTEGER:
			case CypherParser.UNSIGNED_OCTAL_INTEGER:
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DOLLAR:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LBRACKET:
			case CypherParser.LCURLY:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.LPAREN:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.MINUS:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.PLUS:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.STRING_LITERAL1:
			case CypherParser.STRING_LITERAL2:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 615;
				this.returnItem();
				this.state = 620;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.COMMA) {
					{
					{
					this.state = 616;
					this.match(CypherParser.COMMA);
					this.state = 617;
					this.returnItem();
					}
					}
					this.state = 622;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public orderItem(): OrderItemContext {
		let _localctx: OrderItemContext = new OrderItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 30, CypherParser.RULE_orderItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 625;
			this.expression();
			this.state = 630;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DESC:
				{
				this.state = 626;
				this.match(CypherParser.DESC);
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.ASC:
			case CypherParser.CALL:
			case CypherParser.COMMA:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.RCURLY:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.RPAREN:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNION:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WHERE:
			case CypherParser.WITH:
				{
				this.state = 628;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.ASC) {
					{
					this.state = 627;
					this.match(CypherParser.ASC);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public skip(): SkipContext {
		let _localctx: SkipContext = new SkipContext(this._ctx, this.state);
		this.enterRule(_localctx, 32, CypherParser.RULE_skip);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 632;
			this.match(CypherParser.SKIPROWS);
			this.state = 633;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public limit(): LimitContext {
		let _localctx: LimitContext = new LimitContext(this._ctx, this.state);
		this.enterRule(_localctx, 34, CypherParser.RULE_limit);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 635;
			this.match(CypherParser.LIMITROWS);
			this.state = 636;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public whereClause(): WhereClauseContext {
		let _localctx: WhereClauseContext = new WhereClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 36, CypherParser.RULE_whereClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 638;
			this.match(CypherParser.WHERE);
			this.state = 639;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public withClause(): WithClauseContext {
		let _localctx: WithClauseContext = new WithClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 38, CypherParser.RULE_withClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 641;
			this.match(CypherParser.WITH);
			this.state = 642;
			this.returnBody();
			this.state = 644;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 643;
				this.whereClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createClause(): CreateClauseContext {
		let _localctx: CreateClauseContext = new CreateClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 40, CypherParser.RULE_createClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 646;
			this.match(CypherParser.CREATE);
			this.state = 647;
			this.patternList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setClause(): SetClauseContext {
		let _localctx: SetClauseContext = new SetClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 42, CypherParser.RULE_setClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 649;
			this.match(CypherParser.SET);
			this.state = 650;
			this.setItem();
			this.state = 655;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 651;
				this.match(CypherParser.COMMA);
				this.state = 652;
				this.setItem();
				}
				}
				this.state = 657;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setItem(): SetItemContext {
		let _localctx: SetItemContext = new SetItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 44, CypherParser.RULE_setItem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 673;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 28, this._ctx) ) {
			case 1:
				{
				this.state = 658;
				this.propertyExpression();
				this.state = 659;
				this.match(CypherParser.EQ);
				this.state = 660;
				this.expression();
				}
				break;

			case 2:
				{
				this.state = 662;
				this.variable();
				this.state = 663;
				this.match(CypherParser.EQ);
				this.state = 664;
				this.expression();
				}
				break;

			case 3:
				{
				this.state = 666;
				this.variable();
				this.state = 667;
				this.match(CypherParser.PLUSEQUAL);
				this.state = 668;
				this.expression();
				}
				break;

			case 4:
				{
				this.state = 670;
				this.variable();
				this.state = 671;
				this.nodeLabels();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public removeClause(): RemoveClauseContext {
		let _localctx: RemoveClauseContext = new RemoveClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 46, CypherParser.RULE_removeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 675;
			this.match(CypherParser.REMOVE);
			this.state = 676;
			this.removeItem();
			this.state = 681;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 677;
				this.match(CypherParser.COMMA);
				this.state = 678;
				this.removeItem();
				}
				}
				this.state = 683;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public removeItem(): RemoveItemContext {
		let _localctx: RemoveItemContext = new RemoveItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 48, CypherParser.RULE_removeItem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 688;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 30, this._ctx) ) {
			case 1:
				{
				this.state = 684;
				this.propertyExpression();
				}
				break;

			case 2:
				{
				this.state = 685;
				this.variable();
				this.state = 686;
				this.nodeLabels();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deleteClause(): DeleteClauseContext {
		let _localctx: DeleteClauseContext = new DeleteClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 50, CypherParser.RULE_deleteClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 691;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.DETACH) {
				{
				this.state = 690;
				this.match(CypherParser.DETACH);
				}
			}

			this.state = 693;
			this.match(CypherParser.DELETE);
			this.state = 694;
			this.expression();
			this.state = 699;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 695;
				this.match(CypherParser.COMMA);
				this.state = 696;
				this.expression();
				}
				}
				this.state = 701;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public matchClause(): MatchClauseContext {
		let _localctx: MatchClauseContext = new MatchClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 52, CypherParser.RULE_matchClause);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 705;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.OPTIONAL:
				{
				{
				this.state = 702;
				this.match(CypherParser.OPTIONAL);
				this.state = 703;
				this.match(CypherParser.MATCH);
				}
				}
				break;
			case CypherParser.MATCH:
				{
				this.state = 704;
				this.match(CypherParser.MATCH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 707;
			this.patternList();
			this.state = 711;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 708;
					this.hints();
					}
					}
				}
				this.state = 713;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 34, this._ctx);
			}
			this.state = 715;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 714;
				this.whereClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public hints(): HintsContext {
		let _localctx: HintsContext = new HintsContext(this._ctx, this.state);
		this.enterRule(_localctx, 54, CypherParser.RULE_hints);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 717;
			this.match(CypherParser.USING);
			this.state = 739;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.INDEX:
				{
				this.state = 718;
				this.match(CypherParser.INDEX);
				this.state = 719;
				this.indexHintBody();
				}
				break;
			case CypherParser.BTREE:
				{
				this.state = 720;
				this.match(CypherParser.BTREE);
				this.state = 721;
				this.match(CypherParser.INDEX);
				this.state = 722;
				this.indexHintBody();
				}
				break;
			case CypherParser.TEXT:
				{
				this.state = 723;
				this.match(CypherParser.TEXT);
				this.state = 724;
				this.match(CypherParser.INDEX);
				this.state = 725;
				this.indexHintBody();
				}
				break;
			case CypherParser.RANGE:
				{
				this.state = 726;
				this.match(CypherParser.RANGE);
				this.state = 727;
				this.match(CypherParser.INDEX);
				this.state = 728;
				this.indexHintBody();
				}
				break;
			case CypherParser.POINT:
				{
				this.state = 729;
				this.match(CypherParser.POINT);
				this.state = 730;
				this.match(CypherParser.INDEX);
				this.state = 731;
				this.indexHintBody();
				}
				break;
			case CypherParser.JOIN:
				{
				this.state = 732;
				this.match(CypherParser.JOIN);
				this.state = 733;
				this.match(CypherParser.ON);
				this.state = 734;
				this.variableList1();
				}
				break;
			case CypherParser.SCAN:
				{
				this.state = 735;
				this.match(CypherParser.SCAN);
				this.state = 736;
				this.variable();
				this.state = 737;
				this.labelOrRelType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public indexHintBody(): IndexHintBodyContext {
		let _localctx: IndexHintBodyContext = new IndexHintBodyContext(this._ctx, this.state);
		this.enterRule(_localctx, 56, CypherParser.RULE_indexHintBody);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 742;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 37, this._ctx) ) {
			case 1:
				{
				this.state = 741;
				this.match(CypherParser.SEEK);
				}
				break;
			}
			this.state = 744;
			this.variable();
			this.state = 745;
			this.labelOrRelType();
			this.state = 746;
			this.match(CypherParser.LPAREN);
			this.state = 747;
			this.symbolicNameList1();
			this.state = 748;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mergeClause(): MergeClauseContext {
		let _localctx: MergeClauseContext = new MergeClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 58, CypherParser.RULE_mergeClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 750;
			this.match(CypherParser.MERGE);
			this.state = 751;
			this.pattern();
			this.state = 761;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.ON) {
				{
				{
				this.state = 752;
				this.match(CypherParser.ON);
				this.state = 757;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.MATCH:
					{
					this.state = 753;
					this.match(CypherParser.MATCH);
					this.state = 754;
					this.setClause();
					}
					break;
				case CypherParser.CREATE:
					{
					this.state = 755;
					this.match(CypherParser.CREATE);
					this.state = 756;
					this.setClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				}
				this.state = 763;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unwindClause(): UnwindClauseContext {
		let _localctx: UnwindClauseContext = new UnwindClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 60, CypherParser.RULE_unwindClause);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 764;
			this.match(CypherParser.UNWIND);
			this.state = 765;
			this.expression();
			this.state = 766;
			this.match(CypherParser.AS);
			this.state = 767;
			this.variable();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public callClause(): CallClauseContext {
		let _localctx: CallClauseContext = new CallClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 62, CypherParser.RULE_callClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 769;
			this.match(CypherParser.CALL);
			this.state = 770;
			this.procedureName();
			this.state = 783;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.LPAREN) {
				{
				this.state = 771;
				this.match(CypherParser.LPAREN);
				this.state = 773;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.DECIMAL_DOUBLE) | (1 << CypherParser.UNSIGNED_DECIMAL_INTEGER) | (1 << CypherParser.UNSIGNED_HEX_INTEGER) | (1 << CypherParser.UNSIGNED_OCTAL_INTEGER) | (1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DOLLAR - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LBRACKET - 98)) | (1 << (CypherParser.LCURLY - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.LPAREN - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)) | (1 << (CypherParser.MINUS - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.PLUS - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.STRING_LITERAL1 - 226)) | (1 << (CypherParser.STRING_LITERAL2 - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
					{
					this.state = 772;
					this.procedureArgument();
					}
				}

				this.state = 779;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.COMMA) {
					{
					{
					this.state = 775;
					this.match(CypherParser.COMMA);
					this.state = 776;
					this.procedureArgument();
					}
					}
					this.state = 781;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 782;
				this.match(CypherParser.RPAREN);
				}
			}

			this.state = 800;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.YIELD) {
				{
				this.state = 785;
				this.match(CypherParser.YIELD);
				this.state = 798;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TIMES:
					{
					this.state = 786;
					this.match(CypherParser.TIMES);
					}
					break;
				case CypherParser.ACCESS:
				case CypherParser.ACTIVE:
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
				case CypherParser.ALIAS:
				case CypherParser.ALIASES:
				case CypherParser.ALL_SHORTEST_PATH:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.AND:
				case CypherParser.ANY:
				case CypherParser.AS:
				case CypherParser.ASC:
				case CypherParser.ASSERT:
				case CypherParser.ASSIGN:
				case CypherParser.AT:
				case CypherParser.BOOSTED:
				case CypherParser.BREAK:
				case CypherParser.BRIEF:
				case CypherParser.BTREE:
				case CypherParser.BUILT:
				case CypherParser.BY:
				case CypherParser.CALL:
				case CypherParser.CASE:
				case CypherParser.CHANGE:
				case CypherParser.COMMAND:
				case CypherParser.COMMANDS:
				case CypherParser.COMMIT:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CONTAINS:
				case CypherParser.COPY:
				case CypherParser.CONTINUE:
				case CypherParser.COUNT:
				case CypherParser.CREATE:
				case CypherParser.CSV:
				case CypherParser.CURRENT:
				case CypherParser.DATA:
				case CypherParser.DATABASE:
				case CypherParser.DATABASES:
				case CypherParser.DBMS:
				case CypherParser.DEALLOCATE:
				case CypherParser.DEFAULT_TOKEN:
				case CypherParser.DEFINED:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DESC:
				case CypherParser.DESTROY:
				case CypherParser.DETACH:
				case CypherParser.DISTINCT:
				case CypherParser.DRIVER:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.DUMP:
				case CypherParser.EACH:
				case CypherParser.ENABLE:
				case CypherParser.ELEMENT:
				case CypherParser.ELEMENTS:
				case CypherParser.ELSE:
				case CypherParser.ENCRYPTED:
				case CypherParser.END:
				case CypherParser.ENDS:
				case CypherParser.EXECUTABLE:
				case CypherParser.EXECUTE:
				case CypherParser.EXIST:
				case CypherParser.EXISTENCE:
				case CypherParser.EXISTS:
				case CypherParser.ERROR:
				case CypherParser.FAIL:
				case CypherParser.FALSE:
				case CypherParser.FIELDTERMINATOR:
				case CypherParser.FOR:
				case CypherParser.FOREACH:
				case CypherParser.FROM:
				case CypherParser.FULLTEXT:
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.GRANT:
				case CypherParser.GRAPH:
				case CypherParser.GRAPHS:
				case CypherParser.HEADERS:
				case CypherParser.HOME:
				case CypherParser.IF:
				case CypherParser.IMMUTABLE:
				case CypherParser.IN:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.INF:
				case CypherParser.INFINITY:
				case CypherParser.IS:
				case CypherParser.JOIN:
				case CypherParser.KEY:
				case CypherParser.LABEL:
				case CypherParser.LABELS:
				case CypherParser.LIMITROWS:
				case CypherParser.LOAD:
				case CypherParser.LOOKUP:
				case CypherParser.MANAGEMENT:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.NAMES:
				case CypherParser.NAN:
				case CypherParser.NEW:
				case CypherParser.NODE:
				case CypherParser.NODES:
				case CypherParser.NONE:
				case CypherParser.NOT:
				case CypherParser.NOWAIT:
				case CypherParser.NULL:
				case CypherParser.OF:
				case CypherParser.ON:
				case CypherParser.ONLY:
				case CypherParser.OPTIONAL:
				case CypherParser.OPTIONS:
				case CypherParser.OPTION:
				case CypherParser.OR:
				case CypherParser.ORDER:
				case CypherParser.OUTPUT:
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
				case CypherParser.PERIODIC:
				case CypherParser.PLAINTEXT:
				case CypherParser.POINT:
				case CypherParser.POPULATED:
				case CypherParser.PRIMARY:
				case CypherParser.PRIMARIES:
				case CypherParser.PRIVILEGE:
				case CypherParser.PRIVILEGES:
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
				case CypherParser.PROPERTIES:
				case CypherParser.PROPERTY:
				case CypherParser.RANGE:
				case CypherParser.READ:
				case CypherParser.REALLOCATE:
				case CypherParser.REDUCE:
				case CypherParser.RENAME:
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
				case CypherParser.RELATIONSHIPS:
				case CypherParser.REMOVE:
				case CypherParser.REPLACE:
				case CypherParser.REPORT:
				case CypherParser.REQUIRE:
				case CypherParser.REQUIRED:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.ROLE:
				case CypherParser.ROLES:
				case CypherParser.ROW:
				case CypherParser.ROWS:
				case CypherParser.SCAN:
				case CypherParser.SEC:
				case CypherParser.SECOND:
				case CypherParser.SECONDARY:
				case CypherParser.SECONDARIES:
				case CypherParser.SECONDS:
				case CypherParser.SEEK:
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
				case CypherParser.SET:
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
				case CypherParser.SHORTEST_PATH:
				case CypherParser.SHOW:
				case CypherParser.SINGLE:
				case CypherParser.SKIPROWS:
				case CypherParser.START:
				case CypherParser.STARTS:
				case CypherParser.STATUS:
				case CypherParser.STOP:
				case CypherParser.SUSPENDED:
				case CypherParser.TARGET:
				case CypherParser.TERMINATE:
				case CypherParser.TEXT:
				case CypherParser.THEN:
				case CypherParser.TO:
				case CypherParser.TOPOLOGY:
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
				case CypherParser.TRAVERSE:
				case CypherParser.TRUE:
				case CypherParser.TYPE:
				case CypherParser.TYPES:
				case CypherParser.UNION:
				case CypherParser.UNIQUE:
				case CypherParser.UNIQUENESS:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USER:
				case CypherParser.USERS:
				case CypherParser.USING:
				case CypherParser.VERBOSE:
				case CypherParser.WAIT:
				case CypherParser.WHEN:
				case CypherParser.WHERE:
				case CypherParser.WITH:
				case CypherParser.WRITE:
				case CypherParser.XOR:
				case CypherParser.YIELD:
				case CypherParser.IDENTIFIER:
				case CypherParser.ESCAPED_SYMBOLIC_NAME:
					{
					this.state = 787;
					this.procedureResultItem();
					this.state = 792;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === CypherParser.COMMA) {
						{
						{
						this.state = 788;
						this.match(CypherParser.COMMA);
						this.state = 789;
						this.procedureResultItem();
						}
						}
						this.state = 794;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					this.state = 796;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.WHERE) {
						{
						this.state = 795;
						this.whereClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureName(): ProcedureNameContext {
		let _localctx: ProcedureNameContext = new ProcedureNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 64, CypherParser.RULE_procedureName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 802;
			this.namespace();
			this.state = 803;
			this.symbolicNameString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureArgument(): ProcedureArgumentContext {
		let _localctx: ProcedureArgumentContext = new ProcedureArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 66, CypherParser.RULE_procedureArgument);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 805;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public procedureResultItem(): ProcedureResultItemContext {
		let _localctx: ProcedureResultItemContext = new ProcedureResultItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 68, CypherParser.RULE_procedureResultItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 807;
			this.symbolicNameString();
			this.state = 810;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.AS) {
				{
				this.state = 808;
				this.match(CypherParser.AS);
				this.state = 809;
				this.variable();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public loadCSVClause(): LoadCSVClauseContext {
		let _localctx: LoadCSVClauseContext = new LoadCSVClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 70, CypherParser.RULE_loadCSVClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 812;
			this.match(CypherParser.LOAD);
			this.state = 813;
			this.match(CypherParser.CSV);
			this.state = 816;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WITH) {
				{
				this.state = 814;
				this.match(CypherParser.WITH);
				this.state = 815;
				this.match(CypherParser.HEADERS);
				}
			}

			this.state = 818;
			this.match(CypherParser.FROM);
			this.state = 819;
			this.expression();
			this.state = 820;
			this.match(CypherParser.AS);
			this.state = 821;
			this.variable();
			this.state = 824;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.FIELDTERMINATOR) {
				{
				this.state = 822;
				this.match(CypherParser.FIELDTERMINATOR);
				this.state = 823;
				this.stringToken();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public foreachClause(): ForeachClauseContext {
		let _localctx: ForeachClauseContext = new ForeachClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 72, CypherParser.RULE_foreachClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 826;
			this.match(CypherParser.FOREACH);
			this.state = 827;
			this.match(CypherParser.LPAREN);
			this.state = 828;
			this.variable();
			this.state = 829;
			this.match(CypherParser.IN);
			this.state = 830;
			this.expression();
			this.state = 831;
			this.match(CypherParser.BAR);
			this.state = 833;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 832;
				this.clause();
				}
				}
				this.state = 835;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (((((_la - 30)) & ~0x1F) === 0 && ((1 << (_la - 30)) & ((1 << (CypherParser.CALL - 30)) | (1 << (CypherParser.CREATE - 30)) | (1 << (CypherParser.DELETE - 30)) | (1 << (CypherParser.DETACH - 30)))) !== 0) || _la === CypherParser.FOREACH || _la === CypherParser.LOAD || ((((_la - 124)) & ~0x1F) === 0 && ((1 << (_la - 124)) & ((1 << (CypherParser.MATCH - 124)) | (1 << (CypherParser.MERGE - 124)) | (1 << (CypherParser.OPTIONAL - 124)))) !== 0) || ((((_la - 178)) & ~0x1F) === 0 && ((1 << (_la - 178)) & ((1 << (CypherParser.REMOVE - 178)) | (1 << (CypherParser.RETURN - 178)) | (1 << (CypherParser.SET - 178)))) !== 0) || ((((_la - 228)) & ~0x1F) === 0 && ((1 << (_la - 228)) & ((1 << (CypherParser.UNWIND - 228)) | (1 << (CypherParser.USE - 228)) | (1 << (CypherParser.WITH - 228)))) !== 0));
			this.state = 837;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subqueryClause(): SubqueryClauseContext {
		let _localctx: SubqueryClauseContext = new SubqueryClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 74, CypherParser.RULE_subqueryClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 839;
			this.match(CypherParser.CALL);
			this.state = 840;
			this.match(CypherParser.LCURLY);
			this.state = 841;
			this.regularQuery();
			this.state = 842;
			this.match(CypherParser.RCURLY);
			this.state = 844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IN) {
				{
				this.state = 843;
				this.subqueryInTransactionsParameters();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subqueryInTransactionsParameters(): SubqueryInTransactionsParametersContext {
		let _localctx: SubqueryInTransactionsParametersContext = new SubqueryInTransactionsParametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 76, CypherParser.RULE_subqueryInTransactionsParameters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 846;
			this.match(CypherParser.IN);
			this.state = 847;
			this.match(CypherParser.TRANSACTIONS);
			this.state = 853;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.OF || _la === CypherParser.ON || _la === CypherParser.REPORT) {
				{
				this.state = 851;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.OF:
					{
					this.state = 848;
					this.subqueryInTransactionsBatchParameters();
					}
					break;
				case CypherParser.ON:
					{
					this.state = 849;
					this.subqueryInTransactionsErrorParameters();
					}
					break;
				case CypherParser.REPORT:
					{
					this.state = 850;
					this.subqueryInTransactionsReportParameters();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 855;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subqueryInTransactionsBatchParameters(): SubqueryInTransactionsBatchParametersContext {
		let _localctx: SubqueryInTransactionsBatchParametersContext = new SubqueryInTransactionsBatchParametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 78, CypherParser.RULE_subqueryInTransactionsBatchParameters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 856;
			this.match(CypherParser.OF);
			this.state = 857;
			this.expression();
			this.state = 858;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.ROW || _la === CypherParser.ROWS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subqueryInTransactionsErrorParameters(): SubqueryInTransactionsErrorParametersContext {
		let _localctx: SubqueryInTransactionsErrorParametersContext = new SubqueryInTransactionsErrorParametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 80, CypherParser.RULE_subqueryInTransactionsErrorParameters);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 860;
			this.match(CypherParser.ON);
			this.state = 861;
			this.match(CypherParser.ERROR);
			this.state = 862;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.BREAK || _la === CypherParser.CONTINUE || _la === CypherParser.FAIL)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public subqueryInTransactionsReportParameters(): SubqueryInTransactionsReportParametersContext {
		let _localctx: SubqueryInTransactionsReportParametersContext = new SubqueryInTransactionsReportParametersContext(this._ctx, this.state);
		this.enterRule(_localctx, 82, CypherParser.RULE_subqueryInTransactionsReportParameters);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 864;
			this.match(CypherParser.REPORT);
			this.state = 865;
			this.match(CypherParser.STATUS);
			this.state = 866;
			this.match(CypherParser.AS);
			this.state = 867;
			this.variable();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public patternList(): PatternListContext {
		let _localctx: PatternListContext = new PatternListContext(this._ctx, this.state);
		this.enterRule(_localctx, 84, CypherParser.RULE_patternList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 869;
			this.pattern();
			this.state = 874;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 870;
				this.match(CypherParser.COMMA);
				this.state = 871;
				this.pattern();
				}
				}
				this.state = 876;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pattern(): PatternContext {
		let _localctx: PatternContext = new PatternContext(this._ctx, this.state);
		this.enterRule(_localctx, 86, CypherParser.RULE_pattern);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 882;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 55, this._ctx) ) {
			case 1:
				{
				this.state = 877;
				this.variable();
				this.state = 878;
				this.match(CypherParser.EQ);
				this.state = 879;
				this.anonymousPattern();
				}
				break;

			case 2:
				{
				this.state = 881;
				this.anonymousPattern();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public quantifier(): QuantifierContext {
		let _localctx: QuantifierContext = new QuantifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 88, CypherParser.RULE_quantifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 898;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 58, this._ctx) ) {
			case 1:
				{
				this.state = 884;
				this.match(CypherParser.LCURLY);
				this.state = 885;
				this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
				this.state = 886;
				this.match(CypherParser.RCURLY);
				}
				break;

			case 2:
				{
				this.state = 887;
				this.match(CypherParser.LCURLY);
				this.state = 889;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.UNSIGNED_DECIMAL_INTEGER) {
					{
					this.state = 888;
					this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
					}
				}

				this.state = 891;
				this.match(CypherParser.COMMA);
				this.state = 893;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.UNSIGNED_DECIMAL_INTEGER) {
					{
					this.state = 892;
					this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
					}
				}

				this.state = 895;
				this.match(CypherParser.RCURLY);
				}
				break;

			case 3:
				{
				this.state = 896;
				this.match(CypherParser.PLUS);
				}
				break;

			case 4:
				{
				this.state = 897;
				this.match(CypherParser.TIMES);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public anonymousPattern(): AnonymousPatternContext {
		let _localctx: AnonymousPatternContext = new AnonymousPatternContext(this._ctx, this.state);
		this.enterRule(_localctx, 90, CypherParser.RULE_anonymousPattern);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 902;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.SHORTEST_PATH:
				{
				this.state = 900;
				this.shortestPathPattern();
				}
				break;
			case CypherParser.LPAREN:
				{
				this.state = 901;
				this.everyPathPattern();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shortestPathPattern(): ShortestPathPatternContext {
		let _localctx: ShortestPathPatternContext = new ShortestPathPatternContext(this._ctx, this.state);
		this.enterRule(_localctx, 92, CypherParser.RULE_shortestPathPattern);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 914;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.SHORTEST_PATH:
				{
				this.state = 904;
				this.match(CypherParser.SHORTEST_PATH);
				this.state = 905;
				this.match(CypherParser.LPAREN);
				this.state = 906;
				this.everyPathPattern();
				this.state = 907;
				this.match(CypherParser.RPAREN);
				}
				break;
			case CypherParser.ALL_SHORTEST_PATH:
				{
				this.state = 909;
				this.match(CypherParser.ALL_SHORTEST_PATH);
				this.state = 910;
				this.match(CypherParser.LPAREN);
				this.state = 911;
				this.everyPathPattern();
				this.state = 912;
				this.match(CypherParser.RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public maybeQuantifiedRelationshipPattern(): MaybeQuantifiedRelationshipPatternContext {
		let _localctx: MaybeQuantifiedRelationshipPatternContext = new MaybeQuantifiedRelationshipPatternContext(this._ctx, this.state);
		this.enterRule(_localctx, 94, CypherParser.RULE_maybeQuantifiedRelationshipPattern);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 916;
			this.relationshipPattern();
			this.state = 918;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.LCURLY || _la === CypherParser.PLUS || _la === CypherParser.TIMES) {
				{
				this.state = 917;
				this.quantifier();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public everyPathPattern(): EveryPathPatternContext {
		let _localctx: EveryPathPatternContext = new EveryPathPatternContext(this._ctx, this.state);
		this.enterRule(_localctx, 96, CypherParser.RULE_everyPathPattern);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 930;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 930;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 63, this._ctx) ) {
				case 1:
					{
					this.state = 920;
					this.nodePattern();
					this.state = 926;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === CypherParser.LT || _la === CypherParser.MINUS || _la === CypherParser.ARROW_LINE || _la === CypherParser.ARROW_LEFT_HEAD) {
						{
						{
						this.state = 921;
						this.maybeQuantifiedRelationshipPattern();
						this.state = 922;
						this.nodePattern();
						}
						}
						this.state = 928;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;

				case 2:
					{
					this.state = 929;
					this.parenthesizedPath();
					}
					break;
				}
				}
				this.state = 932;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === CypherParser.LPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public everyPathPatternNonEmpty(): EveryPathPatternNonEmptyContext {
		let _localctx: EveryPathPatternNonEmptyContext = new EveryPathPatternNonEmptyContext(this._ctx, this.state);
		this.enterRule(_localctx, 98, CypherParser.RULE_everyPathPatternNonEmpty);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 934;
			this.nodePattern();
			this.state = 938;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 935;
					this.relationshipPattern();
					this.state = 936;
					this.nodePattern();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 940;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 65, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nodePattern(): NodePatternContext {
		let _localctx: NodePatternContext = new NodePatternContext(this._ctx, this.state);
		this.enterRule(_localctx, 100, CypherParser.RULE_nodePattern);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 942;
			this.match(CypherParser.LPAREN);
			this.state = 968;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 71, this._ctx) ) {
			case 1:
				{
				this.state = 943;
				this.variable();
				this.state = 944;
				this.match(CypherParser.WHERE);
				this.state = 945;
				this.expression();
				}
				break;

			case 2:
				{
				this.state = 947;
				this.variable();
				this.state = 948;
				this.properties();
				this.state = 951;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.WHERE) {
					{
					this.state = 949;
					this.match(CypherParser.WHERE);
					this.state = 950;
					this.expression();
					}
				}

				}
				break;

			case 3:
				{
				this.state = 953;
				this.match(CypherParser.WHERE);
				this.state = 954;
				this.expression();
				}
				break;

			case 4:
				{
				this.state = 956;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 67, this._ctx) ) {
				case 1:
					{
					this.state = 955;
					this.variable();
					}
					break;
				}
				this.state = 959;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.COLON) {
					{
					this.state = 958;
					this.labelExpression();
					}
				}

				this.state = 962;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.DOLLAR || _la === CypherParser.LCURLY) {
					{
					this.state = 961;
					this.properties();
					}
				}

				this.state = 966;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.WHERE) {
					{
					this.state = 964;
					this.match(CypherParser.WHERE);
					this.state = 965;
					this.expression();
					}
				}

				}
				break;
			}
			this.state = 970;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parenthesizedPath(): ParenthesizedPathContext {
		let _localctx: ParenthesizedPathContext = new ParenthesizedPathContext(this._ctx, this.state);
		this.enterRule(_localctx, 102, CypherParser.RULE_parenthesizedPath);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 972;
			this.match(CypherParser.LPAREN);
			this.state = 973;
			this.pattern();
			this.state = 976;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 974;
				this.match(CypherParser.WHERE);
				this.state = 975;
				this.expression();
				}
			}

			this.state = 978;
			this.match(CypherParser.RPAREN);
			this.state = 980;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.LCURLY || _la === CypherParser.PLUS || _la === CypherParser.TIMES) {
				{
				this.state = 979;
				this.quantifier();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public nodeLabels(): NodeLabelsContext {
		let _localctx: NodeLabelsContext = new NodeLabelsContext(this._ctx, this.state);
		this.enterRule(_localctx, 104, CypherParser.RULE_nodeLabels);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 983;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 982;
				this.labelOrRelType();
				}
				}
				this.state = 985;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === CypherParser.COLON);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelExpressionPredicate(): LabelExpressionPredicateContext {
		let _localctx: LabelExpressionPredicateContext = new LabelExpressionPredicateContext(this._ctx, this.state);
		this.enterRule(_localctx, 106, CypherParser.RULE_labelExpressionPredicate);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 987;
			this.labelExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelOrRelType(): LabelOrRelTypeContext {
		let _localctx: LabelOrRelTypeContext = new LabelOrRelTypeContext(this._ctx, this.state);
		this.enterRule(_localctx, 108, CypherParser.RULE_labelOrRelType);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 989;
			this.match(CypherParser.COLON);
			this.state = 990;
			this.symbolicNameString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelOrRelTypes(): LabelOrRelTypesContext {
		let _localctx: LabelOrRelTypesContext = new LabelOrRelTypesContext(this._ctx, this.state);
		this.enterRule(_localctx, 110, CypherParser.RULE_labelOrRelTypes);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 992;
			this.match(CypherParser.COLON);
			this.state = 993;
			this.symbolicNameString();
			this.state = 998;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.BAR) {
				{
				{
				this.state = 994;
				this.match(CypherParser.BAR);
				this.state = 995;
				this.symbolicNameString();
				}
				}
				this.state = 1000;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public properties(): PropertiesContext {
		let _localctx: PropertiesContext = new PropertiesContext(this._ctx, this.state);
		this.enterRule(_localctx, 112, CypherParser.RULE_properties);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1003;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.LCURLY:
				{
				this.state = 1001;
				this.mapLiteral();
				}
				break;
			case CypherParser.DOLLAR:
				{
				this.state = 1002;
				this.parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public relationshipPattern(): RelationshipPatternContext {
		let _localctx: RelationshipPatternContext = new RelationshipPatternContext(this._ctx, this.state);
		this.enterRule(_localctx, 114, CypherParser.RULE_relationshipPattern);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1006;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.LT || _la === CypherParser.ARROW_LEFT_HEAD) {
				{
				this.state = 1005;
				this.leftArrow();
				}
			}

			this.state = 1008;
			this.arrowLine();
			this.state = 1041;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.LBRACKET) {
				{
				this.state = 1009;
				this.match(CypherParser.LBRACKET);
				this.state = 1038;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 84, this._ctx) ) {
				case 1:
					{
					this.state = 1010;
					this.variable();
					this.state = 1011;
					this.match(CypherParser.WHERE);
					this.state = 1012;
					this.expression();
					}
					break;

				case 2:
					{
					this.state = 1014;
					this.variable();
					this.state = 1015;
					this.properties();
					this.state = 1018;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.WHERE) {
						{
						this.state = 1016;
						this.match(CypherParser.WHERE);
						this.state = 1017;
						this.expression();
						}
					}

					}
					break;

				case 3:
					{
					this.state = 1020;
					this.match(CypherParser.WHERE);
					this.state = 1021;
					this.expression();
					}
					break;

				case 4:
					{
					this.state = 1023;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 79, this._ctx) ) {
					case 1:
						{
						this.state = 1022;
						this.variable();
						}
						break;
					}
					this.state = 1026;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.COLON) {
						{
						this.state = 1025;
						this.labelExpression();
						}
					}

					this.state = 1029;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.TIMES) {
						{
						this.state = 1028;
						this.pathLength();
						}
					}

					this.state = 1032;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.DOLLAR || _la === CypherParser.LCURLY) {
						{
						this.state = 1031;
						this.properties();
						}
					}

					this.state = 1036;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.WHERE) {
						{
						this.state = 1034;
						this.match(CypherParser.WHERE);
						this.state = 1035;
						this.expression();
						}
					}

					}
					break;
				}
				this.state = 1040;
				this.match(CypherParser.RBRACKET);
				}
			}

			this.state = 1043;
			this.arrowLine();
			this.state = 1045;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.GT || _la === CypherParser.ARROW_RIGHT_HEAD) {
				{
				this.state = 1044;
				this.rightArrow();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public leftArrow(): LeftArrowContext {
		let _localctx: LeftArrowContext = new LeftArrowContext(this._ctx, this.state);
		this.enterRule(_localctx, 116, CypherParser.RULE_leftArrow);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1047;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.LT || _la === CypherParser.ARROW_LEFT_HEAD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public arrowLine(): ArrowLineContext {
		let _localctx: ArrowLineContext = new ArrowLineContext(this._ctx, this.state);
		this.enterRule(_localctx, 118, CypherParser.RULE_arrowLine);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1049;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.MINUS || _la === CypherParser.ARROW_LINE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public rightArrow(): RightArrowContext {
		let _localctx: RightArrowContext = new RightArrowContext(this._ctx, this.state);
		this.enterRule(_localctx, 120, CypherParser.RULE_rightArrow);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1051;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.GT || _la === CypherParser.ARROW_RIGHT_HEAD)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pathLength(): PathLengthContext {
		let _localctx: PathLengthContext = new PathLengthContext(this._ctx, this.state);
		this.enterRule(_localctx, 122, CypherParser.RULE_pathLength);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1053;
			this.match(CypherParser.TIMES);
			this.state = 1055;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.UNSIGNED_DECIMAL_INTEGER || _la === CypherParser.DOTDOT) {
				{
				this.state = 1054;
				this.pathLengthLiteral();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public pathLengthLiteral(): PathLengthLiteralContext {
		let _localctx: PathLengthLiteralContext = new PathLengthLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 124, CypherParser.RULE_pathLengthLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1065;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 90, this._ctx) ) {
			case 1:
				{
				this.state = 1058;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.UNSIGNED_DECIMAL_INTEGER) {
					{
					this.state = 1057;
					this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
					}
				}

				this.state = 1060;
				this.match(CypherParser.DOTDOT);
				this.state = 1062;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.UNSIGNED_DECIMAL_INTEGER) {
					{
					this.state = 1061;
					this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
					}
				}

				}
				break;

			case 2:
				{
				this.state = 1064;
				this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelExpression(): LabelExpressionContext {
		let _localctx: LabelExpressionContext = new LabelExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 126, CypherParser.RULE_labelExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1067;
			this.match(CypherParser.COLON);
			this.state = 1068;
			this.labelExpressionName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelExpressionName(): LabelExpressionNameContext {
		let _localctx: LabelExpressionNameContext = new LabelExpressionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 128, CypherParser.RULE_labelExpressionName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1072;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 91, this._ctx) ) {
			case 1:
				{
				this.state = 1070;
				this.labelExpression4ExpectingBar();
				}
				break;

			case 2:
				{
				this.state = 1071;
				this.labelExpression4();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelExpression4(): LabelExpression4Context {
		let _localctx: LabelExpression4Context = new LabelExpression4Context(this._ctx, this.state);
		this.enterRule(_localctx, 130, CypherParser.RULE_labelExpression4);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1074;
			this.labelExpression3();
			this.state = 1083;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 93, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1075;
					this.match(CypherParser.BAR);
					this.state = 1079;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.COLON:
						{
						this.state = 1076;
						this.match(CypherParser.COLON);
						this.state = 1077;
						this.labelExpression3();
						}
						break;
					case CypherParser.ACCESS:
					case CypherParser.ACTIVE:
					case CypherParser.ADMIN:
					case CypherParser.ADMINISTRATOR:
					case CypherParser.ALIAS:
					case CypherParser.ALIASES:
					case CypherParser.ALL_SHORTEST_PATH:
					case CypherParser.ALL:
					case CypherParser.ALTER:
					case CypherParser.AND:
					case CypherParser.ANY:
					case CypherParser.AS:
					case CypherParser.ASC:
					case CypherParser.ASSERT:
					case CypherParser.ASSIGN:
					case CypherParser.AT:
					case CypherParser.BOOSTED:
					case CypherParser.BREAK:
					case CypherParser.BRIEF:
					case CypherParser.BTREE:
					case CypherParser.BUILT:
					case CypherParser.BY:
					case CypherParser.CALL:
					case CypherParser.CASE:
					case CypherParser.CHANGE:
					case CypherParser.COMMAND:
					case CypherParser.COMMANDS:
					case CypherParser.COMMIT:
					case CypherParser.COMPOSITE:
					case CypherParser.CONSTRAINT:
					case CypherParser.CONSTRAINTS:
					case CypherParser.CONTAINS:
					case CypherParser.COPY:
					case CypherParser.CONTINUE:
					case CypherParser.COUNT:
					case CypherParser.CREATE:
					case CypherParser.CSV:
					case CypherParser.CURRENT:
					case CypherParser.DATA:
					case CypherParser.DATABASE:
					case CypherParser.DATABASES:
					case CypherParser.DBMS:
					case CypherParser.DEALLOCATE:
					case CypherParser.DEFAULT_TOKEN:
					case CypherParser.DEFINED:
					case CypherParser.DELETE:
					case CypherParser.DENY:
					case CypherParser.DESC:
					case CypherParser.DESTROY:
					case CypherParser.DETACH:
					case CypherParser.DISTINCT:
					case CypherParser.DRIVER:
					case CypherParser.DROP:
					case CypherParser.DRYRUN:
					case CypherParser.DUMP:
					case CypherParser.EACH:
					case CypherParser.ENABLE:
					case CypherParser.ELEMENT:
					case CypherParser.ELEMENTS:
					case CypherParser.ELSE:
					case CypherParser.ENCRYPTED:
					case CypherParser.END:
					case CypherParser.ENDS:
					case CypherParser.EXECUTABLE:
					case CypherParser.EXECUTE:
					case CypherParser.EXIST:
					case CypherParser.EXISTENCE:
					case CypherParser.EXISTS:
					case CypherParser.ERROR:
					case CypherParser.FAIL:
					case CypherParser.FALSE:
					case CypherParser.FIELDTERMINATOR:
					case CypherParser.FOR:
					case CypherParser.FOREACH:
					case CypherParser.FROM:
					case CypherParser.FULLTEXT:
					case CypherParser.FUNCTION:
					case CypherParser.FUNCTIONS:
					case CypherParser.GRANT:
					case CypherParser.GRAPH:
					case CypherParser.GRAPHS:
					case CypherParser.HEADERS:
					case CypherParser.HOME:
					case CypherParser.IF:
					case CypherParser.IMMUTABLE:
					case CypherParser.IN:
					case CypherParser.INDEX:
					case CypherParser.INDEXES:
					case CypherParser.INF:
					case CypherParser.INFINITY:
					case CypherParser.IS:
					case CypherParser.JOIN:
					case CypherParser.KEY:
					case CypherParser.LABEL:
					case CypherParser.LABELS:
					case CypherParser.EXCLAMATION_MARK:
					case CypherParser.LIMITROWS:
					case CypherParser.LOAD:
					case CypherParser.LOOKUP:
					case CypherParser.LPAREN:
					case CypherParser.MANAGEMENT:
					case CypherParser.MATCH:
					case CypherParser.MERGE:
					case CypherParser.PERCENT:
					case CypherParser.NAME:
					case CypherParser.NAMES:
					case CypherParser.NAN:
					case CypherParser.NEW:
					case CypherParser.NODE:
					case CypherParser.NODES:
					case CypherParser.NONE:
					case CypherParser.NOT:
					case CypherParser.NOWAIT:
					case CypherParser.NULL:
					case CypherParser.OF:
					case CypherParser.ON:
					case CypherParser.ONLY:
					case CypherParser.OPTIONAL:
					case CypherParser.OPTIONS:
					case CypherParser.OPTION:
					case CypherParser.OR:
					case CypherParser.ORDER:
					case CypherParser.OUTPUT:
					case CypherParser.PASSWORD:
					case CypherParser.PASSWORDS:
					case CypherParser.PERIODIC:
					case CypherParser.PLAINTEXT:
					case CypherParser.POINT:
					case CypherParser.POPULATED:
					case CypherParser.PRIMARY:
					case CypherParser.PRIMARIES:
					case CypherParser.PRIVILEGE:
					case CypherParser.PRIVILEGES:
					case CypherParser.PROCEDURE:
					case CypherParser.PROCEDURES:
					case CypherParser.PROPERTIES:
					case CypherParser.PROPERTY:
					case CypherParser.RANGE:
					case CypherParser.READ:
					case CypherParser.REALLOCATE:
					case CypherParser.REDUCE:
					case CypherParser.RENAME:
					case CypherParser.REL:
					case CypherParser.RELATIONSHIP:
					case CypherParser.RELATIONSHIPS:
					case CypherParser.REMOVE:
					case CypherParser.REPLACE:
					case CypherParser.REPORT:
					case CypherParser.REQUIRE:
					case CypherParser.REQUIRED:
					case CypherParser.RETURN:
					case CypherParser.REVOKE:
					case CypherParser.ROLE:
					case CypherParser.ROLES:
					case CypherParser.ROW:
					case CypherParser.ROWS:
					case CypherParser.SCAN:
					case CypherParser.SEC:
					case CypherParser.SECOND:
					case CypherParser.SECONDARY:
					case CypherParser.SECONDARIES:
					case CypherParser.SECONDS:
					case CypherParser.SEEK:
					case CypherParser.SERVER:
					case CypherParser.SERVERS:
					case CypherParser.SET:
					case CypherParser.SETTING:
					case CypherParser.SETTINGS:
					case CypherParser.SHORTEST_PATH:
					case CypherParser.SHOW:
					case CypherParser.SINGLE:
					case CypherParser.SKIPROWS:
					case CypherParser.START:
					case CypherParser.STARTS:
					case CypherParser.STATUS:
					case CypherParser.STOP:
					case CypherParser.SUSPENDED:
					case CypherParser.TARGET:
					case CypherParser.TERMINATE:
					case CypherParser.TEXT:
					case CypherParser.THEN:
					case CypherParser.TO:
					case CypherParser.TOPOLOGY:
					case CypherParser.TRANSACTION:
					case CypherParser.TRANSACTIONS:
					case CypherParser.TRAVERSE:
					case CypherParser.TRUE:
					case CypherParser.TYPE:
					case CypherParser.TYPES:
					case CypherParser.UNION:
					case CypherParser.UNIQUE:
					case CypherParser.UNIQUENESS:
					case CypherParser.UNWIND:
					case CypherParser.USE:
					case CypherParser.USER:
					case CypherParser.USERS:
					case CypherParser.USING:
					case CypherParser.VERBOSE:
					case CypherParser.WAIT:
					case CypherParser.WHEN:
					case CypherParser.WHERE:
					case CypherParser.WITH:
					case CypherParser.WRITE:
					case CypherParser.XOR:
					case CypherParser.YIELD:
					case CypherParser.IDENTIFIER:
					case CypherParser.ESCAPED_SYMBOLIC_NAME:
						{
						this.state = 1078;
						this.labelExpression3();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 1085;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 93, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelExpression4ExpectingBar(): LabelExpression4ExpectingBarContext {
		let _localctx: LabelExpression4ExpectingBarContext = new LabelExpression4ExpectingBarContext(this._ctx, this.state);
		this.enterRule(_localctx, 132, CypherParser.RULE_labelExpression4ExpectingBar);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1086;
			this.labelExpression3();
			this.state = 1095;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 95, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1087;
					this.match(CypherParser.BAR);
					this.state = 1091;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.COLON:
						{
						this.state = 1088;
						this.match(CypherParser.COLON);
						this.state = 1089;
						this.labelExpression3();
						}
						break;
					case CypherParser.ACCESS:
					case CypherParser.ACTIVE:
					case CypherParser.ADMIN:
					case CypherParser.ADMINISTRATOR:
					case CypherParser.ALIAS:
					case CypherParser.ALIASES:
					case CypherParser.ALL_SHORTEST_PATH:
					case CypherParser.ALL:
					case CypherParser.ALTER:
					case CypherParser.AND:
					case CypherParser.ANY:
					case CypherParser.AS:
					case CypherParser.ASC:
					case CypherParser.ASSERT:
					case CypherParser.ASSIGN:
					case CypherParser.AT:
					case CypherParser.BOOSTED:
					case CypherParser.BREAK:
					case CypherParser.BRIEF:
					case CypherParser.BTREE:
					case CypherParser.BUILT:
					case CypherParser.BY:
					case CypherParser.CALL:
					case CypherParser.CASE:
					case CypherParser.CHANGE:
					case CypherParser.COMMAND:
					case CypherParser.COMMANDS:
					case CypherParser.COMMIT:
					case CypherParser.COMPOSITE:
					case CypherParser.CONSTRAINT:
					case CypherParser.CONSTRAINTS:
					case CypherParser.CONTAINS:
					case CypherParser.COPY:
					case CypherParser.CONTINUE:
					case CypherParser.COUNT:
					case CypherParser.CREATE:
					case CypherParser.CSV:
					case CypherParser.CURRENT:
					case CypherParser.DATA:
					case CypherParser.DATABASE:
					case CypherParser.DATABASES:
					case CypherParser.DBMS:
					case CypherParser.DEALLOCATE:
					case CypherParser.DEFAULT_TOKEN:
					case CypherParser.DEFINED:
					case CypherParser.DELETE:
					case CypherParser.DENY:
					case CypherParser.DESC:
					case CypherParser.DESTROY:
					case CypherParser.DETACH:
					case CypherParser.DISTINCT:
					case CypherParser.DRIVER:
					case CypherParser.DROP:
					case CypherParser.DRYRUN:
					case CypherParser.DUMP:
					case CypherParser.EACH:
					case CypherParser.ENABLE:
					case CypherParser.ELEMENT:
					case CypherParser.ELEMENTS:
					case CypherParser.ELSE:
					case CypherParser.ENCRYPTED:
					case CypherParser.END:
					case CypherParser.ENDS:
					case CypherParser.EXECUTABLE:
					case CypherParser.EXECUTE:
					case CypherParser.EXIST:
					case CypherParser.EXISTENCE:
					case CypherParser.EXISTS:
					case CypherParser.ERROR:
					case CypherParser.FAIL:
					case CypherParser.FALSE:
					case CypherParser.FIELDTERMINATOR:
					case CypherParser.FOR:
					case CypherParser.FOREACH:
					case CypherParser.FROM:
					case CypherParser.FULLTEXT:
					case CypherParser.FUNCTION:
					case CypherParser.FUNCTIONS:
					case CypherParser.GRANT:
					case CypherParser.GRAPH:
					case CypherParser.GRAPHS:
					case CypherParser.HEADERS:
					case CypherParser.HOME:
					case CypherParser.IF:
					case CypherParser.IMMUTABLE:
					case CypherParser.IN:
					case CypherParser.INDEX:
					case CypherParser.INDEXES:
					case CypherParser.INF:
					case CypherParser.INFINITY:
					case CypherParser.IS:
					case CypherParser.JOIN:
					case CypherParser.KEY:
					case CypherParser.LABEL:
					case CypherParser.LABELS:
					case CypherParser.EXCLAMATION_MARK:
					case CypherParser.LIMITROWS:
					case CypherParser.LOAD:
					case CypherParser.LOOKUP:
					case CypherParser.LPAREN:
					case CypherParser.MANAGEMENT:
					case CypherParser.MATCH:
					case CypherParser.MERGE:
					case CypherParser.PERCENT:
					case CypherParser.NAME:
					case CypherParser.NAMES:
					case CypherParser.NAN:
					case CypherParser.NEW:
					case CypherParser.NODE:
					case CypherParser.NODES:
					case CypherParser.NONE:
					case CypherParser.NOT:
					case CypherParser.NOWAIT:
					case CypherParser.NULL:
					case CypherParser.OF:
					case CypherParser.ON:
					case CypherParser.ONLY:
					case CypherParser.OPTIONAL:
					case CypherParser.OPTIONS:
					case CypherParser.OPTION:
					case CypherParser.OR:
					case CypherParser.ORDER:
					case CypherParser.OUTPUT:
					case CypherParser.PASSWORD:
					case CypherParser.PASSWORDS:
					case CypherParser.PERIODIC:
					case CypherParser.PLAINTEXT:
					case CypherParser.POINT:
					case CypherParser.POPULATED:
					case CypherParser.PRIMARY:
					case CypherParser.PRIMARIES:
					case CypherParser.PRIVILEGE:
					case CypherParser.PRIVILEGES:
					case CypherParser.PROCEDURE:
					case CypherParser.PROCEDURES:
					case CypherParser.PROPERTIES:
					case CypherParser.PROPERTY:
					case CypherParser.RANGE:
					case CypherParser.READ:
					case CypherParser.REALLOCATE:
					case CypherParser.REDUCE:
					case CypherParser.RENAME:
					case CypherParser.REL:
					case CypherParser.RELATIONSHIP:
					case CypherParser.RELATIONSHIPS:
					case CypherParser.REMOVE:
					case CypherParser.REPLACE:
					case CypherParser.REPORT:
					case CypherParser.REQUIRE:
					case CypherParser.REQUIRED:
					case CypherParser.RETURN:
					case CypherParser.REVOKE:
					case CypherParser.ROLE:
					case CypherParser.ROLES:
					case CypherParser.ROW:
					case CypherParser.ROWS:
					case CypherParser.SCAN:
					case CypherParser.SEC:
					case CypherParser.SECOND:
					case CypherParser.SECONDARY:
					case CypherParser.SECONDARIES:
					case CypherParser.SECONDS:
					case CypherParser.SEEK:
					case CypherParser.SERVER:
					case CypherParser.SERVERS:
					case CypherParser.SET:
					case CypherParser.SETTING:
					case CypherParser.SETTINGS:
					case CypherParser.SHORTEST_PATH:
					case CypherParser.SHOW:
					case CypherParser.SINGLE:
					case CypherParser.SKIPROWS:
					case CypherParser.START:
					case CypherParser.STARTS:
					case CypherParser.STATUS:
					case CypherParser.STOP:
					case CypherParser.SUSPENDED:
					case CypherParser.TARGET:
					case CypherParser.TERMINATE:
					case CypherParser.TEXT:
					case CypherParser.THEN:
					case CypherParser.TO:
					case CypherParser.TOPOLOGY:
					case CypherParser.TRANSACTION:
					case CypherParser.TRANSACTIONS:
					case CypherParser.TRAVERSE:
					case CypherParser.TRUE:
					case CypherParser.TYPE:
					case CypherParser.TYPES:
					case CypherParser.UNION:
					case CypherParser.UNIQUE:
					case CypherParser.UNIQUENESS:
					case CypherParser.UNWIND:
					case CypherParser.USE:
					case CypherParser.USER:
					case CypherParser.USERS:
					case CypherParser.USING:
					case CypherParser.VERBOSE:
					case CypherParser.WAIT:
					case CypherParser.WHEN:
					case CypherParser.WHERE:
					case CypherParser.WITH:
					case CypherParser.WRITE:
					case CypherParser.XOR:
					case CypherParser.YIELD:
					case CypherParser.IDENTIFIER:
					case CypherParser.ESCAPED_SYMBOLIC_NAME:
						{
						this.state = 1090;
						this.labelExpression3();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 1097;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 95, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelExpression3(): LabelExpression3Context {
		let _localctx: LabelExpression3Context = new LabelExpression3Context(this._ctx, this.state);
		this.enterRule(_localctx, 134, CypherParser.RULE_labelExpression3);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1098;
			this.labelExpression2();
			this.state = 1105;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 97, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					this.state = 1103;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.AMPERSAND:
						{
						this.state = 1099;
						this.match(CypherParser.AMPERSAND);
						this.state = 1100;
						this.labelExpression2();
						}
						break;
					case CypherParser.COLON:
						{
						this.state = 1101;
						this.match(CypherParser.COLON);
						this.state = 1102;
						this.labelExpression2();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}
				this.state = 1107;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 97, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelExpression2(): LabelExpression2Context {
		let _localctx: LabelExpression2Context = new LabelExpression2Context(this._ctx, this.state);
		this.enterRule(_localctx, 136, CypherParser.RULE_labelExpression2);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1111;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.EXCLAMATION_MARK:
				{
				this.state = 1108;
				this.match(CypherParser.EXCLAMATION_MARK);
				this.state = 1109;
				this.labelExpression2();
				}
				break;
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.LPAREN:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.PERCENT:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 1110;
				this.labelExpression1();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelExpression1(): LabelExpression1Context {
		let _localctx: LabelExpression1Context = new LabelExpression1Context(this._ctx, this.state);
		this.enterRule(_localctx, 138, CypherParser.RULE_labelExpression1);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1119;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.LPAREN:
				{
				this.state = 1113;
				this.match(CypherParser.LPAREN);
				this.state = 1114;
				this.labelExpression4();
				this.state = 1115;
				this.match(CypherParser.RPAREN);
				}
				break;
			case CypherParser.PERCENT:
				{
				this.state = 1117;
				this.match(CypherParser.PERCENT);
				}
				break;
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 1118;
				this.symbolicNameString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression(): ExpressionContext {
		let _localctx: ExpressionContext = new ExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 140, CypherParser.RULE_expression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1121;
			this.expression12();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression12(): Expression12Context {
		let _localctx: Expression12Context = new Expression12Context(this._ctx, this.state);
		this.enterRule(_localctx, 142, CypherParser.RULE_expression12);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1123;
			this.expression11();
			this.state = 1128;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.OR) {
				{
				{
				this.state = 1124;
				this.match(CypherParser.OR);
				this.state = 1125;
				this.expression11();
				}
				}
				this.state = 1130;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression11(): Expression11Context {
		let _localctx: Expression11Context = new Expression11Context(this._ctx, this.state);
		this.enterRule(_localctx, 144, CypherParser.RULE_expression11);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1131;
			this.expression10();
			this.state = 1136;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.XOR) {
				{
				{
				this.state = 1132;
				this.match(CypherParser.XOR);
				this.state = 1133;
				this.expression10();
				}
				}
				this.state = 1138;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression10(): Expression10Context {
		let _localctx: Expression10Context = new Expression10Context(this._ctx, this.state);
		this.enterRule(_localctx, 146, CypherParser.RULE_expression10);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1139;
			this.expression9();
			this.state = 1144;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.AND) {
				{
				{
				this.state = 1140;
				this.match(CypherParser.AND);
				this.state = 1141;
				this.expression9();
				}
				}
				this.state = 1146;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression9(): Expression9Context {
		let _localctx: Expression9Context = new Expression9Context(this._ctx, this.state);
		this.enterRule(_localctx, 148, CypherParser.RULE_expression9);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1150;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 103, this._ctx) ) {
			case 1:
				{
				this.state = 1147;
				this.match(CypherParser.NOT);
				this.state = 1148;
				this.expression9();
				}
				break;

			case 2:
				{
				this.state = 1149;
				this.expression8();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression8(): Expression8Context {
		let _localctx: Expression8Context = new Expression8Context(this._ctx, this.state);
		this.enterRule(_localctx, 150, CypherParser.RULE_expression8);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1152;
			this.expression7();
			this.state = 1169;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (((((_la - 77)) & ~0x1F) === 0 && ((1 << (_la - 77)) & ((1 << (CypherParser.EQ - 77)) | (1 << (CypherParser.GE - 77)) | (1 << (CypherParser.GT - 77)))) !== 0) || ((((_la - 117)) & ~0x1F) === 0 && ((1 << (_la - 117)) & ((1 << (CypherParser.LE - 117)) | (1 << (CypherParser.LT - 117)) | (1 << (CypherParser.NEQ - 117)) | (1 << (CypherParser.NEQ2 - 117)))) !== 0)) {
				{
				this.state = 1167;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.EQ:
					{
					this.state = 1153;
					this.match(CypherParser.EQ);
					this.state = 1154;
					this.expression7();
					}
					break;
				case CypherParser.NEQ:
					{
					this.state = 1155;
					this.match(CypherParser.NEQ);
					this.state = 1156;
					this.expression7();
					}
					break;
				case CypherParser.NEQ2:
					{
					this.state = 1157;
					this.match(CypherParser.NEQ2);
					this.state = 1158;
					this.expression7();
					}
					break;
				case CypherParser.LE:
					{
					this.state = 1159;
					this.match(CypherParser.LE);
					this.state = 1160;
					this.expression7();
					}
					break;
				case CypherParser.GE:
					{
					this.state = 1161;
					this.match(CypherParser.GE);
					this.state = 1162;
					this.expression7();
					}
					break;
				case CypherParser.LT:
					{
					this.state = 1163;
					this.match(CypherParser.LT);
					this.state = 1164;
					this.expression7();
					}
					break;
				case CypherParser.GT:
					{
					this.state = 1165;
					this.match(CypherParser.GT);
					this.state = 1166;
					this.expression7();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 1171;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression7(): Expression7Context {
		let _localctx: Expression7Context = new Expression7Context(this._ctx, this.state);
		this.enterRule(_localctx, 152, CypherParser.RULE_expression7);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1172;
			this.expression6();
			this.state = 1174;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.CONTAINS || _la === CypherParser.ENDS || _la === CypherParser.IN || _la === CypherParser.IS || _la === CypherParser.REGEQ || _la === CypherParser.STARTS) {
				{
				this.state = 1173;
				this.comparisonExpression6();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public comparisonExpression6(): ComparisonExpression6Context {
		let _localctx: ComparisonExpression6Context = new ComparisonExpression6Context(this._ctx, this.state);
		this.enterRule(_localctx, 154, CypherParser.RULE_comparisonExpression6);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1194;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.REGEQ:
				{
				this.state = 1176;
				this.match(CypherParser.REGEQ);
				this.state = 1177;
				this.expression6();
				}
				break;
			case CypherParser.STARTS:
				{
				this.state = 1178;
				this.match(CypherParser.STARTS);
				this.state = 1179;
				this.match(CypherParser.WITH);
				this.state = 1180;
				this.expression6();
				}
				break;
			case CypherParser.ENDS:
				{
				this.state = 1181;
				this.match(CypherParser.ENDS);
				this.state = 1182;
				this.match(CypherParser.WITH);
				this.state = 1183;
				this.expression6();
				}
				break;
			case CypherParser.CONTAINS:
				{
				this.state = 1184;
				this.match(CypherParser.CONTAINS);
				this.state = 1185;
				this.expression6();
				}
				break;
			case CypherParser.IN:
				{
				this.state = 1186;
				this.match(CypherParser.IN);
				this.state = 1187;
				this.expression6();
				}
				break;
			case CypherParser.IS:
				{
				this.state = 1188;
				this.match(CypherParser.IS);
				this.state = 1192;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.NULL:
					{
					this.state = 1189;
					this.match(CypherParser.NULL);
					}
					break;
				case CypherParser.NOT:
					{
					this.state = 1190;
					this.match(CypherParser.NOT);
					this.state = 1191;
					this.match(CypherParser.NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression6(): Expression6Context {
		let _localctx: Expression6Context = new Expression6Context(this._ctx, this.state);
		this.enterRule(_localctx, 156, CypherParser.RULE_expression6);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1196;
			this.expression5();
			this.state = 1203;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.MINUS || _la === CypherParser.PLUS) {
				{
				this.state = 1201;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.PLUS:
					{
					this.state = 1197;
					this.match(CypherParser.PLUS);
					this.state = 1198;
					this.expression5();
					}
					break;
				case CypherParser.MINUS:
					{
					this.state = 1199;
					this.match(CypherParser.MINUS);
					this.state = 1200;
					this.expression5();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 1205;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression5(): Expression5Context {
		let _localctx: Expression5Context = new Expression5Context(this._ctx, this.state);
		this.enterRule(_localctx, 158, CypherParser.RULE_expression5);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1206;
			this.expression4();
			this.state = 1215;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.DIVIDE || _la === CypherParser.PERCENT || _la === CypherParser.TIMES) {
				{
				this.state = 1213;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TIMES:
					{
					this.state = 1207;
					this.match(CypherParser.TIMES);
					this.state = 1208;
					this.expression4();
					}
					break;
				case CypherParser.DIVIDE:
					{
					this.state = 1209;
					this.match(CypherParser.DIVIDE);
					this.state = 1210;
					this.expression4();
					}
					break;
				case CypherParser.PERCENT:
					{
					this.state = 1211;
					this.match(CypherParser.PERCENT);
					this.state = 1212;
					this.expression4();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 1217;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression4(): Expression4Context {
		let _localctx: Expression4Context = new Expression4Context(this._ctx, this.state);
		this.enterRule(_localctx, 160, CypherParser.RULE_expression4);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1218;
			this.expression3();
			this.state = 1223;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.POW) {
				{
				{
				this.state = 1219;
				this.match(CypherParser.POW);
				this.state = 1220;
				this.expression3();
				}
				}
				this.state = 1225;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression3(): Expression3Context {
		let _localctx: Expression3Context = new Expression3Context(this._ctx, this.state);
		this.enterRule(_localctx, 162, CypherParser.RULE_expression3);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1231;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 114, this._ctx) ) {
			case 1:
				{
				this.state = 1226;
				this.expression2();
				}
				break;

			case 2:
				{
				this.state = 1227;
				this.match(CypherParser.PLUS);
				this.state = 1228;
				this.expression2();
				}
				break;

			case 3:
				{
				this.state = 1229;
				this.match(CypherParser.MINUS);
				this.state = 1230;
				this.expression2();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression2(): Expression2Context {
		let _localctx: Expression2Context = new Expression2Context(this._ctx, this.state);
		this.enterRule(_localctx, 164, CypherParser.RULE_expression2);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1233;
			this.expression1();
			this.state = 1237;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COLON || _la === CypherParser.DOT || _la === CypherParser.LBRACKET) {
				{
				{
				this.state = 1234;
				this.postFix1();
				}
				}
				this.state = 1239;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public postFix1(): PostFix1Context {
		let _localctx: PostFix1Context = new PostFix1Context(this._ctx, this.state);
		this.enterRule(_localctx, 166, CypherParser.RULE_postFix1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1255;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 118, this._ctx) ) {
			case 1:
				{
				this.state = 1240;
				this.property();
				}
				break;

			case 2:
				{
				this.state = 1241;
				this.labelExpressionPredicate();
				}
				break;

			case 3:
				{
				this.state = 1242;
				this.match(CypherParser.LBRACKET);
				this.state = 1243;
				this.expression();
				this.state = 1244;
				this.match(CypherParser.RBRACKET);
				}
				break;

			case 4:
				{
				this.state = 1246;
				this.match(CypherParser.LBRACKET);
				this.state = 1248;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.DECIMAL_DOUBLE) | (1 << CypherParser.UNSIGNED_DECIMAL_INTEGER) | (1 << CypherParser.UNSIGNED_HEX_INTEGER) | (1 << CypherParser.UNSIGNED_OCTAL_INTEGER) | (1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DOLLAR - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LBRACKET - 98)) | (1 << (CypherParser.LCURLY - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.LPAREN - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)) | (1 << (CypherParser.MINUS - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.PLUS - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.STRING_LITERAL1 - 226)) | (1 << (CypherParser.STRING_LITERAL2 - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
					{
					this.state = 1247;
					this.expression();
					}
				}

				this.state = 1250;
				this.match(CypherParser.DOTDOT);
				this.state = 1252;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.DECIMAL_DOUBLE) | (1 << CypherParser.UNSIGNED_DECIMAL_INTEGER) | (1 << CypherParser.UNSIGNED_HEX_INTEGER) | (1 << CypherParser.UNSIGNED_OCTAL_INTEGER) | (1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DOLLAR - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LBRACKET - 98)) | (1 << (CypherParser.LCURLY - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.LPAREN - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)) | (1 << (CypherParser.MINUS - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.PLUS - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.STRING_LITERAL1 - 226)) | (1 << (CypherParser.STRING_LITERAL2 - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
					{
					this.state = 1251;
					this.expression();
					}
				}

				this.state = 1254;
				this.match(CypherParser.RBRACKET);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public property(): PropertyContext {
		let _localctx: PropertyContext = new PropertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 168, CypherParser.RULE_property);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1257;
			this.match(CypherParser.DOT);
			this.state = 1258;
			this.propertyKeyName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public propertyExpression(): PropertyExpressionContext {
		let _localctx: PropertyExpressionContext = new PropertyExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 170, CypherParser.RULE_propertyExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1260;
			this.expression1();
			this.state = 1262;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				{
				this.state = 1261;
				this.property();
				}
				}
				this.state = 1264;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === CypherParser.DOT);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public expression1(): Expression1Context {
		let _localctx: Expression1Context = new Expression1Context(this._ctx, this.state);
		this.enterRule(_localctx, 172, CypherParser.RULE_expression1);
		try {
			this.state = 1291;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 120, this._ctx) ) {
			case 1:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1266;
				this.literal();
				}
				break;

			case 2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1267;
				this.parameter();
				}
				break;

			case 3:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1268;
				this.caseExpression();
				}
				break;

			case 4:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1269;
				this.match(CypherParser.COUNT);
				this.state = 1270;
				this.match(CypherParser.LPAREN);
				this.state = 1271;
				this.match(CypherParser.TIMES);
				this.state = 1272;
				this.match(CypherParser.RPAREN);
				}
				break;

			case 5:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1273;
				this.existsExpression();
				}
				break;

			case 6:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1274;
				this.countExpression();
				}
				break;

			case 7:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1275;
				this.mapProjection();
				}
				break;

			case 8:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1276;
				this.listComprehension();
				}
				break;

			case 9:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1277;
				this.patternComprehension();
				}
				break;

			case 10:
				this.enterOuterAlt(_localctx, 10);
				{
				this.state = 1278;
				this.reduceExpression();
				}
				break;

			case 11:
				this.enterOuterAlt(_localctx, 11);
				{
				this.state = 1279;
				this.allExpression();
				}
				break;

			case 12:
				this.enterOuterAlt(_localctx, 12);
				{
				this.state = 1280;
				this.anyExpression();
				}
				break;

			case 13:
				this.enterOuterAlt(_localctx, 13);
				{
				this.state = 1281;
				this.noneExpression();
				}
				break;

			case 14:
				this.enterOuterAlt(_localctx, 14);
				{
				this.state = 1282;
				this.singleExpression();
				}
				break;

			case 15:
				this.enterOuterAlt(_localctx, 15);
				{
				this.state = 1283;
				this.patternExpression();
				}
				break;

			case 16:
				this.enterOuterAlt(_localctx, 16);
				{
				this.state = 1284;
				this.shortestPathExpression();
				}
				break;

			case 17:
				this.enterOuterAlt(_localctx, 17);
				{
				this.state = 1285;
				this.match(CypherParser.LPAREN);
				this.state = 1286;
				this.expression();
				this.state = 1287;
				this.match(CypherParser.RPAREN);
				}
				break;

			case 18:
				this.enterOuterAlt(_localctx, 18);
				{
				this.state = 1289;
				this.functionInvocation();
				}
				break;

			case 19:
				this.enterOuterAlt(_localctx, 19);
				{
				this.state = 1290;
				this.variable();
				}
				break;
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public literal(): LiteralContext {
		let _localctx: LiteralContext = new LiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 174, CypherParser.RULE_literal);
		let _la: number;
		try {
			this.state = 1302;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DECIMAL_DOUBLE:
			case CypherParser.UNSIGNED_DECIMAL_INTEGER:
			case CypherParser.UNSIGNED_HEX_INTEGER:
			case CypherParser.UNSIGNED_OCTAL_INTEGER:
			case CypherParser.MINUS:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 1293;
				this.numberLiteral();
				}
				break;
			case CypherParser.STRING_LITERAL1:
			case CypherParser.STRING_LITERAL2:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 1294;
				this.stringLiteral();
				}
				break;
			case CypherParser.LCURLY:
				this.enterOuterAlt(_localctx, 3);
				{
				this.state = 1295;
				this.mapLiteral();
				}
				break;
			case CypherParser.LBRACKET:
				this.enterOuterAlt(_localctx, 4);
				{
				this.state = 1296;
				this.listLiteral();
				}
				break;
			case CypherParser.TRUE:
				this.enterOuterAlt(_localctx, 5);
				{
				this.state = 1297;
				this.match(CypherParser.TRUE);
				}
				break;
			case CypherParser.FALSE:
				this.enterOuterAlt(_localctx, 6);
				{
				this.state = 1298;
				this.match(CypherParser.FALSE);
				}
				break;
			case CypherParser.INF:
			case CypherParser.INFINITY:
				this.enterOuterAlt(_localctx, 7);
				{
				this.state = 1299;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.INF || _la === CypherParser.INFINITY)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case CypherParser.NAN:
				this.enterOuterAlt(_localctx, 8);
				{
				this.state = 1300;
				this.match(CypherParser.NAN);
				}
				break;
			case CypherParser.NULL:
				this.enterOuterAlt(_localctx, 9);
				{
				this.state = 1301;
				this.match(CypherParser.NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public caseExpression(): CaseExpressionContext {
		let _localctx: CaseExpressionContext = new CaseExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 176, CypherParser.RULE_caseExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1304;
			this.match(CypherParser.CASE);
			this.state = 1309;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 122, this._ctx) ) {
			case 1:
				{
				this.state = 1305;
				this.expression();
				this.state = 1306;
				this.match(CypherParser.WHEN);
				}
				break;

			case 2:
				{
				this.state = 1308;
				this.match(CypherParser.WHEN);
				}
				break;
			}
			this.state = 1311;
			this.expression();
			this.state = 1312;
			this.match(CypherParser.THEN);
			this.state = 1313;
			this.expression();
			this.state = 1321;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.WHEN) {
				{
				{
				this.state = 1314;
				this.match(CypherParser.WHEN);
				this.state = 1315;
				this.expression();
				this.state = 1316;
				this.match(CypherParser.THEN);
				this.state = 1317;
				this.expression();
				}
				}
				this.state = 1323;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1326;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.ELSE) {
				{
				this.state = 1324;
				this.match(CypherParser.ELSE);
				this.state = 1325;
				this.expression();
				}
			}

			this.state = 1328;
			this.match(CypherParser.END);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public listComprehension(): ListComprehensionContext {
		let _localctx: ListComprehensionContext = new ListComprehensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 178, CypherParser.RULE_listComprehension);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1330;
			this.match(CypherParser.LBRACKET);
			this.state = 1331;
			this.variable();
			this.state = 1332;
			this.match(CypherParser.IN);
			this.state = 1333;
			this.expression();
			this.state = 1336;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 1334;
				this.match(CypherParser.WHERE);
				this.state = 1335;
				this.expression();
				}
			}

			this.state = 1340;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.BAR) {
				{
				this.state = 1338;
				this.match(CypherParser.BAR);
				this.state = 1339;
				this.expression();
				}
			}

			this.state = 1342;
			this.match(CypherParser.RBRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public patternComprehension(): PatternComprehensionContext {
		let _localctx: PatternComprehensionContext = new PatternComprehensionContext(this._ctx, this.state);
		this.enterRule(_localctx, 180, CypherParser.RULE_patternComprehension);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1344;
			this.match(CypherParser.LBRACKET);
			this.state = 1348;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
				{
				this.state = 1345;
				this.variable();
				this.state = 1346;
				this.match(CypherParser.EQ);
				}
			}

			this.state = 1350;
			this.everyPathPatternNonEmpty();
			this.state = 1353;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 1351;
				this.match(CypherParser.WHERE);
				this.state = 1352;
				this.expression();
				}
			}

			this.state = 1355;
			this.match(CypherParser.BAR);
			this.state = 1356;
			this.expression();
			this.state = 1357;
			this.match(CypherParser.RBRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public patternComprehensionPrefix(): PatternComprehensionPrefixContext {
		let _localctx: PatternComprehensionPrefixContext = new PatternComprehensionPrefixContext(this._ctx, this.state);
		this.enterRule(_localctx, 182, CypherParser.RULE_patternComprehensionPrefix);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1359;
			this.match(CypherParser.LBRACKET);
			this.state = 1363;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
				{
				this.state = 1360;
				this.variable();
				this.state = 1361;
				this.match(CypherParser.EQ);
				}
			}

			this.state = 1365;
			this.everyPathPattern();
			this.state = 1366;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.BAR || _la === CypherParser.WHERE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reduceExpression(): ReduceExpressionContext {
		let _localctx: ReduceExpressionContext = new ReduceExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 184, CypherParser.RULE_reduceExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1368;
			this.match(CypherParser.REDUCE);
			this.state = 1369;
			this.match(CypherParser.LPAREN);
			this.state = 1370;
			this.variable();
			this.state = 1371;
			this.match(CypherParser.EQ);
			this.state = 1372;
			this.expression();
			this.state = 1373;
			this.match(CypherParser.COMMA);
			this.state = 1374;
			this.variable();
			this.state = 1375;
			this.match(CypherParser.IN);
			this.state = 1376;
			this.expression();
			this.state = 1377;
			this.match(CypherParser.BAR);
			this.state = 1378;
			this.expression();
			this.state = 1379;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public allExpression(): AllExpressionContext {
		let _localctx: AllExpressionContext = new AllExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 186, CypherParser.RULE_allExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1381;
			this.match(CypherParser.ALL);
			this.state = 1382;
			this.match(CypherParser.LPAREN);
			this.state = 1383;
			this.variable();
			this.state = 1384;
			this.match(CypherParser.IN);
			this.state = 1385;
			this.expression();
			this.state = 1388;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 1386;
				this.match(CypherParser.WHERE);
				this.state = 1387;
				this.expression();
				}
			}

			this.state = 1390;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public anyExpression(): AnyExpressionContext {
		let _localctx: AnyExpressionContext = new AnyExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 188, CypherParser.RULE_anyExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1392;
			this.match(CypherParser.ANY);
			this.state = 1393;
			this.match(CypherParser.LPAREN);
			this.state = 1394;
			this.variable();
			this.state = 1395;
			this.match(CypherParser.IN);
			this.state = 1396;
			this.expression();
			this.state = 1399;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 1397;
				this.match(CypherParser.WHERE);
				this.state = 1398;
				this.expression();
				}
			}

			this.state = 1401;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public noneExpression(): NoneExpressionContext {
		let _localctx: NoneExpressionContext = new NoneExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 190, CypherParser.RULE_noneExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1403;
			this.match(CypherParser.NONE);
			this.state = 1404;
			this.match(CypherParser.LPAREN);
			this.state = 1405;
			this.variable();
			this.state = 1406;
			this.match(CypherParser.IN);
			this.state = 1407;
			this.expression();
			this.state = 1410;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 1408;
				this.match(CypherParser.WHERE);
				this.state = 1409;
				this.expression();
				}
			}

			this.state = 1412;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public singleExpression(): SingleExpressionContext {
		let _localctx: SingleExpressionContext = new SingleExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 192, CypherParser.RULE_singleExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1414;
			this.match(CypherParser.SINGLE);
			this.state = 1415;
			this.match(CypherParser.LPAREN);
			this.state = 1416;
			this.variable();
			this.state = 1417;
			this.match(CypherParser.IN);
			this.state = 1418;
			this.expression();
			this.state = 1421;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 1419;
				this.match(CypherParser.WHERE);
				this.state = 1420;
				this.expression();
				}
			}

			this.state = 1423;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public patternExpression(): PatternExpressionContext {
		let _localctx: PatternExpressionContext = new PatternExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 194, CypherParser.RULE_patternExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1425;
			this.everyPathPatternNonEmpty();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public shortestPathExpression(): ShortestPathExpressionContext {
		let _localctx: ShortestPathExpressionContext = new ShortestPathExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 196, CypherParser.RULE_shortestPathExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1427;
			this.shortestPathPattern();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mapProjection(): MapProjectionContext {
		let _localctx: MapProjectionContext = new MapProjectionContext(this._ctx, this.state);
		this.enterRule(_localctx, 198, CypherParser.RULE_mapProjection);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1429;
			this.variable();
			this.state = 1430;
			this.match(CypherParser.LCURLY);
			this.state = 1432;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DISTINCT - 32)) | (1 << (CypherParser.DOT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
				{
				this.state = 1431;
				this.mapProjectionItem();
				}
			}

			this.state = 1438;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 1434;
				this.match(CypherParser.COMMA);
				this.state = 1435;
				this.mapProjectionItem();
				}
				}
				this.state = 1440;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1441;
			this.match(CypherParser.RCURLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mapProjectionItem(): MapProjectionItemContext {
		let _localctx: MapProjectionItemContext = new MapProjectionItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 200, CypherParser.RULE_mapProjectionItem);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1452;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 136, this._ctx) ) {
			case 1:
				{
				this.state = 1443;
				this.propertyKeyName();
				this.state = 1444;
				this.match(CypherParser.COLON);
				this.state = 1445;
				this.expression();
				}
				break;

			case 2:
				{
				this.state = 1447;
				this.match(CypherParser.DOT);
				this.state = 1448;
				this.propertyKeyName();
				}
				break;

			case 3:
				{
				this.state = 1449;
				this.variable();
				}
				break;

			case 4:
				{
				this.state = 1450;
				this.match(CypherParser.DOT);
				this.state = 1451;
				this.match(CypherParser.TIMES);
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public existsExpression(): ExistsExpressionContext {
		let _localctx: ExistsExpressionContext = new ExistsExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 202, CypherParser.RULE_existsExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1454;
			this.match(CypherParser.EXISTS);
			this.state = 1455;
			this.match(CypherParser.LCURLY);
			this.state = 1461;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 138, this._ctx) ) {
			case 1:
				{
				this.state = 1456;
				this.regularQuery();
				}
				break;

			case 2:
				{
				this.state = 1457;
				this.patternList();
				this.state = 1459;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.WHERE) {
					{
					this.state = 1458;
					this.whereClause();
					}
				}

				}
				break;
			}
			this.state = 1463;
			this.match(CypherParser.RCURLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public countExpression(): CountExpressionContext {
		let _localctx: CountExpressionContext = new CountExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 204, CypherParser.RULE_countExpression);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1465;
			this.match(CypherParser.COUNT);
			this.state = 1466;
			this.match(CypherParser.LCURLY);
			this.state = 1472;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 140, this._ctx) ) {
			case 1:
				{
				this.state = 1467;
				this.regularQuery();
				}
				break;

			case 2:
				{
				this.state = 1468;
				this.patternList();
				this.state = 1470;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.WHERE) {
					{
					this.state = 1469;
					this.whereClause();
					}
				}

				}
				break;
			}
			this.state = 1474;
			this.match(CypherParser.RCURLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringLiteral(): StringLiteralContext {
		let _localctx: StringLiteralContext = new StringLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 206, CypherParser.RULE_stringLiteral);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1476;
			this.stringToken();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public numberLiteral(): NumberLiteralContext {
		let _localctx: NumberLiteralContext = new NumberLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 208, CypherParser.RULE_numberLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1479;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.MINUS) {
				{
				this.state = 1478;
				this.match(CypherParser.MINUS);
				}
			}

			this.state = 1481;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.DECIMAL_DOUBLE) | (1 << CypherParser.UNSIGNED_DECIMAL_INTEGER) | (1 << CypherParser.UNSIGNED_HEX_INTEGER) | (1 << CypherParser.UNSIGNED_OCTAL_INTEGER))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public signedIntegerLiteral(): SignedIntegerLiteralContext {
		let _localctx: SignedIntegerLiteralContext = new SignedIntegerLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 210, CypherParser.RULE_signedIntegerLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1484;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.MINUS) {
				{
				this.state = 1483;
				this.match(CypherParser.MINUS);
				}
			}

			this.state = 1486;
			this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public listLiteral(): ListLiteralContext {
		let _localctx: ListLiteralContext = new ListLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 212, CypherParser.RULE_listLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1488;
			this.match(CypherParser.LBRACKET);
			this.state = 1490;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.DECIMAL_DOUBLE) | (1 << CypherParser.UNSIGNED_DECIMAL_INTEGER) | (1 << CypherParser.UNSIGNED_HEX_INTEGER) | (1 << CypherParser.UNSIGNED_OCTAL_INTEGER) | (1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DOLLAR - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LBRACKET - 98)) | (1 << (CypherParser.LCURLY - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.LPAREN - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)) | (1 << (CypherParser.MINUS - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.PLUS - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.STRING_LITERAL1 - 226)) | (1 << (CypherParser.STRING_LITERAL2 - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
				{
				this.state = 1489;
				this.expression();
				}
			}

			this.state = 1496;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 1492;
				this.match(CypherParser.COMMA);
				this.state = 1493;
				this.expression();
				}
				}
				this.state = 1498;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1499;
			this.match(CypherParser.RBRACKET);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mapLiteral(): MapLiteralContext {
		let _localctx: MapLiteralContext = new MapLiteralContext(this._ctx, this.state);
		this.enterRule(_localctx, 214, CypherParser.RULE_mapLiteral);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1501;
			this.match(CypherParser.LCURLY);
			this.state = 1506;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
				{
				this.state = 1502;
				this.propertyKeyName();
				this.state = 1503;
				this.match(CypherParser.COLON);
				this.state = 1504;
				this.expression();
				}
			}

			this.state = 1515;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 1508;
				this.match(CypherParser.COMMA);
				this.state = 1509;
				this.propertyKeyName();
				this.state = 1510;
				this.match(CypherParser.COLON);
				this.state = 1511;
				this.expression();
				}
				}
				this.state = 1517;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1518;
			this.match(CypherParser.RCURLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public propertyKeyName(): PropertyKeyNameContext {
		let _localctx: PropertyKeyNameContext = new PropertyKeyNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 216, CypherParser.RULE_propertyKeyName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1520;
			this.symbolicNameString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public parameter(): ParameterContext {
		let _localctx: ParameterContext = new ParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 218, CypherParser.RULE_parameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1522;
			this.match(CypherParser.DOLLAR);
			this.state = 1525;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 1523;
				this.variable();
				}
				break;
			case CypherParser.UNSIGNED_DECIMAL_INTEGER:
				{
				this.state = 1524;
				this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionInvocation(): FunctionInvocationContext {
		let _localctx: FunctionInvocationContext = new FunctionInvocationContext(this._ctx, this.state);
		this.enterRule(_localctx, 220, CypherParser.RULE_functionInvocation);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1527;
			this.functionName();
			this.state = 1528;
			this.match(CypherParser.LPAREN);
			this.state = 1530;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 148, this._ctx) ) {
			case 1:
				{
				this.state = 1529;
				this.match(CypherParser.DISTINCT);
				}
				break;
			}
			this.state = 1533;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.DECIMAL_DOUBLE) | (1 << CypherParser.UNSIGNED_DECIMAL_INTEGER) | (1 << CypherParser.UNSIGNED_HEX_INTEGER) | (1 << CypherParser.UNSIGNED_OCTAL_INTEGER) | (1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DOLLAR - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LBRACKET - 98)) | (1 << (CypherParser.LCURLY - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.LPAREN - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)) | (1 << (CypherParser.MINUS - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.PLUS - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.STRING_LITERAL1 - 226)) | (1 << (CypherParser.STRING_LITERAL2 - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
				{
				this.state = 1532;
				this.functionArgument();
				}
			}

			this.state = 1539;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 1535;
				this.match(CypherParser.COMMA);
				this.state = 1536;
				this.functionArgument();
				}
				}
				this.state = 1541;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 1542;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionName(): FunctionNameContext {
		let _localctx: FunctionNameContext = new FunctionNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 222, CypherParser.RULE_functionName);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1544;
			this.namespace();
			this.state = 1545;
			this.symbolicNameString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public functionArgument(): FunctionArgumentContext {
		let _localctx: FunctionArgumentContext = new FunctionArgumentContext(this._ctx, this.state);
		this.enterRule(_localctx, 224, CypherParser.RULE_functionArgument);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1547;
			this.expression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public namespace(): NamespaceContext {
		let _localctx: NamespaceContext = new NamespaceContext(this._ctx, this.state);
		this.enterRule(_localctx, 226, CypherParser.RULE_namespace);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1554;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 1549;
					this.symbolicNameString();
					this.state = 1550;
					this.match(CypherParser.DOT);
					}
					}
				}
				this.state = 1556;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 151, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variableList1(): VariableList1Context {
		let _localctx: VariableList1Context = new VariableList1Context(this._ctx, this.state);
		this.enterRule(_localctx, 228, CypherParser.RULE_variableList1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1557;
			this.symbolicNameString();
			this.state = 1562;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 1558;
				this.match(CypherParser.COMMA);
				this.state = 1559;
				this.symbolicNameString();
				}
				}
				this.state = 1564;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public variable(): VariableContext {
		let _localctx: VariableContext = new VariableContext(this._ctx, this.state);
		this.enterRule(_localctx, 230, CypherParser.RULE_variable);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1565;
			this.symbolicNameString();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicNameList1(): SymbolicNameList1Context {
		let _localctx: SymbolicNameList1Context = new SymbolicNameList1Context(this._ctx, this.state);
		this.enterRule(_localctx, 232, CypherParser.RULE_symbolicNameList1);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1567;
			this.symbolicNameString();
			this.state = 1572;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 1568;
				this.match(CypherParser.COMMA);
				this.state = 1569;
				this.symbolicNameString();
				}
				}
				this.state = 1574;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createCommand(): CreateCommandContext {
		let _localctx: CreateCommandContext = new CreateCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 234, CypherParser.RULE_createCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1575;
			this.match(CypherParser.CREATE);
			this.state = 1578;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.OR) {
				{
				this.state = 1576;
				this.match(CypherParser.OR);
				this.state = 1577;
				this.match(CypherParser.REPLACE);
				}
			}

			this.state = 1587;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ROLE:
				{
				this.state = 1580;
				this.createRole();
				}
				break;
			case CypherParser.USER:
				{
				this.state = 1581;
				this.createUser();
				}
				break;
			case CypherParser.DATABASE:
				{
				this.state = 1582;
				this.createDatabase();
				}
				break;
			case CypherParser.CONSTRAINT:
				{
				this.state = 1583;
				this.createConstraint();
				}
				break;
			case CypherParser.BTREE:
			case CypherParser.FULLTEXT:
			case CypherParser.INDEX:
			case CypherParser.LOOKUP:
			case CypherParser.POINT:
			case CypherParser.RANGE:
			case CypherParser.TEXT:
				{
				this.state = 1584;
				this.createIndex();
				}
				break;
			case CypherParser.ALIAS:
				{
				this.state = 1585;
				this.createAlias();
				}
				break;
			case CypherParser.COMPOSITE:
				{
				this.state = 1586;
				this.createCompositeDatabase();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public command(): CommandContext {
		let _localctx: CommandContext = new CommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 236, CypherParser.RULE_command);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1592;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ALTER:
			case CypherParser.DEALLOCATE:
			case CypherParser.DENY:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.GRANT:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REVOKE:
			case CypherParser.START:
			case CypherParser.STOP:
				{
				this.state = 1589;
				this.commandWithUseGraph();
				}
				break;
			case CypherParser.SHOW:
				{
				this.state = 1590;
				this.showCommand();
				}
				break;
			case CypherParser.TERMINATE:
				{
				this.state = 1591;
				this.terminateCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public commandWithUseGraph(): CommandWithUseGraphContext {
		let _localctx: CommandWithUseGraphContext = new CommandWithUseGraphContext(this._ctx, this.state);
		this.enterRule(_localctx, 238, CypherParser.RULE_commandWithUseGraph);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1604;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DROP:
				{
				this.state = 1594;
				this.dropCommand();
				}
				break;
			case CypherParser.ALTER:
				{
				this.state = 1595;
				this.alterCommand();
				}
				break;
			case CypherParser.RENAME:
				{
				this.state = 1596;
				this.renameCommand();
				}
				break;
			case CypherParser.DENY:
				{
				this.state = 1597;
				this.denyPrivilege();
				}
				break;
			case CypherParser.REVOKE:
				{
				this.state = 1598;
				this.revokeCommand();
				}
				break;
			case CypherParser.GRANT:
				{
				this.state = 1599;
				this.grantCommand();
				}
				break;
			case CypherParser.START:
				{
				this.state = 1600;
				this.startDatabase();
				}
				break;
			case CypherParser.STOP:
				{
				this.state = 1601;
				this.stopDatabase();
				}
				break;
			case CypherParser.ENABLE:
				{
				this.state = 1602;
				this.enableServerCommand();
				}
				break;
			case CypherParser.DEALLOCATE:
			case CypherParser.DRYRUN:
			case CypherParser.REALLOCATE:
				{
				this.state = 1603;
				this.allocationCommand();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropCommand(): DropCommandContext {
		let _localctx: DropCommandContext = new DropCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 240, CypherParser.RULE_dropCommand);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1606;
			this.match(CypherParser.DROP);
			this.state = 1614;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ROLE:
				{
				this.state = 1607;
				this.dropRole();
				}
				break;
			case CypherParser.USER:
				{
				this.state = 1608;
				this.dropUser();
				}
				break;
			case CypherParser.COMPOSITE:
			case CypherParser.DATABASE:
				{
				this.state = 1609;
				this.dropDatabase();
				}
				break;
			case CypherParser.CONSTRAINT:
				{
				this.state = 1610;
				this.dropConstraint();
				}
				break;
			case CypherParser.INDEX:
				{
				this.state = 1611;
				this.dropIndex();
				}
				break;
			case CypherParser.ALIAS:
				{
				this.state = 1612;
				this.dropAlias();
				}
				break;
			case CypherParser.SERVER:
				{
				this.state = 1613;
				this.dropServer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterCommand(): AlterCommandContext {
		let _localctx: AlterCommandContext = new AlterCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 242, CypherParser.RULE_alterCommand);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1616;
			this.match(CypherParser.ALTER);
			this.state = 1622;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DATABASE:
				{
				this.state = 1617;
				this.alterDatabase();
				}
				break;
			case CypherParser.ALIAS:
				{
				this.state = 1618;
				this.alterAlias();
				}
				break;
			case CypherParser.CURRENT:
				{
				this.state = 1619;
				this.alterCurrentUser();
				}
				break;
			case CypherParser.USER:
				{
				this.state = 1620;
				this.alterUser();
				}
				break;
			case CypherParser.SERVER:
				{
				this.state = 1621;
				this.alterServer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCommand(): ShowCommandContext {
		let _localctx: ShowCommandContext = new ShowCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 244, CypherParser.RULE_showCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1624;
			this.match(CypherParser.SHOW);
			this.state = 1691;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 162, this._ctx) ) {
			case 1:
				{
				this.state = 1625;
				this.match(CypherParser.ALL);
				this.state = 1626;
				this.showAllCommand();
				}
				break;

			case 2:
				{
				this.state = 1627;
				this.match(CypherParser.POPULATED);
				this.state = 1628;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.ROLE || _la === CypherParser.ROLES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1629;
				this.showRoles();
				}
				break;

			case 3:
				{
				this.state = 1630;
				this.match(CypherParser.BTREE);
				this.state = 1631;
				this.showIndexesAllowBrief();
				}
				break;

			case 4:
				{
				this.state = 1632;
				this.match(CypherParser.RANGE);
				this.state = 1633;
				this.showIndexesNoBrief();
				}
				break;

			case 5:
				{
				this.state = 1634;
				this.match(CypherParser.FULLTEXT);
				this.state = 1635;
				this.showIndexesNoBrief();
				}
				break;

			case 6:
				{
				this.state = 1636;
				this.match(CypherParser.TEXT);
				this.state = 1637;
				this.showIndexesNoBrief();
				}
				break;

			case 7:
				{
				this.state = 1638;
				this.match(CypherParser.POINT);
				this.state = 1639;
				this.showIndexesNoBrief();
				}
				break;

			case 8:
				{
				this.state = 1640;
				this.match(CypherParser.LOOKUP);
				this.state = 1641;
				this.showIndexesNoBrief();
				}
				break;

			case 9:
				{
				this.state = 1642;
				this.match(CypherParser.UNIQUE);
				this.state = 1643;
				this.showConstraintsAllowBriefAndYield();
				}
				break;

			case 10:
				{
				this.state = 1644;
				this.match(CypherParser.UNIQUENESS);
				this.state = 1645;
				this.showConstraintsAllowYield();
				}
				break;

			case 11:
				{
				this.state = 1646;
				this.match(CypherParser.KEY);
				this.state = 1647;
				this.showConstraintsAllowYield();
				}
				break;

			case 12:
				{
				this.state = 1648;
				this.match(CypherParser.NODE);
				this.state = 1649;
				this.showNodeCommand();
				}
				break;

			case 13:
				{
				this.state = 1650;
				this.match(CypherParser.PROPERTY);
				this.state = 1651;
				this.showPropertyCommand();
				}
				break;

			case 14:
				{
				this.state = 1652;
				this.match(CypherParser.EXISTENCE);
				this.state = 1653;
				this.showConstraintsAllowYield();
				}
				break;

			case 15:
				{
				this.state = 1654;
				this.match(CypherParser.EXISTS);
				this.state = 1655;
				this.showConstraintsAllowBrief();
				}
				break;

			case 16:
				{
				this.state = 1656;
				this.match(CypherParser.EXIST);
				this.state = 1657;
				this.showConstraintsAllowBriefAndYield();
				}
				break;

			case 17:
				{
				this.state = 1658;
				this.match(CypherParser.RELATIONSHIP);
				this.state = 1659;
				this.showRelationshipCommand();
				}
				break;

			case 18:
				{
				this.state = 1660;
				this.match(CypherParser.REL);
				this.state = 1661;
				this.showRelCommand();
				}
				break;

			case 19:
				{
				this.state = 1662;
				this.match(CypherParser.BUILT);
				this.state = 1663;
				this.match(CypherParser.IN);
				this.state = 1664;
				this.showFunctions();
				}
				break;

			case 20:
				{
				this.state = 1665;
				this.showIndexesAllowBrief();
				}
				break;

			case 21:
				{
				this.state = 1666;
				this.showDatabase();
				}
				break;

			case 22:
				{
				this.state = 1667;
				this.showCurrentUser();
				}
				break;

			case 23:
				{
				this.state = 1668;
				this.showConstraintsAllowBriefAndYield();
				}
				break;

			case 24:
				{
				this.state = 1669;
				this.showProcedures();
				}
				break;

			case 25:
				{
				this.state = 1670;
				this.showSettings();
				}
				break;

			case 26:
				{
				this.state = 1671;
				this.showFunctions();
				}
				break;

			case 27:
				{
				this.state = 1672;
				this.showTransactions();
				}
				break;

			case 28:
				{
				this.state = 1673;
				this.showAliases();
				}
				break;

			case 29:
				{
				this.state = 1674;
				this.showServers();
				}
				break;

			case 30:
				{
				this.state = 1675;
				this.showPrivileges();
				}
				break;

			case 31:
				{
				this.state = 1676;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.ROLE || _la === CypherParser.ROLES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1680;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 160, this._ctx) ) {
				case 1:
					{
					this.state = 1677;
					this.showRolePrivileges();
					}
					break;

				case 2:
					{
					this.state = 1678;
					this.showRoles();
					}
					break;

				case 3:
					{
					this.state = 1679;
					this.showRolePrivileges();
					}
					break;
				}
				}
				break;

			case 32:
				{
				this.state = 1682;
				this.match(CypherParser.USER);
				this.state = 1683;
				this.match(CypherParser.DEFINED);
				this.state = 1684;
				this.showFunctions();
				}
				break;

			case 33:
				{
				this.state = 1685;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.USER || _la === CypherParser.USERS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1689;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 161, this._ctx) ) {
				case 1:
					{
					this.state = 1686;
					this.showUserPrivileges();
					}
					break;

				case 2:
					{
					this.state = 1687;
					this.showUsers();
					}
					break;

				case 3:
					{
					this.state = 1688;
					this.showUserPrivileges();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public terminateCommand(): TerminateCommandContext {
		let _localctx: TerminateCommandContext = new TerminateCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 246, CypherParser.RULE_terminateCommand);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1693;
			this.match(CypherParser.TERMINATE);
			this.state = 1694;
			this.terminateTransactions();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showAllCommand(): ShowAllCommandContext {
		let _localctx: ShowAllCommandContext = new ShowAllCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 248, CypherParser.RULE_showAllCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1702;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ROLE:
			case CypherParser.ROLES:
				{
				this.state = 1696;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.ROLE || _la === CypherParser.ROLES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1697;
				this.showRoles();
				}
				break;
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
				{
				this.state = 1698;
				this.showIndexesAllowBrief();
				}
				break;
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
				{
				this.state = 1699;
				this.showConstraintsAllowBriefAndYield();
				}
				break;
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
				{
				this.state = 1700;
				this.showFunctions();
				}
				break;
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
				{
				this.state = 1701;
				this.showPrivileges();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showNodeCommand(): ShowNodeCommandContext {
		let _localctx: ShowNodeCommandContext = new ShowNodeCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 250, CypherParser.RULE_showNodeCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1716;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
				{
				this.state = 1704;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.UNIQUE || _la === CypherParser.UNIQUENESS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1705;
				this.showConstraintsAllowYield();
				}
				break;
			case CypherParser.KEY:
				{
				this.state = 1706;
				this.match(CypherParser.KEY);
				this.state = 1707;
				this.showConstraintsAllowBriefAndYield();
				}
				break;
			case CypherParser.PROPERTY:
				{
				this.state = 1708;
				this.match(CypherParser.PROPERTY);
				this.state = 1709;
				this.showPropertyCommand();
				}
				break;
			case CypherParser.EXISTENCE:
				{
				this.state = 1710;
				this.match(CypherParser.EXISTENCE);
				this.state = 1711;
				this.showConstraintsAllowYield();
				}
				break;
			case CypherParser.EXISTS:
				{
				this.state = 1712;
				this.match(CypherParser.EXISTS);
				this.state = 1713;
				this.showConstraintsAllowBrief();
				}
				break;
			case CypherParser.EXIST:
				{
				this.state = 1714;
				this.match(CypherParser.EXIST);
				this.state = 1715;
				this.showConstraintsAllowBriefAndYield();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRelationshipCommand(): ShowRelationshipCommandContext {
		let _localctx: ShowRelationshipCommandContext = new ShowRelationshipCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 252, CypherParser.RULE_showRelationshipCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1730;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
				{
				this.state = 1718;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.UNIQUE || _la === CypherParser.UNIQUENESS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1719;
				this.showConstraintsAllowYield();
				}
				break;
			case CypherParser.KEY:
				{
				this.state = 1720;
				this.match(CypherParser.KEY);
				this.state = 1721;
				this.showConstraintsAllowYield();
				}
				break;
			case CypherParser.PROPERTY:
				{
				this.state = 1722;
				this.match(CypherParser.PROPERTY);
				this.state = 1723;
				this.showPropertyCommand();
				}
				break;
			case CypherParser.EXISTENCE:
				{
				this.state = 1724;
				this.match(CypherParser.EXISTENCE);
				this.state = 1725;
				this.showConstraintsAllowYield();
				}
				break;
			case CypherParser.EXISTS:
				{
				this.state = 1726;
				this.match(CypherParser.EXISTS);
				this.state = 1727;
				this.showConstraintsAllowBrief();
				}
				break;
			case CypherParser.EXIST:
				{
				this.state = 1728;
				this.match(CypherParser.EXIST);
				this.state = 1729;
				this.showConstraintsAllowBriefAndYield();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRelCommand(): ShowRelCommandContext {
		let _localctx: ShowRelCommandContext = new ShowRelCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 254, CypherParser.RULE_showRelCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1742;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
				{
				this.state = 1732;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.UNIQUE || _la === CypherParser.UNIQUENESS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1733;
				this.showConstraintsAllowYield();
				}
				break;
			case CypherParser.KEY:
				{
				this.state = 1734;
				this.match(CypherParser.KEY);
				this.state = 1735;
				this.showConstraintsAllowYield();
				}
				break;
			case CypherParser.PROPERTY:
				{
				this.state = 1736;
				this.match(CypherParser.PROPERTY);
				this.state = 1737;
				this.showPropertyCommand();
				}
				break;
			case CypherParser.EXISTENCE:
				{
				this.state = 1738;
				this.match(CypherParser.EXISTENCE);
				this.state = 1739;
				this.showConstraintsAllowYield();
				}
				break;
			case CypherParser.EXIST:
				{
				this.state = 1740;
				this.match(CypherParser.EXIST);
				this.state = 1741;
				this.showConstraintsAllowYield();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showPropertyCommand(): ShowPropertyCommandContext {
		let _localctx: ShowPropertyCommandContext = new ShowPropertyCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 256, CypherParser.RULE_showPropertyCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1744;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.EXIST || _la === CypherParser.EXISTENCE)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1745;
			this.showConstraintsAllowYield();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public yieldItem(): YieldItemContext {
		let _localctx: YieldItemContext = new YieldItemContext(this._ctx, this.state);
		this.enterRule(_localctx, 258, CypherParser.RULE_yieldItem);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1747;
			this.variable();
			this.state = 1750;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.AS) {
				{
				this.state = 1748;
				this.match(CypherParser.AS);
				this.state = 1749;
				this.variable();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public yieldClause(): YieldClauseContext {
		let _localctx: YieldClauseContext = new YieldClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 260, CypherParser.RULE_yieldClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1752;
			this.match(CypherParser.YIELD);
			this.state = 1762;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.TIMES:
				{
				this.state = 1753;
				this.match(CypherParser.TIMES);
				}
				break;
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 1754;
				this.yieldItem();
				this.state = 1759;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.COMMA) {
					{
					{
					this.state = 1755;
					this.match(CypherParser.COMMA);
					this.state = 1756;
					this.yieldItem();
					}
					}
					this.state = 1761;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 1774;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.ORDER) {
				{
				this.state = 1764;
				this.match(CypherParser.ORDER);
				this.state = 1765;
				this.match(CypherParser.BY);
				this.state = 1766;
				this.orderItem();
				this.state = 1771;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.COMMA) {
					{
					{
					this.state = 1767;
					this.match(CypherParser.COMMA);
					this.state = 1768;
					this.orderItem();
					}
					}
					this.state = 1773;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 1778;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.SKIPROWS) {
				{
				this.state = 1776;
				this.match(CypherParser.SKIPROWS);
				this.state = 1777;
				this.signedIntegerLiteral();
				}
			}

			this.state = 1782;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.LIMITROWS) {
				{
				this.state = 1780;
				this.match(CypherParser.LIMITROWS);
				this.state = 1781;
				this.signedIntegerLiteral();
				}
			}

			this.state = 1785;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.WHERE) {
				{
				this.state = 1784;
				this.whereClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showIndexesAllowBrief(): ShowIndexesAllowBriefContext {
		let _localctx: ShowIndexesAllowBriefContext = new ShowIndexesAllowBriefContext(this._ctx, this.state);
		this.enterRule(_localctx, 262, CypherParser.RULE_showIndexesAllowBrief);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1787;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.INDEX || _la === CypherParser.INDEXES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1797;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.BRIEF:
			case CypherParser.VERBOSE:
				{
				this.state = 1788;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.BRIEF || _la === CypherParser.VERBOSE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1790;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.OUTPUT) {
					{
					this.state = 1789;
					this.match(CypherParser.OUTPUT);
					}
				}

				}
				break;
			case CypherParser.YIELD:
				{
				this.state = 1792;
				this.yieldClause();
				this.state = 1794;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 176, this._ctx) ) {
				case 1:
					{
					this.state = 1793;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 1796;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showIndexesNoBrief(): ShowIndexesNoBriefContext {
		let _localctx: ShowIndexesNoBriefContext = new ShowIndexesNoBriefContext(this._ctx, this.state);
		this.enterRule(_localctx, 264, CypherParser.RULE_showIndexesNoBrief);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1799;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.INDEX || _la === CypherParser.INDEXES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1805;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 1800;
				this.yieldClause();
				this.state = 1802;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 178, this._ctx) ) {
				case 1:
					{
					this.state = 1801;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 1804;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showConstraintsAllowBriefAndYield(): ShowConstraintsAllowBriefAndYieldContext {
		let _localctx: ShowConstraintsAllowBriefAndYieldContext = new ShowConstraintsAllowBriefAndYieldContext(this._ctx, this.state);
		this.enterRule(_localctx, 266, CypherParser.RULE_showConstraintsAllowBriefAndYield);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1807;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.CONSTRAINT || _la === CypherParser.CONSTRAINTS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1817;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.BRIEF:
			case CypherParser.VERBOSE:
				{
				this.state = 1808;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.BRIEF || _la === CypherParser.VERBOSE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1810;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.OUTPUT) {
					{
					this.state = 1809;
					this.match(CypherParser.OUTPUT);
					}
				}

				}
				break;
			case CypherParser.YIELD:
				{
				this.state = 1812;
				this.yieldClause();
				this.state = 1814;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 181, this._ctx) ) {
				case 1:
					{
					this.state = 1813;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 1816;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showConstraintsAllowBrief(): ShowConstraintsAllowBriefContext {
		let _localctx: ShowConstraintsAllowBriefContext = new ShowConstraintsAllowBriefContext(this._ctx, this.state);
		this.enterRule(_localctx, 268, CypherParser.RULE_showConstraintsAllowBrief);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1819;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.CONSTRAINT || _la === CypherParser.CONSTRAINTS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1824;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.BRIEF || _la === CypherParser.VERBOSE) {
				{
				this.state = 1820;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.BRIEF || _la === CypherParser.VERBOSE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1822;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.OUTPUT) {
					{
					this.state = 1821;
					this.match(CypherParser.OUTPUT);
					}
				}

				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showConstraintsAllowYield(): ShowConstraintsAllowYieldContext {
		let _localctx: ShowConstraintsAllowYieldContext = new ShowConstraintsAllowYieldContext(this._ctx, this.state);
		this.enterRule(_localctx, 270, CypherParser.RULE_showConstraintsAllowYield);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1826;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.CONSTRAINT || _la === CypherParser.CONSTRAINTS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1832;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 1827;
				this.yieldClause();
				this.state = 1829;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 185, this._ctx) ) {
				case 1:
					{
					this.state = 1828;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 1831;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showProcedures(): ShowProceduresContext {
		let _localctx: ShowProceduresContext = new ShowProceduresContext(this._ctx, this.state);
		this.enterRule(_localctx, 272, CypherParser.RULE_showProcedures);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1834;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.PROCEDURE || _la === CypherParser.PROCEDURES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1844;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.EXECUTABLE) {
				{
				this.state = 1835;
				this.match(CypherParser.EXECUTABLE);
				this.state = 1842;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.BY) {
					{
					this.state = 1836;
					this.match(CypherParser.BY);
					this.state = 1840;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 187, this._ctx) ) {
					case 1:
						{
						this.state = 1837;
						this.match(CypherParser.CURRENT);
						this.state = 1838;
						this.match(CypherParser.USER);
						}
						break;

					case 2:
						{
						this.state = 1839;
						this.symbolicNameString();
						}
						break;
					}
					}
				}

				}
			}

			this.state = 1851;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 1846;
				this.yieldClause();
				this.state = 1848;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 190, this._ctx) ) {
				case 1:
					{
					this.state = 1847;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 1850;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showFunctions(): ShowFunctionsContext {
		let _localctx: ShowFunctionsContext = new ShowFunctionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 274, CypherParser.RULE_showFunctions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1853;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.FUNCTION || _la === CypherParser.FUNCTIONS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1863;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.EXECUTABLE) {
				{
				this.state = 1854;
				this.match(CypherParser.EXECUTABLE);
				this.state = 1861;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.BY) {
					{
					this.state = 1855;
					this.match(CypherParser.BY);
					this.state = 1859;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 192, this._ctx) ) {
					case 1:
						{
						this.state = 1856;
						this.match(CypherParser.CURRENT);
						this.state = 1857;
						this.match(CypherParser.USER);
						}
						break;

					case 2:
						{
						this.state = 1858;
						this.symbolicNameString();
						}
						break;
					}
					}
				}

				}
			}

			this.state = 1870;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 1865;
				this.yieldClause();
				this.state = 1867;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 195, this._ctx) ) {
				case 1:
					{
					this.state = 1866;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 1869;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showTransactions(): ShowTransactionsContext {
		let _localctx: ShowTransactionsContext = new ShowTransactionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 276, CypherParser.RULE_showTransactions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1872;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.TRANSACTION || _la === CypherParser.TRANSACTIONS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1893;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 202, this._ctx) ) {
			case 1:
				{
				this.state = 1873;
				this.showOrTerminateTransactions();
				}
				break;

			case 2:
				{
				this.state = 1888;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 200, this._ctx) ) {
				case 1:
					{
					this.state = 1874;
					this.stringsOrExpression();
					this.state = 1880;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.YIELD:
						{
						this.state = 1875;
						this.yieldClause();
						this.state = 1877;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 197, this._ctx) ) {
						case 1:
							{
							this.state = 1876;
							this.returnClause();
							}
							break;
						}
						}
						break;
					case CypherParser.WHERE:
						{
						this.state = 1879;
						this.whereClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;

				case 2:
					{
					this.state = 1882;
					this.yieldClause();
					this.state = 1884;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 199, this._ctx) ) {
					case 1:
						{
						this.state = 1883;
						this.returnClause();
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 1886;
					this.whereClause();
					}
					break;

				case 4:
					{
					this.state = 1887;
					this.stringsOrExpression();
					}
					break;
				}
				this.state = 1891;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 201, this._ctx) ) {
				case 1:
					{
					this.state = 1890;
					this.showOrTerminateTransactions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public terminateTransactions(): TerminateTransactionsContext {
		let _localctx: TerminateTransactionsContext = new TerminateTransactionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 278, CypherParser.RULE_terminateTransactions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1895;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.TRANSACTION || _la === CypherParser.TRANSACTIONS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1916;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 208, this._ctx) ) {
			case 1:
				{
				this.state = 1896;
				this.showOrTerminateTransactions();
				}
				break;

			case 2:
				{
				this.state = 1911;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 206, this._ctx) ) {
				case 1:
					{
					this.state = 1897;
					this.stringsOrExpression();
					this.state = 1903;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.YIELD:
						{
						this.state = 1898;
						this.yieldClause();
						this.state = 1900;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 203, this._ctx) ) {
						case 1:
							{
							this.state = 1899;
							this.returnClause();
							}
							break;
						}
						}
						break;
					case CypherParser.WHERE:
						{
						this.state = 1902;
						this.whereClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;

				case 2:
					{
					this.state = 1905;
					this.yieldClause();
					this.state = 1907;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 205, this._ctx) ) {
					case 1:
						{
						this.state = 1906;
						this.returnClause();
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 1909;
					this.whereClause();
					}
					break;

				case 4:
					{
					this.state = 1910;
					this.stringsOrExpression();
					}
					break;
				}
				this.state = 1914;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 207, this._ctx) ) {
				case 1:
					{
					this.state = 1913;
					this.showOrTerminateTransactions();
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showOrTerminateTransactions(): ShowOrTerminateTransactionsContext {
		let _localctx: ShowOrTerminateTransactionsContext = new ShowOrTerminateTransactionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 280, CypherParser.RULE_showOrTerminateTransactions);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1922;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.TERMINATE:
				{
				this.state = 1918;
				this.match(CypherParser.TERMINATE);
				this.state = 1919;
				this.terminateTransactions();
				}
				break;
			case CypherParser.SHOW:
				{
				this.state = 1920;
				this.match(CypherParser.SHOW);
				this.state = 1921;
				this.showTransactions();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringsOrExpression(): StringsOrExpressionContext {
		let _localctx: StringsOrExpressionContext = new StringsOrExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 282, CypherParser.RULE_stringsOrExpression);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1926;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 210, this._ctx) ) {
			case 1:
				{
				this.state = 1924;
				this.stringList();
				}
				break;

			case 2:
				{
				this.state = 1925;
				this.expression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showSettings(): ShowSettingsContext {
		let _localctx: ShowSettingsContext = new ShowSettingsContext(this._ctx, this.state);
		this.enterRule(_localctx, 284, CypherParser.RULE_showSettings);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1928;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.SETTING || _la === CypherParser.SETTINGS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 1943;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 214, this._ctx) ) {
			case 1:
				{
				this.state = 1929;
				this.stringsOrExpression();
				this.state = 1935;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.YIELD:
					{
					this.state = 1930;
					this.yieldClause();
					this.state = 1932;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 211, this._ctx) ) {
					case 1:
						{
						this.state = 1931;
						this.returnClause();
						}
						break;
					}
					}
					break;
				case CypherParser.WHERE:
					{
					this.state = 1934;
					this.whereClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;

			case 2:
				{
				this.state = 1937;
				this.yieldClause();
				this.state = 1939;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 213, this._ctx) ) {
				case 1:
					{
					this.state = 1938;
					this.returnClause();
					}
					break;
				}
				}
				break;

			case 3:
				{
				this.state = 1941;
				this.whereClause();
				}
				break;

			case 4:
				{
				this.state = 1942;
				this.stringsOrExpression();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createConstraint(): CreateConstraintContext {
		let _localctx: CreateConstraintContext = new CreateConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 286, CypherParser.RULE_createConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 1945;
			this.match(CypherParser.CONSTRAINT);
			this.state = 1965;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 217, this._ctx) ) {
			case 1:
				{
				this.state = 1946;
				this.match(CypherParser.ON);
				this.state = 1947;
				this.match(CypherParser.LPAREN);
				}
				break;

			case 2:
				{
				this.state = 1948;
				this.match(CypherParser.FOR);
				this.state = 1949;
				this.match(CypherParser.LPAREN);
				}
				break;

			case 3:
				{
				this.state = 1950;
				this.match(CypherParser.IF);
				this.state = 1951;
				this.match(CypherParser.NOT);
				this.state = 1952;
				this.match(CypherParser.EXISTS);
				this.state = 1953;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.FOR || _la === CypherParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1954;
				this.match(CypherParser.LPAREN);
				}
				break;

			case 4:
				{
				this.state = 1956;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 215, this._ctx) ) {
				case 1:
					{
					this.state = 1955;
					this.symbolicNameString();
					}
					break;
				}
				this.state = 1961;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.IF) {
					{
					this.state = 1958;
					this.match(CypherParser.IF);
					this.state = 1959;
					this.match(CypherParser.NOT);
					this.state = 1960;
					this.match(CypherParser.EXISTS);
					}
				}

				this.state = 1963;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.FOR || _la === CypherParser.ON)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1964;
				this.match(CypherParser.LPAREN);
				}
				break;
			}
			this.state = 1987;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 1967;
				this.variable();
				this.state = 1968;
				this.labelOrRelType();
				this.state = 1969;
				this.match(CypherParser.RPAREN);
				}
				break;
			case CypherParser.RPAREN:
				{
				this.state = 1971;
				this.match(CypherParser.RPAREN);
				this.state = 1973;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.LT || _la === CypherParser.ARROW_LEFT_HEAD) {
					{
					this.state = 1972;
					this.leftArrow();
					}
				}

				this.state = 1975;
				this.arrowLine();
				this.state = 1976;
				this.match(CypherParser.LBRACKET);
				this.state = 1977;
				this.variable();
				this.state = 1978;
				this.labelOrRelType();
				this.state = 1979;
				this.match(CypherParser.RBRACKET);
				this.state = 1980;
				this.arrowLine();
				this.state = 1982;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.GT || _la === CypherParser.ARROW_RIGHT_HEAD) {
					{
					this.state = 1981;
					this.rightArrow();
					}
				}

				this.state = 1984;
				this.match(CypherParser.LPAREN);
				this.state = 1985;
				this.match(CypherParser.RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2005;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 222, this._ctx) ) {
			case 1:
				{
				this.state = 1989;
				this.match(CypherParser.ASSERT);
				this.state = 1990;
				this.match(CypherParser.EXISTS);
				this.state = 1991;
				this.propertyList();
				}
				break;

			case 2:
				{
				this.state = 1992;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.ASSERT || _la === CypherParser.REQUIRE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 1993;
				this.propertyList();
				this.state = 1994;
				this.match(CypherParser.IS);
				this.state = 2003;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.UNIQUE:
					{
					this.state = 1995;
					this.match(CypherParser.UNIQUE);
					}
					break;
				case CypherParser.KEY:
					{
					this.state = 1996;
					this.match(CypherParser.KEY);
					}
					break;
				case CypherParser.NODE:
					{
					this.state = 1997;
					this.match(CypherParser.NODE);
					this.state = 1998;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.KEY || _la === CypherParser.UNIQUE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
					{
					this.state = 1999;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.REL || _la === CypherParser.RELATIONSHIP)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2000;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.KEY || _la === CypherParser.UNIQUE)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case CypherParser.NOT:
					{
					this.state = 2001;
					this.match(CypherParser.NOT);
					this.state = 2002;
					this.match(CypherParser.NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			this.state = 2009;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.OPTIONS) {
				{
				this.state = 2007;
				this.match(CypherParser.OPTIONS);
				this.state = 2008;
				this.mapOrParameter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropConstraint(): DropConstraintContext {
		let _localctx: DropConstraintContext = new DropConstraintContext(this._ctx, this.state);
		this.enterRule(_localctx, 288, CypherParser.RULE_dropConstraint);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2011;
			this.match(CypherParser.CONSTRAINT);
			this.state = 2055;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 230, this._ctx) ) {
			case 1:
				{
				this.state = 2012;
				this.match(CypherParser.ON);
				this.state = 2013;
				this.match(CypherParser.LPAREN);
				this.state = 2034;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.ACCESS:
				case CypherParser.ACTIVE:
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
				case CypherParser.ALIAS:
				case CypherParser.ALIASES:
				case CypherParser.ALL_SHORTEST_PATH:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.AND:
				case CypherParser.ANY:
				case CypherParser.AS:
				case CypherParser.ASC:
				case CypherParser.ASSERT:
				case CypherParser.ASSIGN:
				case CypherParser.AT:
				case CypherParser.BOOSTED:
				case CypherParser.BREAK:
				case CypherParser.BRIEF:
				case CypherParser.BTREE:
				case CypherParser.BUILT:
				case CypherParser.BY:
				case CypherParser.CALL:
				case CypherParser.CASE:
				case CypherParser.CHANGE:
				case CypherParser.COMMAND:
				case CypherParser.COMMANDS:
				case CypherParser.COMMIT:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CONTAINS:
				case CypherParser.COPY:
				case CypherParser.CONTINUE:
				case CypherParser.COUNT:
				case CypherParser.CREATE:
				case CypherParser.CSV:
				case CypherParser.CURRENT:
				case CypherParser.DATA:
				case CypherParser.DATABASE:
				case CypherParser.DATABASES:
				case CypherParser.DBMS:
				case CypherParser.DEALLOCATE:
				case CypherParser.DEFAULT_TOKEN:
				case CypherParser.DEFINED:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DESC:
				case CypherParser.DESTROY:
				case CypherParser.DETACH:
				case CypherParser.DISTINCT:
				case CypherParser.DRIVER:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.DUMP:
				case CypherParser.EACH:
				case CypherParser.ENABLE:
				case CypherParser.ELEMENT:
				case CypherParser.ELEMENTS:
				case CypherParser.ELSE:
				case CypherParser.ENCRYPTED:
				case CypherParser.END:
				case CypherParser.ENDS:
				case CypherParser.EXECUTABLE:
				case CypherParser.EXECUTE:
				case CypherParser.EXIST:
				case CypherParser.EXISTENCE:
				case CypherParser.EXISTS:
				case CypherParser.ERROR:
				case CypherParser.FAIL:
				case CypherParser.FALSE:
				case CypherParser.FIELDTERMINATOR:
				case CypherParser.FOR:
				case CypherParser.FOREACH:
				case CypherParser.FROM:
				case CypherParser.FULLTEXT:
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.GRANT:
				case CypherParser.GRAPH:
				case CypherParser.GRAPHS:
				case CypherParser.HEADERS:
				case CypherParser.HOME:
				case CypherParser.IF:
				case CypherParser.IMMUTABLE:
				case CypherParser.IN:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.INF:
				case CypherParser.INFINITY:
				case CypherParser.IS:
				case CypherParser.JOIN:
				case CypherParser.KEY:
				case CypherParser.LABEL:
				case CypherParser.LABELS:
				case CypherParser.LIMITROWS:
				case CypherParser.LOAD:
				case CypherParser.LOOKUP:
				case CypherParser.MANAGEMENT:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.NAMES:
				case CypherParser.NAN:
				case CypherParser.NEW:
				case CypherParser.NODE:
				case CypherParser.NODES:
				case CypherParser.NONE:
				case CypherParser.NOT:
				case CypherParser.NOWAIT:
				case CypherParser.NULL:
				case CypherParser.OF:
				case CypherParser.ON:
				case CypherParser.ONLY:
				case CypherParser.OPTIONAL:
				case CypherParser.OPTIONS:
				case CypherParser.OPTION:
				case CypherParser.OR:
				case CypherParser.ORDER:
				case CypherParser.OUTPUT:
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
				case CypherParser.PERIODIC:
				case CypherParser.PLAINTEXT:
				case CypherParser.POINT:
				case CypherParser.POPULATED:
				case CypherParser.PRIMARY:
				case CypherParser.PRIMARIES:
				case CypherParser.PRIVILEGE:
				case CypherParser.PRIVILEGES:
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
				case CypherParser.PROPERTIES:
				case CypherParser.PROPERTY:
				case CypherParser.RANGE:
				case CypherParser.READ:
				case CypherParser.REALLOCATE:
				case CypherParser.REDUCE:
				case CypherParser.RENAME:
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
				case CypherParser.RELATIONSHIPS:
				case CypherParser.REMOVE:
				case CypherParser.REPLACE:
				case CypherParser.REPORT:
				case CypherParser.REQUIRE:
				case CypherParser.REQUIRED:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.ROLE:
				case CypherParser.ROLES:
				case CypherParser.ROW:
				case CypherParser.ROWS:
				case CypherParser.SCAN:
				case CypherParser.SEC:
				case CypherParser.SECOND:
				case CypherParser.SECONDARY:
				case CypherParser.SECONDARIES:
				case CypherParser.SECONDS:
				case CypherParser.SEEK:
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
				case CypherParser.SET:
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
				case CypherParser.SHORTEST_PATH:
				case CypherParser.SHOW:
				case CypherParser.SINGLE:
				case CypherParser.SKIPROWS:
				case CypherParser.START:
				case CypherParser.STARTS:
				case CypherParser.STATUS:
				case CypherParser.STOP:
				case CypherParser.SUSPENDED:
				case CypherParser.TARGET:
				case CypherParser.TERMINATE:
				case CypherParser.TEXT:
				case CypherParser.THEN:
				case CypherParser.TO:
				case CypherParser.TOPOLOGY:
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
				case CypherParser.TRAVERSE:
				case CypherParser.TRUE:
				case CypherParser.TYPE:
				case CypherParser.TYPES:
				case CypherParser.UNION:
				case CypherParser.UNIQUE:
				case CypherParser.UNIQUENESS:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USER:
				case CypherParser.USERS:
				case CypherParser.USING:
				case CypherParser.VERBOSE:
				case CypherParser.WAIT:
				case CypherParser.WHEN:
				case CypherParser.WHERE:
				case CypherParser.WITH:
				case CypherParser.WRITE:
				case CypherParser.XOR:
				case CypherParser.YIELD:
				case CypherParser.IDENTIFIER:
				case CypherParser.ESCAPED_SYMBOLIC_NAME:
					{
					this.state = 2014;
					this.variable();
					this.state = 2015;
					this.labelOrRelType();
					this.state = 2016;
					this.match(CypherParser.RPAREN);
					}
					break;
				case CypherParser.RPAREN:
					{
					this.state = 2018;
					this.match(CypherParser.RPAREN);
					this.state = 2020;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.LT || _la === CypherParser.ARROW_LEFT_HEAD) {
						{
						this.state = 2019;
						this.leftArrow();
						}
					}

					this.state = 2022;
					this.arrowLine();
					this.state = 2023;
					this.match(CypherParser.LBRACKET);
					this.state = 2024;
					this.variable();
					this.state = 2025;
					this.labelOrRelType();
					this.state = 2026;
					this.match(CypherParser.RBRACKET);
					this.state = 2027;
					this.arrowLine();
					this.state = 2029;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.GT || _la === CypherParser.ARROW_RIGHT_HEAD) {
						{
						this.state = 2028;
						this.rightArrow();
						}
					}

					this.state = 2031;
					this.match(CypherParser.LPAREN);
					this.state = 2032;
					this.match(CypherParser.RPAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2036;
				this.match(CypherParser.ASSERT);
				this.state = 2048;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 228, this._ctx) ) {
				case 1:
					{
					this.state = 2037;
					this.match(CypherParser.EXISTS);
					this.state = 2038;
					this.propertyList();
					}
					break;

				case 2:
					{
					this.state = 2039;
					this.propertyList();
					this.state = 2040;
					this.match(CypherParser.IS);
					this.state = 2046;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.UNIQUE:
						{
						this.state = 2041;
						this.match(CypherParser.UNIQUE);
						}
						break;
					case CypherParser.NODE:
						{
						this.state = 2042;
						this.match(CypherParser.NODE);
						this.state = 2043;
						this.match(CypherParser.KEY);
						}
						break;
					case CypherParser.NOT:
						{
						this.state = 2044;
						this.match(CypherParser.NOT);
						this.state = 2045;
						this.match(CypherParser.NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;

			case 2:
				{
				this.state = 2050;
				this.symbolicNameString();
				this.state = 2053;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.IF) {
					{
					this.state = 2051;
					this.match(CypherParser.IF);
					this.state = 2052;
					this.match(CypherParser.EXISTS);
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndex(): CreateIndexContext {
		let _localctx: CreateIndexContext = new CreateIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 290, CypherParser.RULE_createIndex);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2081;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.BTREE:
				{
				this.state = 2057;
				this.match(CypherParser.BTREE);
				this.state = 2058;
				this.match(CypherParser.INDEX);
				this.state = 2059;
				this.createIndex_();
				}
				break;
			case CypherParser.RANGE:
				{
				this.state = 2060;
				this.match(CypherParser.RANGE);
				this.state = 2061;
				this.match(CypherParser.INDEX);
				this.state = 2062;
				this.createIndex_();
				}
				break;
			case CypherParser.FULLTEXT:
				{
				this.state = 2063;
				this.match(CypherParser.FULLTEXT);
				this.state = 2064;
				this.match(CypherParser.INDEX);
				this.state = 2065;
				this.createFulltextIndex();
				}
				break;
			case CypherParser.TEXT:
				{
				this.state = 2066;
				this.match(CypherParser.TEXT);
				this.state = 2067;
				this.match(CypherParser.INDEX);
				this.state = 2068;
				this.createIndex_();
				}
				break;
			case CypherParser.POINT:
				{
				this.state = 2069;
				this.match(CypherParser.POINT);
				this.state = 2070;
				this.match(CypherParser.INDEX);
				this.state = 2071;
				this.createIndex_();
				}
				break;
			case CypherParser.LOOKUP:
				{
				this.state = 2072;
				this.match(CypherParser.LOOKUP);
				this.state = 2073;
				this.match(CypherParser.INDEX);
				this.state = 2074;
				this.createLookupIndex();
				}
				break;
			case CypherParser.INDEX:
				{
				this.state = 2075;
				this.match(CypherParser.INDEX);
				this.state = 2079;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 231, this._ctx) ) {
				case 1:
					{
					this.state = 2076;
					this.match(CypherParser.ON);
					this.state = 2077;
					this.oldCreateIndex();
					}
					break;

				case 2:
					{
					this.state = 2078;
					this.createIndex_();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public oldCreateIndex(): OldCreateIndexContext {
		let _localctx: OldCreateIndexContext = new OldCreateIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 292, CypherParser.RULE_oldCreateIndex);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2083;
			this.labelOrRelType();
			this.state = 2084;
			this.match(CypherParser.LPAREN);
			this.state = 2085;
			this.symbolicNamePositions();
			this.state = 2086;
			this.match(CypherParser.RPAREN);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createIndex_(): CreateIndex_Context {
		let _localctx: CreateIndex_Context = new CreateIndex_Context(this._ctx, this.state);
		this.enterRule(_localctx, 294, CypherParser.RULE_createIndex_);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2104;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 234, this._ctx) ) {
			case 1:
				{
				this.state = 2088;
				this.match(CypherParser.FOR);
				this.state = 2089;
				this.match(CypherParser.LPAREN);
				}
				break;

			case 2:
				{
				this.state = 2090;
				this.match(CypherParser.IF);
				this.state = 2091;
				this.match(CypherParser.NOT);
				this.state = 2092;
				this.match(CypherParser.EXISTS);
				this.state = 2093;
				this.match(CypherParser.FOR);
				this.state = 2094;
				this.match(CypherParser.LPAREN);
				}
				break;

			case 3:
				{
				this.state = 2095;
				this.symbolicNameString();
				this.state = 2099;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.IF) {
					{
					this.state = 2096;
					this.match(CypherParser.IF);
					this.state = 2097;
					this.match(CypherParser.NOT);
					this.state = 2098;
					this.match(CypherParser.EXISTS);
					}
				}

				this.state = 2101;
				this.match(CypherParser.FOR);
				this.state = 2102;
				this.match(CypherParser.LPAREN);
				}
				break;
			}
			this.state = 2126;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 2106;
				this.variable();
				this.state = 2107;
				this.labelOrRelType();
				this.state = 2108;
				this.match(CypherParser.RPAREN);
				}
				break;
			case CypherParser.RPAREN:
				{
				this.state = 2110;
				this.match(CypherParser.RPAREN);
				this.state = 2112;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.LT || _la === CypherParser.ARROW_LEFT_HEAD) {
					{
					this.state = 2111;
					this.leftArrow();
					}
				}

				this.state = 2114;
				this.arrowLine();
				this.state = 2115;
				this.match(CypherParser.LBRACKET);
				this.state = 2116;
				this.variable();
				this.state = 2117;
				this.labelOrRelType();
				this.state = 2118;
				this.match(CypherParser.RBRACKET);
				this.state = 2119;
				this.arrowLine();
				this.state = 2121;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.GT || _la === CypherParser.ARROW_RIGHT_HEAD) {
					{
					this.state = 2120;
					this.rightArrow();
					}
				}

				this.state = 2123;
				this.match(CypherParser.LPAREN);
				this.state = 2124;
				this.match(CypherParser.RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2128;
			this.match(CypherParser.ON);
			this.state = 2129;
			this.propertyList();
			this.state = 2132;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.OPTIONS) {
				{
				this.state = 2130;
				this.match(CypherParser.OPTIONS);
				this.state = 2131;
				this.mapOrParameter();
				}
			}

			this.state = 2134;
			this.createIndex();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createFulltextIndex(): CreateFulltextIndexContext {
		let _localctx: CreateFulltextIndexContext = new CreateFulltextIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 296, CypherParser.RULE_createFulltextIndex);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2152;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 240, this._ctx) ) {
			case 1:
				{
				this.state = 2136;
				this.match(CypherParser.FOR);
				this.state = 2137;
				this.match(CypherParser.LPAREN);
				}
				break;

			case 2:
				{
				this.state = 2138;
				this.match(CypherParser.IF);
				this.state = 2139;
				this.match(CypherParser.NOT);
				this.state = 2140;
				this.match(CypherParser.EXISTS);
				this.state = 2141;
				this.match(CypherParser.FOR);
				this.state = 2142;
				this.match(CypherParser.LPAREN);
				}
				break;

			case 3:
				{
				this.state = 2143;
				this.symbolicNameString();
				this.state = 2147;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.IF) {
					{
					this.state = 2144;
					this.match(CypherParser.IF);
					this.state = 2145;
					this.match(CypherParser.NOT);
					this.state = 2146;
					this.match(CypherParser.EXISTS);
					}
				}

				this.state = 2149;
				this.match(CypherParser.FOR);
				this.state = 2150;
				this.match(CypherParser.LPAREN);
				}
				break;
			}
			this.state = 2174;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 2154;
				this.variable();
				this.state = 2155;
				this.labelOrRelTypes();
				this.state = 2156;
				this.match(CypherParser.RPAREN);
				}
				break;
			case CypherParser.RPAREN:
				{
				this.state = 2158;
				this.match(CypherParser.RPAREN);
				this.state = 2160;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.LT || _la === CypherParser.ARROW_LEFT_HEAD) {
					{
					this.state = 2159;
					this.leftArrow();
					}
				}

				this.state = 2162;
				this.arrowLine();
				this.state = 2163;
				this.match(CypherParser.LBRACKET);
				this.state = 2164;
				this.variable();
				this.state = 2165;
				this.labelOrRelTypes();
				this.state = 2166;
				this.match(CypherParser.RBRACKET);
				this.state = 2167;
				this.arrowLine();
				this.state = 2169;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.GT || _la === CypherParser.ARROW_RIGHT_HEAD) {
					{
					this.state = 2168;
					this.rightArrow();
					}
				}

				this.state = 2171;
				this.match(CypherParser.LPAREN);
				this.state = 2172;
				this.match(CypherParser.RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2176;
			this.match(CypherParser.ON);
			this.state = 2177;
			this.match(CypherParser.EACH);
			this.state = 2178;
			this.match(CypherParser.LBRACKET);
			this.state = 2179;
			this.variable();
			this.state = 2180;
			this.property();
			this.state = 2187;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 2181;
				this.match(CypherParser.COMMA);
				this.state = 2182;
				this.variable();
				this.state = 2183;
				this.property();
				}
				}
				this.state = 2189;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			this.state = 2190;
			this.match(CypherParser.RBRACKET);
			this.state = 2193;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 245, this._ctx) ) {
			case 1:
				{
				this.state = 2191;
				this.match(CypherParser.OPTIONS);
				this.state = 2192;
				this.mapOrParameter();
				}
				break;
			}
			this.state = 2195;
			this.createFulltextIndex();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createLookupIndex(): CreateLookupIndexContext {
		let _localctx: CreateLookupIndexContext = new CreateLookupIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 298, CypherParser.RULE_createLookupIndex);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2213;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 247, this._ctx) ) {
			case 1:
				{
				this.state = 2197;
				this.match(CypherParser.FOR);
				this.state = 2198;
				this.match(CypherParser.LPAREN);
				}
				break;

			case 2:
				{
				this.state = 2199;
				this.match(CypherParser.IF);
				this.state = 2200;
				this.match(CypherParser.NOT);
				this.state = 2201;
				this.match(CypherParser.EXISTS);
				this.state = 2202;
				this.match(CypherParser.FOR);
				this.state = 2203;
				this.match(CypherParser.LPAREN);
				}
				break;

			case 3:
				{
				this.state = 2204;
				this.symbolicNameString();
				this.state = 2208;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.IF) {
					{
					this.state = 2205;
					this.match(CypherParser.IF);
					this.state = 2206;
					this.match(CypherParser.NOT);
					this.state = 2207;
					this.match(CypherParser.EXISTS);
					}
				}

				this.state = 2210;
				this.match(CypherParser.FOR);
				this.state = 2211;
				this.match(CypherParser.LPAREN);
				}
				break;
			}
			this.state = 2238;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 2215;
				this.variable();
				this.state = 2216;
				this.match(CypherParser.RPAREN);
				this.state = 2217;
				this.match(CypherParser.ON);
				this.state = 2218;
				this.match(CypherParser.EACH);
				}
				break;
			case CypherParser.RPAREN:
				{
				this.state = 2220;
				this.match(CypherParser.RPAREN);
				this.state = 2222;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.LT || _la === CypherParser.ARROW_LEFT_HEAD) {
					{
					this.state = 2221;
					this.leftArrow();
					}
				}

				this.state = 2224;
				this.arrowLine();
				this.state = 2225;
				this.match(CypherParser.LBRACKET);
				this.state = 2226;
				this.variable();
				this.state = 2227;
				this.match(CypherParser.RBRACKET);
				this.state = 2228;
				this.arrowLine();
				this.state = 2230;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.GT || _la === CypherParser.ARROW_RIGHT_HEAD) {
					{
					this.state = 2229;
					this.rightArrow();
					}
				}

				this.state = 2232;
				this.match(CypherParser.LPAREN);
				this.state = 2233;
				this.match(CypherParser.RPAREN);
				this.state = 2234;
				this.match(CypherParser.ON);
				this.state = 2236;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 250, this._ctx) ) {
				case 1:
					{
					this.state = 2235;
					this.match(CypherParser.EACH);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2240;
			this.symbolicNameString();
			this.state = 2241;
			this.match(CypherParser.LPAREN);
			this.state = 2242;
			this.variable();
			this.state = 2243;
			this.match(CypherParser.RPAREN);
			this.state = 2246;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 252, this._ctx) ) {
			case 1:
				{
				this.state = 2244;
				this.match(CypherParser.OPTIONS);
				this.state = 2245;
				this.mapOrParameter();
				}
				break;
			}
			this.state = 2248;
			this.createLookupIndex();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropIndex(): DropIndexContext {
		let _localctx: DropIndexContext = new DropIndexContext(this._ctx, this.state);
		this.enterRule(_localctx, 300, CypherParser.RULE_dropIndex);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2250;
			this.match(CypherParser.INDEX);
			this.state = 2262;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 254, this._ctx) ) {
			case 1:
				{
				this.state = 2251;
				this.match(CypherParser.ON);
				this.state = 2252;
				this.labelOrRelType();
				this.state = 2253;
				this.match(CypherParser.LPAREN);
				this.state = 2254;
				this.symbolicNamePositions();
				this.state = 2255;
				this.match(CypherParser.RPAREN);
				}
				break;

			case 2:
				{
				this.state = 2257;
				this.symbolicNameString();
				this.state = 2260;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.IF) {
					{
					this.state = 2258;
					this.match(CypherParser.IF);
					this.state = 2259;
					this.match(CypherParser.EXISTS);
					}
				}

				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public propertyList(): PropertyListContext {
		let _localctx: PropertyListContext = new PropertyListContext(this._ctx, this.state);
		this.enterRule(_localctx, 302, CypherParser.RULE_propertyList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2281;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 2264;
				this.variable();
				this.state = 2265;
				this.property();
				}
				break;
			case CypherParser.LPAREN:
				{
				this.state = 2267;
				this.match(CypherParser.LPAREN);
				this.state = 2268;
				this.variable();
				this.state = 2269;
				this.property();
				this.state = 2276;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.COMMA) {
					{
					{
					this.state = 2270;
					this.match(CypherParser.COMMA);
					this.state = 2271;
					this.variable();
					this.state = 2272;
					this.property();
					}
					}
					this.state = 2278;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				this.state = 2279;
				this.match(CypherParser.RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameCommand(): RenameCommandContext {
		let _localctx: RenameCommandContext = new RenameCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 304, CypherParser.RULE_renameCommand);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2283;
			this.match(CypherParser.RENAME);
			this.state = 2287;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ROLE:
				{
				this.state = 2284;
				this.renameRole();
				}
				break;
			case CypherParser.USER:
				{
				this.state = 2285;
				this.renameUser();
				}
				break;
			case CypherParser.SERVER:
				{
				this.state = 2286;
				this.renameServer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantCommand(): GrantCommandContext {
		let _localctx: GrantCommandContext = new GrantCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 306, CypherParser.RULE_grantCommand);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2289;
			this.match(CypherParser.GRANT);
			this.state = 2306;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.IMMUTABLE:
				{
				this.state = 2290;
				this.match(CypherParser.IMMUTABLE);
				this.state = 2294;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.ACCESS:
				case CypherParser.ALIAS:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.ASSIGN:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CREATE:
				case CypherParser.DATABASE:
				case CypherParser.DELETE:
				case CypherParser.DROP:
				case CypherParser.EXECUTE:
				case CypherParser.IMPERSONATE:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.PRIVILEGE:
				case CypherParser.READ:
				case CypherParser.RENAME:
				case CypherParser.REMOVE:
				case CypherParser.SERVER:
				case CypherParser.SET:
				case CypherParser.SHOW:
				case CypherParser.START:
				case CypherParser.STOP:
				case CypherParser.TERMINATE:
				case CypherParser.TRANSACTION:
				case CypherParser.TRAVERSE:
				case CypherParser.USER:
				case CypherParser.WRITE:
					{
					this.state = 2291;
					this.grantPrivilege();
					}
					break;
				case CypherParser.ROLE:
					{
					this.state = 2292;
					this.match(CypherParser.ROLE);
					this.state = 2293;
					this.grantRoleManagement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.ACCESS:
			case CypherParser.ALIAS:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.ASSIGN:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CREATE:
			case CypherParser.DATABASE:
			case CypherParser.DELETE:
			case CypherParser.DROP:
			case CypherParser.EXECUTE:
			case CypherParser.IMPERSONATE:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.PRIVILEGE:
			case CypherParser.READ:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.SERVER:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.TRANSACTION:
			case CypherParser.TRAVERSE:
			case CypherParser.USER:
			case CypherParser.WRITE:
				{
				this.state = 2304;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.ACCESS:
				case CypherParser.ALIAS:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.ASSIGN:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CREATE:
				case CypherParser.DATABASE:
				case CypherParser.DELETE:
				case CypherParser.DROP:
				case CypherParser.EXECUTE:
				case CypherParser.IMPERSONATE:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.PRIVILEGE:
				case CypherParser.READ:
				case CypherParser.RENAME:
				case CypherParser.REMOVE:
				case CypherParser.SERVER:
				case CypherParser.SET:
				case CypherParser.SHOW:
				case CypherParser.START:
				case CypherParser.STOP:
				case CypherParser.TERMINATE:
				case CypherParser.TRANSACTION:
				case CypherParser.TRAVERSE:
				case CypherParser.USER:
				case CypherParser.WRITE:
					{
					this.state = 2296;
					this.grantPrivilege();
					}
					break;
				case CypherParser.ROLE:
					{
					this.state = 2297;
					this.match(CypherParser.ROLE);
					this.state = 2300;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 259, this._ctx) ) {
					case 1:
						{
						this.state = 2298;
						this.grantRoleManagement();
						}
						break;

					case 2:
						{
						this.state = 2299;
						this.grantRole();
						}
						break;
					}
					}
					break;
				case CypherParser.ROLES:
					{
					this.state = 2302;
					this.match(CypherParser.ROLES);
					this.state = 2303;
					this.grantRole();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeCommand(): RevokeCommandContext {
		let _localctx: RevokeCommandContext = new RevokeCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 308, CypherParser.RULE_revokeCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2308;
			this.match(CypherParser.REVOKE);
			this.state = 2340;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DENY:
				{
				this.state = 2309;
				this.match(CypherParser.DENY);
				this.state = 2311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.IMMUTABLE) {
					{
					this.state = 2310;
					this.match(CypherParser.IMMUTABLE);
					}
				}

				this.state = 2316;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.ACCESS:
				case CypherParser.ALIAS:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.ASSIGN:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CREATE:
				case CypherParser.DATABASE:
				case CypherParser.DELETE:
				case CypherParser.DROP:
				case CypherParser.EXECUTE:
				case CypherParser.IMPERSONATE:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.PRIVILEGE:
				case CypherParser.READ:
				case CypherParser.RENAME:
				case CypherParser.REMOVE:
				case CypherParser.SERVER:
				case CypherParser.SET:
				case CypherParser.SHOW:
				case CypherParser.START:
				case CypherParser.STOP:
				case CypherParser.TERMINATE:
				case CypherParser.TRANSACTION:
				case CypherParser.TRAVERSE:
				case CypherParser.USER:
				case CypherParser.WRITE:
					{
					this.state = 2313;
					this.revokePrivilege();
					}
					break;
				case CypherParser.ROLE:
					{
					this.state = 2314;
					this.match(CypherParser.ROLE);
					this.state = 2315;
					this.revokeRoleManagement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.GRANT:
				{
				this.state = 2318;
				this.match(CypherParser.GRANT);
				this.state = 2320;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.IMMUTABLE) {
					{
					this.state = 2319;
					this.match(CypherParser.IMMUTABLE);
					}
				}

				this.state = 2325;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.ACCESS:
				case CypherParser.ALIAS:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.ASSIGN:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CREATE:
				case CypherParser.DATABASE:
				case CypherParser.DELETE:
				case CypherParser.DROP:
				case CypherParser.EXECUTE:
				case CypherParser.IMPERSONATE:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.PRIVILEGE:
				case CypherParser.READ:
				case CypherParser.RENAME:
				case CypherParser.REMOVE:
				case CypherParser.SERVER:
				case CypherParser.SET:
				case CypherParser.SHOW:
				case CypherParser.START:
				case CypherParser.STOP:
				case CypherParser.TERMINATE:
				case CypherParser.TRANSACTION:
				case CypherParser.TRAVERSE:
				case CypherParser.USER:
				case CypherParser.WRITE:
					{
					this.state = 2322;
					this.revokePrivilege();
					}
					break;
				case CypherParser.ROLE:
					{
					this.state = 2323;
					this.match(CypherParser.ROLE);
					this.state = 2324;
					this.revokeRoleManagement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.IMMUTABLE:
				{
				this.state = 2327;
				this.match(CypherParser.IMMUTABLE);
				this.state = 2331;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.ACCESS:
				case CypherParser.ALIAS:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.ASSIGN:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CREATE:
				case CypherParser.DATABASE:
				case CypherParser.DELETE:
				case CypherParser.DROP:
				case CypherParser.EXECUTE:
				case CypherParser.IMPERSONATE:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.PRIVILEGE:
				case CypherParser.READ:
				case CypherParser.RENAME:
				case CypherParser.REMOVE:
				case CypherParser.SERVER:
				case CypherParser.SET:
				case CypherParser.SHOW:
				case CypherParser.START:
				case CypherParser.STOP:
				case CypherParser.TERMINATE:
				case CypherParser.TRANSACTION:
				case CypherParser.TRAVERSE:
				case CypherParser.USER:
				case CypherParser.WRITE:
					{
					this.state = 2328;
					this.revokePrivilege();
					}
					break;
				case CypherParser.ROLE:
					{
					this.state = 2329;
					this.match(CypherParser.ROLE);
					this.state = 2330;
					this.revokeRoleManagement();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.ACCESS:
			case CypherParser.ALIAS:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.ASSIGN:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CREATE:
			case CypherParser.DATABASE:
			case CypherParser.DELETE:
			case CypherParser.DROP:
			case CypherParser.EXECUTE:
			case CypherParser.IMPERSONATE:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.PRIVILEGE:
			case CypherParser.READ:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.SERVER:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.TRANSACTION:
			case CypherParser.TRAVERSE:
			case CypherParser.USER:
			case CypherParser.WRITE:
				{
				this.state = 2338;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 267, this._ctx) ) {
				case 1:
					{
					this.state = 2333;
					this.revokePrivilege();
					}
					break;

				case 2:
					{
					this.state = 2334;
					this.match(CypherParser.ROLE);
					this.state = 2335;
					this.revokeRoleManagement();
					}
					break;

				case 3:
					{
					this.state = 2336;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.ROLE || _la === CypherParser.ROLES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2337;
					this.revokeRole();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public enableServerCommand(): EnableServerCommandContext {
		let _localctx: EnableServerCommandContext = new EnableServerCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 310, CypherParser.RULE_enableServerCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2342;
			this.match(CypherParser.ENABLE);
			this.state = 2343;
			this.match(CypherParser.SERVER);
			this.state = 2344;
			this.stringOrParameter();
			this.state = 2346;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.OPTIONS) {
				{
				this.state = 2345;
				this.options_();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterServer(): AlterServerContext {
		let _localctx: AlterServerContext = new AlterServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 312, CypherParser.RULE_alterServer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2348;
			this.match(CypherParser.SERVER);
			this.state = 2349;
			this.stringOrParameter();
			this.state = 2350;
			this.match(CypherParser.SET);
			this.state = 2351;
			this.options_();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameServer(): RenameServerContext {
		let _localctx: RenameServerContext = new RenameServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 314, CypherParser.RULE_renameServer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2353;
			this.match(CypherParser.SERVER);
			this.state = 2354;
			this.stringOrParameter();
			this.state = 2355;
			this.match(CypherParser.TO);
			this.state = 2356;
			this.stringOrParameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropServer(): DropServerContext {
		let _localctx: DropServerContext = new DropServerContext(this._ctx, this.state);
		this.enterRule(_localctx, 316, CypherParser.RULE_dropServer);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2358;
			this.match(CypherParser.SERVER);
			this.state = 2359;
			this.stringOrParameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showServers(): ShowServersContext {
		let _localctx: ShowServersContext = new ShowServersContext(this._ctx, this.state);
		this.enterRule(_localctx, 318, CypherParser.RULE_showServers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2361;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.SERVER || _la === CypherParser.SERVERS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2367;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 2362;
				this.yieldClause();
				this.state = 2364;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 270, this._ctx) ) {
				case 1:
					{
					this.state = 2363;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 2366;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public allocationCommand(): AllocationCommandContext {
		let _localctx: AllocationCommandContext = new AllocationCommandContext(this._ctx, this.state);
		this.enterRule(_localctx, 320, CypherParser.RULE_allocationCommand);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2370;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.DRYRUN) {
				{
				this.state = 2369;
				this.match(CypherParser.DRYRUN);
				}
			}

			this.state = 2374;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DEALLOCATE:
				{
				this.state = 2372;
				this.deallocateDatabaseFromServers();
				}
				break;
			case CypherParser.REALLOCATE:
				{
				this.state = 2373;
				this.reallocateDatabases();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public deallocateDatabaseFromServers(): DeallocateDatabaseFromServersContext {
		let _localctx: DeallocateDatabaseFromServersContext = new DeallocateDatabaseFromServersContext(this._ctx, this.state);
		this.enterRule(_localctx, 322, CypherParser.RULE_deallocateDatabaseFromServers);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2376;
			this.match(CypherParser.DEALLOCATE);
			this.state = 2377;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.DATABASE || _la === CypherParser.DATABASES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2378;
			this.match(CypherParser.FROM);
			this.state = 2379;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.SERVER || _la === CypherParser.SERVERS)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2380;
			this.stringOrParameter();
			this.state = 2385;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 2381;
				this.match(CypherParser.COMMA);
				this.state = 2382;
				this.stringOrParameter();
				}
				}
				this.state = 2387;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public reallocateDatabases(): ReallocateDatabasesContext {
		let _localctx: ReallocateDatabasesContext = new ReallocateDatabasesContext(this._ctx, this.state);
		this.enterRule(_localctx, 324, CypherParser.RULE_reallocateDatabases);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2388;
			this.match(CypherParser.REALLOCATE);
			this.state = 2389;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.DATABASE || _la === CypherParser.DATABASES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createRole(): CreateRoleContext {
		let _localctx: CreateRoleContext = new CreateRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 326, CypherParser.RULE_createRole);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2391;
			this.match(CypherParser.ROLE);
			this.state = 2392;
			this.symbolicNameOrStringParameter();
			this.state = 2396;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 2393;
				this.match(CypherParser.IF);
				this.state = 2394;
				this.match(CypherParser.NOT);
				this.state = 2395;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 2402;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.AS) {
				{
				this.state = 2398;
				this.match(CypherParser.AS);
				this.state = 2399;
				this.match(CypherParser.COPY);
				this.state = 2400;
				this.match(CypherParser.OF);
				this.state = 2401;
				this.symbolicNameOrStringParameter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropRole(): DropRoleContext {
		let _localctx: DropRoleContext = new DropRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 328, CypherParser.RULE_dropRole);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2404;
			this.match(CypherParser.ROLE);
			this.state = 2405;
			this.symbolicNameOrStringParameter();
			this.state = 2408;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 2406;
				this.match(CypherParser.IF);
				this.state = 2407;
				this.match(CypherParser.EXISTS);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameRole(): RenameRoleContext {
		let _localctx: RenameRoleContext = new RenameRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 330, CypherParser.RULE_renameRole);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2410;
			this.match(CypherParser.ROLE);
			this.state = 2411;
			this.symbolicNameOrStringParameter();
			this.state = 2414;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 2412;
				this.match(CypherParser.IF);
				this.state = 2413;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 2416;
			this.match(CypherParser.TO);
			this.state = 2417;
			this.symbolicNameOrStringParameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRoles(): ShowRolesContext {
		let _localctx: ShowRolesContext = new ShowRolesContext(this._ctx, this.state);
		this.enterRule(_localctx, 332, CypherParser.RULE_showRoles);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2421;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 279, this._ctx) ) {
			case 1:
				{
				this.state = 2419;
				this.match(CypherParser.WITH);
				this.state = 2420;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.USER || _la === CypherParser.USERS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 2428;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 2423;
				this.yieldClause();
				this.state = 2425;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 280, this._ctx) ) {
				case 1:
					{
					this.state = 2424;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 2427;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantRole(): GrantRoleContext {
		let _localctx: GrantRoleContext = new GrantRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 334, CypherParser.RULE_grantRole);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2430;
			this.symbolicNameOrStringParameterList();
			this.state = 2431;
			this.match(CypherParser.TO);
			this.state = 2432;
			this.symbolicNameOrStringParameterList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeRole(): RevokeRoleContext {
		let _localctx: RevokeRoleContext = new RevokeRoleContext(this._ctx, this.state);
		this.enterRule(_localctx, 336, CypherParser.RULE_revokeRole);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2434;
			this.symbolicNameOrStringParameterList();
			this.state = 2435;
			this.match(CypherParser.FROM);
			this.state = 2436;
			this.symbolicNameOrStringParameterList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createUser(): CreateUserContext {
		let _localctx: CreateUserContext = new CreateUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 338, CypherParser.RULE_createUser);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2438;
			this.match(CypherParser.USER);
			this.state = 2439;
			this.symbolicNameOrStringParameter();
			this.state = 2443;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 2440;
				this.match(CypherParser.IF);
				this.state = 2441;
				this.match(CypherParser.NOT);
				this.state = 2442;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 2445;
			this.match(CypherParser.SET);
			this.state = 2447;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.ENCRYPTED || _la === CypherParser.PLAINTEXT) {
				{
				this.state = 2446;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.ENCRYPTED || _la === CypherParser.PLAINTEXT)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2449;
			this.match(CypherParser.PASSWORD);
			this.state = 2450;
			this.passwordExpression();
			this.state = 2452;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.CHANGE) {
				{
				this.state = 2451;
				this.passwordChangeRequired();
				}
			}

			this.state = 2463;
			this._errHandler.sync(this);
			_alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
			while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER) {
				if (_alt === 1) {
					{
					{
					this.state = 2454;
					this.match(CypherParser.SET);
					this.state = 2459;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.PASSWORD:
						{
						this.state = 2455;
						this.match(CypherParser.PASSWORD);
						this.state = 2456;
						this.passwordChangeRequired();
						}
						break;
					case CypherParser.STATUS:
						{
						this.state = 2457;
						this.userStatus();
						}
						break;
					case CypherParser.HOME:
						{
						this.state = 2458;
						this.homeDatabase();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
				}
				this.state = 2465;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 286, this._ctx);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropUser(): DropUserContext {
		let _localctx: DropUserContext = new DropUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 340, CypherParser.RULE_dropUser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2466;
			this.match(CypherParser.USER);
			this.state = 2467;
			this.symbolicNameOrStringParameter();
			this.state = 2470;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 2468;
				this.match(CypherParser.IF);
				this.state = 2469;
				this.match(CypherParser.EXISTS);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public renameUser(): RenameUserContext {
		let _localctx: RenameUserContext = new RenameUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 342, CypherParser.RULE_renameUser);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2472;
			this.match(CypherParser.USER);
			this.state = 2473;
			this.symbolicNameOrStringParameter();
			this.state = 2476;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 2474;
				this.match(CypherParser.IF);
				this.state = 2475;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 2478;
			this.match(CypherParser.TO);
			this.state = 2479;
			this.symbolicNameOrStringParameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterCurrentUser(): AlterCurrentUserContext {
		let _localctx: AlterCurrentUserContext = new AlterCurrentUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 344, CypherParser.RULE_alterCurrentUser);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2481;
			this.match(CypherParser.CURRENT);
			this.state = 2482;
			this.match(CypherParser.USER);
			this.state = 2483;
			this.match(CypherParser.SET);
			this.state = 2484;
			this.match(CypherParser.PASSWORD);
			this.state = 2485;
			this.match(CypherParser.FROM);
			this.state = 2486;
			this.passwordExpression();
			this.state = 2487;
			this.match(CypherParser.TO);
			this.state = 2488;
			this.passwordExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterUser(): AlterUserContext {
		let _localctx: AlterUserContext = new AlterUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 346, CypherParser.RULE_alterUser);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2490;
			this.match(CypherParser.USER);
			this.state = 2491;
			this.symbolicNameOrStringParameter();
			this.state = 2494;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 2492;
				this.match(CypherParser.IF);
				this.state = 2493;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 2528;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.SET:
				{
				this.state = 2521;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 2496;
						this.match(CypherParser.SET);
						this.state = 2519;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case CypherParser.PLAINTEXT:
							{
							this.state = 2497;
							this.match(CypherParser.PLAINTEXT);
							this.state = 2498;
							this.match(CypherParser.PASSWORD);
							this.state = 2499;
							this.setPassword();
							this.state = 2501;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === CypherParser.CHANGE) {
								{
								this.state = 2500;
								this.passwordChangeRequired();
								}
							}

							}
							break;
						case CypherParser.ENCRYPTED:
							{
							this.state = 2503;
							this.match(CypherParser.ENCRYPTED);
							this.state = 2504;
							this.match(CypherParser.PASSWORD);
							this.state = 2505;
							this.setPassword();
							this.state = 2507;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === CypherParser.CHANGE) {
								{
								this.state = 2506;
								this.passwordChangeRequired();
								}
							}

							}
							break;
						case CypherParser.PASSWORD:
							{
							this.state = 2509;
							this.match(CypherParser.PASSWORD);
							this.state = 2515;
							this._errHandler.sync(this);
							switch (this._input.LA(1)) {
							case CypherParser.CHANGE:
								{
								this.state = 2510;
								this.passwordChangeRequired();
								}
								break;
							case CypherParser.DOLLAR:
							case CypherParser.STRING_LITERAL1:
							case CypherParser.STRING_LITERAL2:
								{
								this.state = 2511;
								this.setPassword();
								this.state = 2513;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
								if (_la === CypherParser.CHANGE) {
									{
									this.state = 2512;
									this.passwordChangeRequired();
									}
								}

								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							}
							break;
						case CypherParser.STATUS:
							{
							this.state = 2517;
							this.userStatus();
							}
							break;
						case CypherParser.HOME:
							{
							this.state = 2518;
							this.homeDatabase();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2523;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 295, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			case CypherParser.REMOVE:
				{
				this.state = 2525;
				this.match(CypherParser.REMOVE);
				this.state = 2526;
				this.match(CypherParser.HOME);
				this.state = 2527;
				this.match(CypherParser.DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setPassword(): SetPasswordContext {
		let _localctx: SetPasswordContext = new SetPasswordContext(this._ctx, this.state);
		this.enterRule(_localctx, 348, CypherParser.RULE_setPassword);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2530;
			this.passwordExpression();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public passwordExpression(): PasswordExpressionContext {
		let _localctx: PasswordExpressionContext = new PasswordExpressionContext(this._ctx, this.state);
		this.enterRule(_localctx, 350, CypherParser.RULE_passwordExpression);
		try {
			this.state = 2534;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.STRING_LITERAL1:
			case CypherParser.STRING_LITERAL2:
				this.enterOuterAlt(_localctx, 1);
				{
				this.state = 2532;
				this.stringToken();
				}
				break;
			case CypherParser.DOLLAR:
				this.enterOuterAlt(_localctx, 2);
				{
				this.state = 2533;
				this.parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public passwordChangeRequired(): PasswordChangeRequiredContext {
		let _localctx: PasswordChangeRequiredContext = new PasswordChangeRequiredContext(this._ctx, this.state);
		this.enterRule(_localctx, 352, CypherParser.RULE_passwordChangeRequired);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2536;
			this.match(CypherParser.CHANGE);
			this.state = 2538;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.NOT) {
				{
				this.state = 2537;
				this.match(CypherParser.NOT);
				}
			}

			this.state = 2540;
			this.match(CypherParser.REQUIRED);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public userStatus(): UserStatusContext {
		let _localctx: UserStatusContext = new UserStatusContext(this._ctx, this.state);
		this.enterRule(_localctx, 354, CypherParser.RULE_userStatus);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2542;
			this.match(CypherParser.STATUS);
			this.state = 2543;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.ACTIVE || _la === CypherParser.SUSPENDED)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public homeDatabase(): HomeDatabaseContext {
		let _localctx: HomeDatabaseContext = new HomeDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 356, CypherParser.RULE_homeDatabase);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2545;
			this.match(CypherParser.HOME);
			this.state = 2546;
			this.match(CypherParser.DATABASE);
			this.state = 2547;
			this.symbolicAliasName();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showUsers(): ShowUsersContext {
		let _localctx: ShowUsersContext = new ShowUsersContext(this._ctx, this.state);
		this.enterRule(_localctx, 358, CypherParser.RULE_showUsers);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2554;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 2549;
				this.yieldClause();
				this.state = 2551;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 299, this._ctx) ) {
				case 1:
					{
					this.state = 2550;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 2553;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showCurrentUser(): ShowCurrentUserContext {
		let _localctx: ShowCurrentUserContext = new ShowCurrentUserContext(this._ctx, this.state);
		this.enterRule(_localctx, 360, CypherParser.RULE_showCurrentUser);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2556;
			this.match(CypherParser.CURRENT);
			this.state = 2557;
			this.match(CypherParser.USER);
			this.state = 2563;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 2558;
				this.yieldClause();
				this.state = 2560;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 301, this._ctx) ) {
				case 1:
					{
					this.state = 2559;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 2562;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showPrivileges(): ShowPrivilegesContext {
		let _localctx: ShowPrivilegesContext = new ShowPrivilegesContext(this._ctx, this.state);
		this.enterRule(_localctx, 362, CypherParser.RULE_showPrivileges);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2565;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.PRIVILEGE || _la === CypherParser.PRIVILEGES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2571;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.AS) {
				{
				this.state = 2566;
				this.match(CypherParser.AS);
				this.state = 2568;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.REVOKE) {
					{
					this.state = 2567;
					this.match(CypherParser.REVOKE);
					}
				}

				this.state = 2570;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.COMMAND || _la === CypherParser.COMMANDS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2578;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 2573;
				this.yieldClause();
				this.state = 2575;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 305, this._ctx) ) {
				case 1:
					{
					this.state = 2574;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 2577;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showRolePrivileges(): ShowRolePrivilegesContext {
		let _localctx: ShowRolePrivilegesContext = new ShowRolePrivilegesContext(this._ctx, this.state);
		this.enterRule(_localctx, 364, CypherParser.RULE_showRolePrivileges);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2580;
			this.symbolicNameOrStringParameterList();
			this.state = 2581;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.PRIVILEGE || _la === CypherParser.PRIVILEGES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 2587;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.AS) {
				{
				this.state = 2582;
				this.match(CypherParser.AS);
				this.state = 2584;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.REVOKE) {
					{
					this.state = 2583;
					this.match(CypherParser.REVOKE);
					}
				}

				this.state = 2586;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.COMMAND || _la === CypherParser.COMMANDS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2594;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 2589;
				this.yieldClause();
				this.state = 2591;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 309, this._ctx) ) {
				case 1:
					{
					this.state = 2590;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 2593;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showUserPrivileges(): ShowUserPrivilegesContext {
		let _localctx: ShowUserPrivilegesContext = new ShowUserPrivilegesContext(this._ctx, this.state);
		this.enterRule(_localctx, 366, CypherParser.RULE_showUserPrivileges);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2603;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 311, this._ctx) ) {
			case 1:
				{
				this.state = 2596;
				this.symbolicNameOrStringParameterList();
				this.state = 2597;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.PRIVILEGE || _la === CypherParser.PRIVILEGES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 2:
				{
				this.state = 2599;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.PRIVILEGE || _la === CypherParser.PRIVILEGES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;

			case 3:
				{
				this.state = 2600;
				this.symbolicNameOrStringParameterList();
				this.state = 2601;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.PRIVILEGE || _la === CypherParser.PRIVILEGES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			}
			this.state = 2610;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.AS) {
				{
				this.state = 2605;
				this.match(CypherParser.AS);
				this.state = 2607;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.REVOKE) {
					{
					this.state = 2606;
					this.match(CypherParser.REVOKE);
					}
				}

				this.state = 2609;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.COMMAND || _la === CypherParser.COMMANDS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
			}

			this.state = 2617;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 2612;
				this.yieldClause();
				this.state = 2614;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 314, this._ctx) ) {
				case 1:
					{
					this.state = 2613;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 2616;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantRoleManagement(): GrantRoleManagementContext {
		let _localctx: GrantRoleManagementContext = new GrantRoleManagementContext(this._ctx, this.state);
		this.enterRule(_localctx, 368, CypherParser.RULE_grantRoleManagement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2619;
			this.roleManagementPrivilege();
			this.state = 2620;
			this.match(CypherParser.TO);
			this.state = 2621;
			this.symbolicNameOrStringParameterList();
			this.state = 2622;
			this.grantPrivilege();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokeRoleManagement(): RevokeRoleManagementContext {
		let _localctx: RevokeRoleManagementContext = new RevokeRoleManagementContext(this._ctx, this.state);
		this.enterRule(_localctx, 370, CypherParser.RULE_revokeRoleManagement);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2624;
			this.roleManagementPrivilege();
			this.state = 2625;
			this.match(CypherParser.FROM);
			this.state = 2626;
			this.symbolicNameOrStringParameterList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public roleManagementPrivilege(): RoleManagementPrivilegeContext {
		let _localctx: RoleManagementPrivilegeContext = new RoleManagementPrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 372, CypherParser.RULE_roleManagementPrivilege);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2628;
			this.match(CypherParser.MANAGEMENT);
			this.state = 2629;
			this.match(CypherParser.ON);
			this.state = 2630;
			this.match(CypherParser.DBMS);
			this.state = 2631;
			this.dbmsPrivilege();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public grantPrivilege(): GrantPrivilegeContext {
		let _localctx: GrantPrivilegeContext = new GrantPrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 374, CypherParser.RULE_grantPrivilege);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2633;
			this.privilege();
			this.state = 2634;
			this.match(CypherParser.TO);
			this.state = 2635;
			this.symbolicNameOrStringParameterList();
			this.state = 2636;
			this.grantPrivilege();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public denyPrivilege(): DenyPrivilegeContext {
		let _localctx: DenyPrivilegeContext = new DenyPrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 376, CypherParser.RULE_denyPrivilege);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2638;
			this.match(CypherParser.DENY);
			this.state = 2640;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IMMUTABLE) {
				{
				this.state = 2639;
				this.match(CypherParser.IMMUTABLE);
				}
			}

			this.state = 2645;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
			case CypherParser.ALIAS:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.ASSIGN:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CREATE:
			case CypherParser.DATABASE:
			case CypherParser.DELETE:
			case CypherParser.DROP:
			case CypherParser.EXECUTE:
			case CypherParser.IMPERSONATE:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.PRIVILEGE:
			case CypherParser.READ:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.SERVER:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.TRANSACTION:
			case CypherParser.TRAVERSE:
			case CypherParser.USER:
			case CypherParser.WRITE:
				{
				this.state = 2642;
				this.privilege();
				}
				break;
			case CypherParser.ROLE:
				{
				this.state = 2643;
				this.match(CypherParser.ROLE);
				this.state = 2644;
				this.roleManagementPrivilege();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2647;
			this.match(CypherParser.TO);
			this.state = 2648;
			this.symbolicNameOrStringParameterList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public revokePrivilege(): RevokePrivilegeContext {
		let _localctx: RevokePrivilegeContext = new RevokePrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 378, CypherParser.RULE_revokePrivilege);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2650;
			this.privilege();
			this.state = 2651;
			this.match(CypherParser.FROM);
			this.state = 2652;
			this.symbolicNameOrStringParameterList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public privilege(): PrivilegeContext {
		let _localctx: PrivilegeContext = new PrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 380, CypherParser.RULE_privilege);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2665;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ALL:
				{
				this.state = 2654;
				this.allPrivilege();
				}
				break;
			case CypherParser.CREATE:
				{
				this.state = 2655;
				this.createPrivilege();
				}
				break;
			case CypherParser.DROP:
				{
				this.state = 2656;
				this.dropPrivilege();
				}
				break;
			case CypherParser.SHOW:
				{
				this.state = 2657;
				this.showPrivilege();
				}
				break;
			case CypherParser.SET:
				{
				this.state = 2658;
				this.setPrivilege();
				}
				break;
			case CypherParser.REMOVE:
				{
				this.state = 2659;
				this.removePrivilege();
				}
				break;
			case CypherParser.ACCESS:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.NAME:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.TRANSACTION:
				{
				this.state = 2660;
				this.databasePrivilege();
				}
				break;
			case CypherParser.ALIAS:
			case CypherParser.ALTER:
			case CypherParser.ASSIGN:
			case CypherParser.COMPOSITE:
			case CypherParser.DATABASE:
			case CypherParser.EXECUTE:
			case CypherParser.IMPERSONATE:
			case CypherParser.PRIVILEGE:
			case CypherParser.RENAME:
			case CypherParser.SERVER:
			case CypherParser.USER:
				{
				this.state = 2661;
				this.dbmsPrivilege();
				}
				break;
			case CypherParser.WRITE:
				{
				this.state = 2662;
				this.writePrivilege();
				}
				break;
			case CypherParser.DELETE:
			case CypherParser.MERGE:
				{
				this.state = 2663;
				this.qualifiedGraphPrivileges();
				}
				break;
			case CypherParser.MATCH:
			case CypherParser.READ:
			case CypherParser.TRAVERSE:
				{
				this.state = 2664;
				this.qualifiedGraphPrivilegesWithProperty();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public allPrivilege(): AllPrivilegeContext {
		let _localctx: AllPrivilegeContext = new AllPrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 382, CypherParser.RULE_allPrivilege);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2667;
			this.match(CypherParser.ALL);
			this.state = 2672;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.DATABASE || _la === CypherParser.DBMS || _la === CypherParser.GRAPH || _la === CypherParser.PRIVILEGES) {
				{
				this.state = 2669;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.DATABASE || _la === CypherParser.DBMS || _la === CypherParser.GRAPH) {
					{
					this.state = 2668;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.DATABASE || _la === CypherParser.DBMS || _la === CypherParser.GRAPH)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
				}

				this.state = 2671;
				this.match(CypherParser.PRIVILEGES);
				}
			}

			this.state = 2674;
			this.match(CypherParser.ON);
			this.state = 2700;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DEFAULT_TOKEN:
				{
				this.state = 2675;
				this.match(CypherParser.DEFAULT_TOKEN);
				this.state = 2679;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.GRAPH:
					{
					this.state = 2676;
					this.match(CypherParser.GRAPH);
					}
					break;
				case CypherParser.DATABASE:
					{
					this.state = 2677;
					this.match(CypherParser.DATABASE);
					this.state = 2678;
					this.databasePrivilege();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.HOME:
				{
				this.state = 2681;
				this.match(CypherParser.HOME);
				this.state = 2685;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.GRAPH:
					{
					this.state = 2682;
					this.match(CypherParser.GRAPH);
					}
					break;
				case CypherParser.DATABASE:
					{
					this.state = 2683;
					this.match(CypherParser.DATABASE);
					this.state = 2684;
					this.databasePrivilege();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.DBMS:
				{
				this.state = 2687;
				this.match(CypherParser.DBMS);
				this.state = 2688;
				this.dbmsPrivilege();
				}
				break;
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
				{
				this.state = 2689;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.GRAPH || _la === CypherParser.GRAPHS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2692;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TIMES:
					{
					this.state = 2690;
					this.match(CypherParser.TIMES);
					}
					break;
				case CypherParser.ACCESS:
				case CypherParser.ACTIVE:
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
				case CypherParser.ALIAS:
				case CypherParser.ALIASES:
				case CypherParser.ALL_SHORTEST_PATH:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.AND:
				case CypherParser.ANY:
				case CypherParser.AS:
				case CypherParser.ASC:
				case CypherParser.ASSERT:
				case CypherParser.ASSIGN:
				case CypherParser.AT:
				case CypherParser.BOOSTED:
				case CypherParser.BREAK:
				case CypherParser.BRIEF:
				case CypherParser.BTREE:
				case CypherParser.BUILT:
				case CypherParser.BY:
				case CypherParser.CALL:
				case CypherParser.CASE:
				case CypherParser.CHANGE:
				case CypherParser.COMMAND:
				case CypherParser.COMMANDS:
				case CypherParser.COMMIT:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CONTAINS:
				case CypherParser.COPY:
				case CypherParser.CONTINUE:
				case CypherParser.COUNT:
				case CypherParser.CREATE:
				case CypherParser.CSV:
				case CypherParser.CURRENT:
				case CypherParser.DATA:
				case CypherParser.DATABASE:
				case CypherParser.DATABASES:
				case CypherParser.DBMS:
				case CypherParser.DEALLOCATE:
				case CypherParser.DEFAULT_TOKEN:
				case CypherParser.DEFINED:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DESC:
				case CypherParser.DESTROY:
				case CypherParser.DETACH:
				case CypherParser.DOLLAR:
				case CypherParser.DISTINCT:
				case CypherParser.DRIVER:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.DUMP:
				case CypherParser.EACH:
				case CypherParser.ENABLE:
				case CypherParser.ELEMENT:
				case CypherParser.ELEMENTS:
				case CypherParser.ELSE:
				case CypherParser.ENCRYPTED:
				case CypherParser.END:
				case CypherParser.ENDS:
				case CypherParser.EXECUTABLE:
				case CypherParser.EXECUTE:
				case CypherParser.EXIST:
				case CypherParser.EXISTENCE:
				case CypherParser.EXISTS:
				case CypherParser.ERROR:
				case CypherParser.FAIL:
				case CypherParser.FALSE:
				case CypherParser.FIELDTERMINATOR:
				case CypherParser.FOR:
				case CypherParser.FOREACH:
				case CypherParser.FROM:
				case CypherParser.FULLTEXT:
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.GRANT:
				case CypherParser.GRAPH:
				case CypherParser.GRAPHS:
				case CypherParser.HEADERS:
				case CypherParser.HOME:
				case CypherParser.IF:
				case CypherParser.IMMUTABLE:
				case CypherParser.IN:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.INF:
				case CypherParser.INFINITY:
				case CypherParser.IS:
				case CypherParser.JOIN:
				case CypherParser.KEY:
				case CypherParser.LABEL:
				case CypherParser.LABELS:
				case CypherParser.LIMITROWS:
				case CypherParser.LOAD:
				case CypherParser.LOOKUP:
				case CypherParser.MANAGEMENT:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.NAMES:
				case CypherParser.NAN:
				case CypherParser.NEW:
				case CypherParser.NODE:
				case CypherParser.NODES:
				case CypherParser.NONE:
				case CypherParser.NOT:
				case CypherParser.NOWAIT:
				case CypherParser.NULL:
				case CypherParser.OF:
				case CypherParser.ON:
				case CypherParser.ONLY:
				case CypherParser.OPTIONAL:
				case CypherParser.OPTIONS:
				case CypherParser.OPTION:
				case CypherParser.OR:
				case CypherParser.ORDER:
				case CypherParser.OUTPUT:
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
				case CypherParser.PERIODIC:
				case CypherParser.PLAINTEXT:
				case CypherParser.POINT:
				case CypherParser.POPULATED:
				case CypherParser.PRIMARY:
				case CypherParser.PRIMARIES:
				case CypherParser.PRIVILEGE:
				case CypherParser.PRIVILEGES:
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
				case CypherParser.PROPERTIES:
				case CypherParser.PROPERTY:
				case CypherParser.RANGE:
				case CypherParser.READ:
				case CypherParser.REALLOCATE:
				case CypherParser.REDUCE:
				case CypherParser.RENAME:
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
				case CypherParser.RELATIONSHIPS:
				case CypherParser.REMOVE:
				case CypherParser.REPLACE:
				case CypherParser.REPORT:
				case CypherParser.REQUIRE:
				case CypherParser.REQUIRED:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.ROLE:
				case CypherParser.ROLES:
				case CypherParser.ROW:
				case CypherParser.ROWS:
				case CypherParser.SCAN:
				case CypherParser.SEC:
				case CypherParser.SECOND:
				case CypherParser.SECONDARY:
				case CypherParser.SECONDARIES:
				case CypherParser.SECONDS:
				case CypherParser.SEEK:
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
				case CypherParser.SET:
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
				case CypherParser.SHORTEST_PATH:
				case CypherParser.SHOW:
				case CypherParser.SINGLE:
				case CypherParser.SKIPROWS:
				case CypherParser.START:
				case CypherParser.STARTS:
				case CypherParser.STATUS:
				case CypherParser.STOP:
				case CypherParser.SUSPENDED:
				case CypherParser.TARGET:
				case CypherParser.TERMINATE:
				case CypherParser.TEXT:
				case CypherParser.THEN:
				case CypherParser.TO:
				case CypherParser.TOPOLOGY:
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
				case CypherParser.TRAVERSE:
				case CypherParser.TRUE:
				case CypherParser.TYPE:
				case CypherParser.TYPES:
				case CypherParser.UNION:
				case CypherParser.UNIQUE:
				case CypherParser.UNIQUENESS:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USER:
				case CypherParser.USERS:
				case CypherParser.USING:
				case CypherParser.VERBOSE:
				case CypherParser.WAIT:
				case CypherParser.WHEN:
				case CypherParser.WHERE:
				case CypherParser.WITH:
				case CypherParser.WRITE:
				case CypherParser.XOR:
				case CypherParser.YIELD:
				case CypherParser.IDENTIFIER:
				case CypherParser.ESCAPED_SYMBOLIC_NAME:
					{
					this.state = 2691;
					this.symbolicAliasNameList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
				{
				this.state = 2694;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.DATABASE || _la === CypherParser.DATABASES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2697;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TIMES:
					{
					this.state = 2695;
					this.match(CypherParser.TIMES);
					}
					break;
				case CypherParser.ACCESS:
				case CypherParser.ACTIVE:
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
				case CypherParser.ALIAS:
				case CypherParser.ALIASES:
				case CypherParser.ALL_SHORTEST_PATH:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.AND:
				case CypherParser.ANY:
				case CypherParser.AS:
				case CypherParser.ASC:
				case CypherParser.ASSERT:
				case CypherParser.ASSIGN:
				case CypherParser.AT:
				case CypherParser.BOOSTED:
				case CypherParser.BREAK:
				case CypherParser.BRIEF:
				case CypherParser.BTREE:
				case CypherParser.BUILT:
				case CypherParser.BY:
				case CypherParser.CALL:
				case CypherParser.CASE:
				case CypherParser.CHANGE:
				case CypherParser.COMMAND:
				case CypherParser.COMMANDS:
				case CypherParser.COMMIT:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CONTAINS:
				case CypherParser.COPY:
				case CypherParser.CONTINUE:
				case CypherParser.COUNT:
				case CypherParser.CREATE:
				case CypherParser.CSV:
				case CypherParser.CURRENT:
				case CypherParser.DATA:
				case CypherParser.DATABASE:
				case CypherParser.DATABASES:
				case CypherParser.DBMS:
				case CypherParser.DEALLOCATE:
				case CypherParser.DEFAULT_TOKEN:
				case CypherParser.DEFINED:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DESC:
				case CypherParser.DESTROY:
				case CypherParser.DETACH:
				case CypherParser.DOLLAR:
				case CypherParser.DISTINCT:
				case CypherParser.DRIVER:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.DUMP:
				case CypherParser.EACH:
				case CypherParser.ENABLE:
				case CypherParser.ELEMENT:
				case CypherParser.ELEMENTS:
				case CypherParser.ELSE:
				case CypherParser.ENCRYPTED:
				case CypherParser.END:
				case CypherParser.ENDS:
				case CypherParser.EXECUTABLE:
				case CypherParser.EXECUTE:
				case CypherParser.EXIST:
				case CypherParser.EXISTENCE:
				case CypherParser.EXISTS:
				case CypherParser.ERROR:
				case CypherParser.FAIL:
				case CypherParser.FALSE:
				case CypherParser.FIELDTERMINATOR:
				case CypherParser.FOR:
				case CypherParser.FOREACH:
				case CypherParser.FROM:
				case CypherParser.FULLTEXT:
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.GRANT:
				case CypherParser.GRAPH:
				case CypherParser.GRAPHS:
				case CypherParser.HEADERS:
				case CypherParser.HOME:
				case CypherParser.IF:
				case CypherParser.IMMUTABLE:
				case CypherParser.IN:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.INF:
				case CypherParser.INFINITY:
				case CypherParser.IS:
				case CypherParser.JOIN:
				case CypherParser.KEY:
				case CypherParser.LABEL:
				case CypherParser.LABELS:
				case CypherParser.LIMITROWS:
				case CypherParser.LOAD:
				case CypherParser.LOOKUP:
				case CypherParser.MANAGEMENT:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.NAMES:
				case CypherParser.NAN:
				case CypherParser.NEW:
				case CypherParser.NODE:
				case CypherParser.NODES:
				case CypherParser.NONE:
				case CypherParser.NOT:
				case CypherParser.NOWAIT:
				case CypherParser.NULL:
				case CypherParser.OF:
				case CypherParser.ON:
				case CypherParser.ONLY:
				case CypherParser.OPTIONAL:
				case CypherParser.OPTIONS:
				case CypherParser.OPTION:
				case CypherParser.OR:
				case CypherParser.ORDER:
				case CypherParser.OUTPUT:
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
				case CypherParser.PERIODIC:
				case CypherParser.PLAINTEXT:
				case CypherParser.POINT:
				case CypherParser.POPULATED:
				case CypherParser.PRIMARY:
				case CypherParser.PRIMARIES:
				case CypherParser.PRIVILEGE:
				case CypherParser.PRIVILEGES:
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
				case CypherParser.PROPERTIES:
				case CypherParser.PROPERTY:
				case CypherParser.RANGE:
				case CypherParser.READ:
				case CypherParser.REALLOCATE:
				case CypherParser.REDUCE:
				case CypherParser.RENAME:
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
				case CypherParser.RELATIONSHIPS:
				case CypherParser.REMOVE:
				case CypherParser.REPLACE:
				case CypherParser.REPORT:
				case CypherParser.REQUIRE:
				case CypherParser.REQUIRED:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.ROLE:
				case CypherParser.ROLES:
				case CypherParser.ROW:
				case CypherParser.ROWS:
				case CypherParser.SCAN:
				case CypherParser.SEC:
				case CypherParser.SECOND:
				case CypherParser.SECONDARY:
				case CypherParser.SECONDARIES:
				case CypherParser.SECONDS:
				case CypherParser.SEEK:
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
				case CypherParser.SET:
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
				case CypherParser.SHORTEST_PATH:
				case CypherParser.SHOW:
				case CypherParser.SINGLE:
				case CypherParser.SKIPROWS:
				case CypherParser.START:
				case CypherParser.STARTS:
				case CypherParser.STATUS:
				case CypherParser.STOP:
				case CypherParser.SUSPENDED:
				case CypherParser.TARGET:
				case CypherParser.TERMINATE:
				case CypherParser.TEXT:
				case CypherParser.THEN:
				case CypherParser.TO:
				case CypherParser.TOPOLOGY:
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
				case CypherParser.TRAVERSE:
				case CypherParser.TRUE:
				case CypherParser.TYPE:
				case CypherParser.TYPES:
				case CypherParser.UNION:
				case CypherParser.UNIQUE:
				case CypherParser.UNIQUENESS:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USER:
				case CypherParser.USERS:
				case CypherParser.USING:
				case CypherParser.VERBOSE:
				case CypherParser.WAIT:
				case CypherParser.WHEN:
				case CypherParser.WHERE:
				case CypherParser.WITH:
				case CypherParser.WRITE:
				case CypherParser.XOR:
				case CypherParser.YIELD:
				case CypherParser.IDENTIFIER:
				case CypherParser.ESCAPED_SYMBOLIC_NAME:
					{
					this.state = 2696;
					this.symbolicAliasNameList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2699;
				this.databasePrivilege();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createPrivilege(): CreatePrivilegeContext {
		let _localctx: CreatePrivilegeContext = new CreatePrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 384, CypherParser.RULE_createPrivilege);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2702;
			this.match(CypherParser.CREATE);
			this.state = 2741;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.NEW:
				{
				this.state = 2720;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
					{
					this.state = 2703;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.INDEX || _la === CypherParser.INDEXES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
					{
					this.state = 2704;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.CONSTRAINT || _la === CypherParser.CONSTRAINTS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case CypherParser.NEW:
					{
					this.state = 2705;
					this.match(CypherParser.NEW);
					this.state = 2718;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.LABEL:
					case CypherParser.LABELS:
					case CypherParser.NODE:
						{
						this.state = 2707;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === CypherParser.NODE) {
							{
							this.state = 2706;
							this.match(CypherParser.NODE);
							}
						}

						this.state = 2709;
						_la = this._input.LA(1);
						if (!(_la === CypherParser.LABEL || _la === CypherParser.LABELS)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case CypherParser.RELATIONSHIP:
					case CypherParser.TYPE:
					case CypherParser.TYPES:
						{
						this.state = 2711;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === CypherParser.RELATIONSHIP) {
							{
							this.state = 2710;
							this.match(CypherParser.RELATIONSHIP);
							}
						}

						this.state = 2713;
						_la = this._input.LA(1);
						if (!(_la === CypherParser.TYPE || _la === CypherParser.TYPES)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case CypherParser.NAME:
					case CypherParser.NAMES:
					case CypherParser.PROPERTY:
						{
						this.state = 2715;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === CypherParser.PROPERTY) {
							{
							this.state = 2714;
							this.match(CypherParser.PROPERTY);
							}
						}

						this.state = 2717;
						_la = this._input.LA(1);
						if (!(_la === CypherParser.NAME || _la === CypherParser.NAMES)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2722;
				this.match(CypherParser.ON);
				this.state = 2723;
				this.databaseScopeList();
				this.state = 2724;
				this.databasePrivilege();
				}
				break;
			case CypherParser.ALIAS:
			case CypherParser.COMPOSITE:
			case CypherParser.DATABASE:
			case CypherParser.ROLE:
			case CypherParser.USER:
				{
				this.state = 2732;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.DATABASE:
					{
					this.state = 2726;
					this.match(CypherParser.DATABASE);
					}
					break;
				case CypherParser.ALIAS:
					{
					this.state = 2727;
					this.match(CypherParser.ALIAS);
					}
					break;
				case CypherParser.ROLE:
					{
					this.state = 2728;
					this.match(CypherParser.ROLE);
					}
					break;
				case CypherParser.USER:
					{
					this.state = 2729;
					this.match(CypherParser.USER);
					}
					break;
				case CypherParser.COMPOSITE:
					{
					this.state = 2730;
					this.match(CypherParser.COMPOSITE);
					this.state = 2731;
					this.match(CypherParser.DATABASE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2734;
				this.match(CypherParser.ON);
				this.state = 2735;
				this.match(CypherParser.DBMS);
				this.state = 2736;
				this.dbmsPrivilege();
				}
				break;
			case CypherParser.ON:
				{
				this.state = 2737;
				this.match(CypherParser.ON);
				this.state = 2738;
				this.graphScopeList();
				this.state = 2739;
				this.graphQualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropPrivilege(): DropPrivilegeContext {
		let _localctx: DropPrivilegeContext = new DropPrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 386, CypherParser.RULE_dropPrivilege);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2743;
			this.match(CypherParser.DROP);
			this.state = 2763;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
				{
				this.state = 2746;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
					{
					this.state = 2744;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.INDEX || _la === CypherParser.INDEXES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
					{
					this.state = 2745;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.CONSTRAINT || _la === CypherParser.CONSTRAINTS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2748;
				this.match(CypherParser.ON);
				this.state = 2749;
				this.databaseScopeList();
				this.state = 2750;
				this.databasePrivilege();
				}
				break;
			case CypherParser.ALIAS:
			case CypherParser.COMPOSITE:
			case CypherParser.DATABASE:
			case CypherParser.ROLE:
			case CypherParser.USER:
				{
				this.state = 2758;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.DATABASE:
					{
					this.state = 2752;
					this.match(CypherParser.DATABASE);
					}
					break;
				case CypherParser.ALIAS:
					{
					this.state = 2753;
					this.match(CypherParser.ALIAS);
					}
					break;
				case CypherParser.ROLE:
					{
					this.state = 2754;
					this.match(CypherParser.ROLE);
					}
					break;
				case CypherParser.USER:
					{
					this.state = 2755;
					this.match(CypherParser.USER);
					}
					break;
				case CypherParser.COMPOSITE:
					{
					this.state = 2756;
					this.match(CypherParser.COMPOSITE);
					this.state = 2757;
					this.match(CypherParser.DATABASE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2760;
				this.match(CypherParser.ON);
				this.state = 2761;
				this.match(CypherParser.DBMS);
				this.state = 2762;
				this.dbmsPrivilege();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showPrivilege(): ShowPrivilegeContext {
		let _localctx: ShowPrivilegeContext = new ShowPrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 388, CypherParser.RULE_showPrivilege);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2765;
			this.match(CypherParser.SHOW);
			this.state = 2795;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
				{
				this.state = 2777;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
					{
					this.state = 2766;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.INDEX || _la === CypherParser.INDEXES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
					{
					this.state = 2767;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.CONSTRAINT || _la === CypherParser.CONSTRAINTS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
					{
					this.state = 2768;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.TRANSACTION || _la === CypherParser.TRANSACTIONS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2775;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.LPAREN) {
						{
						this.state = 2769;
						this.match(CypherParser.LPAREN);
						this.state = 2772;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case CypherParser.TIMES:
							{
							this.state = 2770;
							this.match(CypherParser.TIMES);
							}
							break;
						case CypherParser.ACCESS:
						case CypherParser.ACTIVE:
						case CypherParser.ADMIN:
						case CypherParser.ADMINISTRATOR:
						case CypherParser.ALIAS:
						case CypherParser.ALIASES:
						case CypherParser.ALL_SHORTEST_PATH:
						case CypherParser.ALL:
						case CypherParser.ALTER:
						case CypherParser.AND:
						case CypherParser.ANY:
						case CypherParser.AS:
						case CypherParser.ASC:
						case CypherParser.ASSERT:
						case CypherParser.ASSIGN:
						case CypherParser.AT:
						case CypherParser.BOOSTED:
						case CypherParser.BREAK:
						case CypherParser.BRIEF:
						case CypherParser.BTREE:
						case CypherParser.BUILT:
						case CypherParser.BY:
						case CypherParser.CALL:
						case CypherParser.CASE:
						case CypherParser.CHANGE:
						case CypherParser.COMMAND:
						case CypherParser.COMMANDS:
						case CypherParser.COMMIT:
						case CypherParser.COMPOSITE:
						case CypherParser.CONSTRAINT:
						case CypherParser.CONSTRAINTS:
						case CypherParser.CONTAINS:
						case CypherParser.COPY:
						case CypherParser.CONTINUE:
						case CypherParser.COUNT:
						case CypherParser.CREATE:
						case CypherParser.CSV:
						case CypherParser.CURRENT:
						case CypherParser.DATA:
						case CypherParser.DATABASE:
						case CypherParser.DATABASES:
						case CypherParser.DBMS:
						case CypherParser.DEALLOCATE:
						case CypherParser.DEFAULT_TOKEN:
						case CypherParser.DEFINED:
						case CypherParser.DELETE:
						case CypherParser.DENY:
						case CypherParser.DESC:
						case CypherParser.DESTROY:
						case CypherParser.DETACH:
						case CypherParser.DOLLAR:
						case CypherParser.DISTINCT:
						case CypherParser.DRIVER:
						case CypherParser.DROP:
						case CypherParser.DRYRUN:
						case CypherParser.DUMP:
						case CypherParser.EACH:
						case CypherParser.ENABLE:
						case CypherParser.ELEMENT:
						case CypherParser.ELEMENTS:
						case CypherParser.ELSE:
						case CypherParser.ENCRYPTED:
						case CypherParser.END:
						case CypherParser.ENDS:
						case CypherParser.EXECUTABLE:
						case CypherParser.EXECUTE:
						case CypherParser.EXIST:
						case CypherParser.EXISTENCE:
						case CypherParser.EXISTS:
						case CypherParser.ERROR:
						case CypherParser.FAIL:
						case CypherParser.FALSE:
						case CypherParser.FIELDTERMINATOR:
						case CypherParser.FOR:
						case CypherParser.FOREACH:
						case CypherParser.FROM:
						case CypherParser.FULLTEXT:
						case CypherParser.FUNCTION:
						case CypherParser.FUNCTIONS:
						case CypherParser.GRANT:
						case CypherParser.GRAPH:
						case CypherParser.GRAPHS:
						case CypherParser.HEADERS:
						case CypherParser.HOME:
						case CypherParser.IF:
						case CypherParser.IMMUTABLE:
						case CypherParser.IN:
						case CypherParser.INDEX:
						case CypherParser.INDEXES:
						case CypherParser.INF:
						case CypherParser.INFINITY:
						case CypherParser.IS:
						case CypherParser.JOIN:
						case CypherParser.KEY:
						case CypherParser.LABEL:
						case CypherParser.LABELS:
						case CypherParser.LIMITROWS:
						case CypherParser.LOAD:
						case CypherParser.LOOKUP:
						case CypherParser.MANAGEMENT:
						case CypherParser.MATCH:
						case CypherParser.MERGE:
						case CypherParser.NAME:
						case CypherParser.NAMES:
						case CypherParser.NAN:
						case CypherParser.NEW:
						case CypherParser.NODE:
						case CypherParser.NODES:
						case CypherParser.NONE:
						case CypherParser.NOT:
						case CypherParser.NOWAIT:
						case CypherParser.NULL:
						case CypherParser.OF:
						case CypherParser.ON:
						case CypherParser.ONLY:
						case CypherParser.OPTIONAL:
						case CypherParser.OPTIONS:
						case CypherParser.OPTION:
						case CypherParser.OR:
						case CypherParser.ORDER:
						case CypherParser.OUTPUT:
						case CypherParser.PASSWORD:
						case CypherParser.PASSWORDS:
						case CypherParser.PERIODIC:
						case CypherParser.PLAINTEXT:
						case CypherParser.POINT:
						case CypherParser.POPULATED:
						case CypherParser.PRIMARY:
						case CypherParser.PRIMARIES:
						case CypherParser.PRIVILEGE:
						case CypherParser.PRIVILEGES:
						case CypherParser.PROCEDURE:
						case CypherParser.PROCEDURES:
						case CypherParser.PROPERTIES:
						case CypherParser.PROPERTY:
						case CypherParser.RANGE:
						case CypherParser.READ:
						case CypherParser.REALLOCATE:
						case CypherParser.REDUCE:
						case CypherParser.RENAME:
						case CypherParser.REL:
						case CypherParser.RELATIONSHIP:
						case CypherParser.RELATIONSHIPS:
						case CypherParser.REMOVE:
						case CypherParser.REPLACE:
						case CypherParser.REPORT:
						case CypherParser.REQUIRE:
						case CypherParser.REQUIRED:
						case CypherParser.RETURN:
						case CypherParser.REVOKE:
						case CypherParser.ROLE:
						case CypherParser.ROLES:
						case CypherParser.ROW:
						case CypherParser.ROWS:
						case CypherParser.SCAN:
						case CypherParser.SEC:
						case CypherParser.SECOND:
						case CypherParser.SECONDARY:
						case CypherParser.SECONDARIES:
						case CypherParser.SECONDS:
						case CypherParser.SEEK:
						case CypherParser.SERVER:
						case CypherParser.SERVERS:
						case CypherParser.SET:
						case CypherParser.SETTING:
						case CypherParser.SETTINGS:
						case CypherParser.SHORTEST_PATH:
						case CypherParser.SHOW:
						case CypherParser.SINGLE:
						case CypherParser.SKIPROWS:
						case CypherParser.START:
						case CypherParser.STARTS:
						case CypherParser.STATUS:
						case CypherParser.STOP:
						case CypherParser.SUSPENDED:
						case CypherParser.TARGET:
						case CypherParser.TERMINATE:
						case CypherParser.TEXT:
						case CypherParser.THEN:
						case CypherParser.TO:
						case CypherParser.TOPOLOGY:
						case CypherParser.TRANSACTION:
						case CypherParser.TRANSACTIONS:
						case CypherParser.TRAVERSE:
						case CypherParser.TRUE:
						case CypherParser.TYPE:
						case CypherParser.TYPES:
						case CypherParser.UNION:
						case CypherParser.UNIQUE:
						case CypherParser.UNIQUENESS:
						case CypherParser.UNWIND:
						case CypherParser.USE:
						case CypherParser.USER:
						case CypherParser.USERS:
						case CypherParser.USING:
						case CypherParser.VERBOSE:
						case CypherParser.WAIT:
						case CypherParser.WHEN:
						case CypherParser.WHERE:
						case CypherParser.WITH:
						case CypherParser.WRITE:
						case CypherParser.XOR:
						case CypherParser.YIELD:
						case CypherParser.IDENTIFIER:
						case CypherParser.ESCAPED_SYMBOLIC_NAME:
							{
							this.state = 2771;
							this.symbolicNameOrStringParameterList();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						this.state = 2774;
						this.match(CypherParser.RPAREN);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2779;
				this.match(CypherParser.ON);
				this.state = 2780;
				this.databaseScopeList();
				this.state = 2781;
				this.databasePrivilege();
				}
				break;
			case CypherParser.ALIAS:
			case CypherParser.PRIVILEGE:
			case CypherParser.ROLE:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.USER:
				{
				this.state = 2790;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.ALIAS:
					{
					this.state = 2783;
					this.match(CypherParser.ALIAS);
					}
					break;
				case CypherParser.PRIVILEGE:
					{
					this.state = 2784;
					this.match(CypherParser.PRIVILEGE);
					}
					break;
				case CypherParser.ROLE:
					{
					this.state = 2785;
					this.match(CypherParser.ROLE);
					}
					break;
				case CypherParser.USER:
					{
					this.state = 2786;
					this.match(CypherParser.USER);
					}
					break;
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
					{
					this.state = 2787;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.SERVER || _la === CypherParser.SERVERS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
					{
					this.state = 2788;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.SETTING || _la === CypherParser.SETTINGS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2789;
					this.settingQualifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2792;
				this.match(CypherParser.ON);
				this.state = 2793;
				this.match(CypherParser.DBMS);
				this.state = 2794;
				this.dbmsPrivilege();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public setPrivilege(): SetPrivilegeContext {
		let _localctx: SetPrivilegeContext = new SetPrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 390, CypherParser.RULE_setPrivilege);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2797;
			this.match(CypherParser.SET);
			this.state = 2825;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DATABASE:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.USER:
				{
				this.state = 2807;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
					{
					this.state = 2798;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.PASSWORD || _la === CypherParser.PASSWORDS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					}
					break;
				case CypherParser.USER:
					{
					this.state = 2799;
					this.match(CypherParser.USER);
					this.state = 2803;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.STATUS:
						{
						this.state = 2800;
						this.match(CypherParser.STATUS);
						}
						break;
					case CypherParser.HOME:
						{
						this.state = 2801;
						this.match(CypherParser.HOME);
						this.state = 2802;
						this.match(CypherParser.DATABASE);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case CypherParser.DATABASE:
					{
					this.state = 2805;
					this.match(CypherParser.DATABASE);
					this.state = 2806;
					this.match(CypherParser.ACCESS);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2809;
				this.match(CypherParser.ON);
				this.state = 2810;
				this.match(CypherParser.DBMS);
				this.state = 2811;
				this.dbmsPrivilege();
				}
				break;
			case CypherParser.LABEL:
			case CypherParser.PROPERTY:
				{
				this.state = 2823;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.LABEL:
					{
					this.state = 2812;
					this.match(CypherParser.LABEL);
					this.state = 2813;
					this.labelResource();
					this.state = 2814;
					this.match(CypherParser.ON);
					this.state = 2815;
					this.graphScopeList();
					}
					break;
				case CypherParser.PROPERTY:
					{
					this.state = 2817;
					this.match(CypherParser.PROPERTY);
					this.state = 2818;
					this.propertyResource();
					this.state = 2819;
					this.match(CypherParser.ON);
					this.state = 2820;
					this.graphScopeList();
					this.state = 2821;
					this.graphQualifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public removePrivilege(): RemovePrivilegeContext {
		let _localctx: RemovePrivilegeContext = new RemovePrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 392, CypherParser.RULE_removePrivilege);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2827;
			this.match(CypherParser.REMOVE);
			this.state = 2837;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.PRIVILEGE:
			case CypherParser.ROLE:
				{
				this.state = 2828;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.PRIVILEGE || _la === CypherParser.ROLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2829;
				this.match(CypherParser.ON);
				this.state = 2830;
				this.match(CypherParser.DBMS);
				this.state = 2831;
				this.dbmsPrivilege();
				}
				break;
			case CypherParser.LABEL:
				{
				this.state = 2832;
				this.match(CypherParser.LABEL);
				this.state = 2833;
				this.labelResource();
				this.state = 2834;
				this.match(CypherParser.ON);
				this.state = 2835;
				this.graphScopeList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public writePrivilege(): WritePrivilegeContext {
		let _localctx: WritePrivilegeContext = new WritePrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 394, CypherParser.RULE_writePrivilege);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2839;
			this.match(CypherParser.WRITE);
			this.state = 2840;
			this.match(CypherParser.ON);
			this.state = 2841;
			this.graphScopeList();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public databasePrivilege(): DatabasePrivilegeContext {
		let _localctx: DatabasePrivilegeContext = new DatabasePrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 396, CypherParser.RULE_databasePrivilege);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2880;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
				{
				this.state = 2843;
				this.match(CypherParser.ACCESS);
				}
				break;
			case CypherParser.START:
				{
				this.state = 2844;
				this.match(CypherParser.START);
				}
				break;
			case CypherParser.STOP:
				{
				this.state = 2845;
				this.match(CypherParser.STOP);
				}
				break;
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
				{
				this.state = 2846;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.INDEX || _la === CypherParser.INDEXES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2848;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.MANAGEMENT) {
					{
					this.state = 2847;
					this.match(CypherParser.MANAGEMENT);
					}
				}

				}
				break;
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
				{
				this.state = 2850;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.CONSTRAINT || _la === CypherParser.CONSTRAINTS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2852;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.MANAGEMENT) {
					{
					this.state = 2851;
					this.match(CypherParser.MANAGEMENT);
					}
				}

				}
				break;
			case CypherParser.TRANSACTION:
				{
				this.state = 2854;
				this.match(CypherParser.TRANSACTION);
				this.state = 2856;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.MANAGEMENT) {
					{
					this.state = 2855;
					this.match(CypherParser.MANAGEMENT);
					}
				}

				this.state = 2864;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.LPAREN) {
					{
					this.state = 2858;
					this.match(CypherParser.LPAREN);
					this.state = 2861;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.TIMES:
						{
						this.state = 2859;
						this.match(CypherParser.TIMES);
						}
						break;
					case CypherParser.ACCESS:
					case CypherParser.ACTIVE:
					case CypherParser.ADMIN:
					case CypherParser.ADMINISTRATOR:
					case CypherParser.ALIAS:
					case CypherParser.ALIASES:
					case CypherParser.ALL_SHORTEST_PATH:
					case CypherParser.ALL:
					case CypherParser.ALTER:
					case CypherParser.AND:
					case CypherParser.ANY:
					case CypherParser.AS:
					case CypherParser.ASC:
					case CypherParser.ASSERT:
					case CypherParser.ASSIGN:
					case CypherParser.AT:
					case CypherParser.BOOSTED:
					case CypherParser.BREAK:
					case CypherParser.BRIEF:
					case CypherParser.BTREE:
					case CypherParser.BUILT:
					case CypherParser.BY:
					case CypherParser.CALL:
					case CypherParser.CASE:
					case CypherParser.CHANGE:
					case CypherParser.COMMAND:
					case CypherParser.COMMANDS:
					case CypherParser.COMMIT:
					case CypherParser.COMPOSITE:
					case CypherParser.CONSTRAINT:
					case CypherParser.CONSTRAINTS:
					case CypherParser.CONTAINS:
					case CypherParser.COPY:
					case CypherParser.CONTINUE:
					case CypherParser.COUNT:
					case CypherParser.CREATE:
					case CypherParser.CSV:
					case CypherParser.CURRENT:
					case CypherParser.DATA:
					case CypherParser.DATABASE:
					case CypherParser.DATABASES:
					case CypherParser.DBMS:
					case CypherParser.DEALLOCATE:
					case CypherParser.DEFAULT_TOKEN:
					case CypherParser.DEFINED:
					case CypherParser.DELETE:
					case CypherParser.DENY:
					case CypherParser.DESC:
					case CypherParser.DESTROY:
					case CypherParser.DETACH:
					case CypherParser.DOLLAR:
					case CypherParser.DISTINCT:
					case CypherParser.DRIVER:
					case CypherParser.DROP:
					case CypherParser.DRYRUN:
					case CypherParser.DUMP:
					case CypherParser.EACH:
					case CypherParser.ENABLE:
					case CypherParser.ELEMENT:
					case CypherParser.ELEMENTS:
					case CypherParser.ELSE:
					case CypherParser.ENCRYPTED:
					case CypherParser.END:
					case CypherParser.ENDS:
					case CypherParser.EXECUTABLE:
					case CypherParser.EXECUTE:
					case CypherParser.EXIST:
					case CypherParser.EXISTENCE:
					case CypherParser.EXISTS:
					case CypherParser.ERROR:
					case CypherParser.FAIL:
					case CypherParser.FALSE:
					case CypherParser.FIELDTERMINATOR:
					case CypherParser.FOR:
					case CypherParser.FOREACH:
					case CypherParser.FROM:
					case CypherParser.FULLTEXT:
					case CypherParser.FUNCTION:
					case CypherParser.FUNCTIONS:
					case CypherParser.GRANT:
					case CypherParser.GRAPH:
					case CypherParser.GRAPHS:
					case CypherParser.HEADERS:
					case CypherParser.HOME:
					case CypherParser.IF:
					case CypherParser.IMMUTABLE:
					case CypherParser.IN:
					case CypherParser.INDEX:
					case CypherParser.INDEXES:
					case CypherParser.INF:
					case CypherParser.INFINITY:
					case CypherParser.IS:
					case CypherParser.JOIN:
					case CypherParser.KEY:
					case CypherParser.LABEL:
					case CypherParser.LABELS:
					case CypherParser.LIMITROWS:
					case CypherParser.LOAD:
					case CypherParser.LOOKUP:
					case CypherParser.MANAGEMENT:
					case CypherParser.MATCH:
					case CypherParser.MERGE:
					case CypherParser.NAME:
					case CypherParser.NAMES:
					case CypherParser.NAN:
					case CypherParser.NEW:
					case CypherParser.NODE:
					case CypherParser.NODES:
					case CypherParser.NONE:
					case CypherParser.NOT:
					case CypherParser.NOWAIT:
					case CypherParser.NULL:
					case CypherParser.OF:
					case CypherParser.ON:
					case CypherParser.ONLY:
					case CypherParser.OPTIONAL:
					case CypherParser.OPTIONS:
					case CypherParser.OPTION:
					case CypherParser.OR:
					case CypherParser.ORDER:
					case CypherParser.OUTPUT:
					case CypherParser.PASSWORD:
					case CypherParser.PASSWORDS:
					case CypherParser.PERIODIC:
					case CypherParser.PLAINTEXT:
					case CypherParser.POINT:
					case CypherParser.POPULATED:
					case CypherParser.PRIMARY:
					case CypherParser.PRIMARIES:
					case CypherParser.PRIVILEGE:
					case CypherParser.PRIVILEGES:
					case CypherParser.PROCEDURE:
					case CypherParser.PROCEDURES:
					case CypherParser.PROPERTIES:
					case CypherParser.PROPERTY:
					case CypherParser.RANGE:
					case CypherParser.READ:
					case CypherParser.REALLOCATE:
					case CypherParser.REDUCE:
					case CypherParser.RENAME:
					case CypherParser.REL:
					case CypherParser.RELATIONSHIP:
					case CypherParser.RELATIONSHIPS:
					case CypherParser.REMOVE:
					case CypherParser.REPLACE:
					case CypherParser.REPORT:
					case CypherParser.REQUIRE:
					case CypherParser.REQUIRED:
					case CypherParser.RETURN:
					case CypherParser.REVOKE:
					case CypherParser.ROLE:
					case CypherParser.ROLES:
					case CypherParser.ROW:
					case CypherParser.ROWS:
					case CypherParser.SCAN:
					case CypherParser.SEC:
					case CypherParser.SECOND:
					case CypherParser.SECONDARY:
					case CypherParser.SECONDARIES:
					case CypherParser.SECONDS:
					case CypherParser.SEEK:
					case CypherParser.SERVER:
					case CypherParser.SERVERS:
					case CypherParser.SET:
					case CypherParser.SETTING:
					case CypherParser.SETTINGS:
					case CypherParser.SHORTEST_PATH:
					case CypherParser.SHOW:
					case CypherParser.SINGLE:
					case CypherParser.SKIPROWS:
					case CypherParser.START:
					case CypherParser.STARTS:
					case CypherParser.STATUS:
					case CypherParser.STOP:
					case CypherParser.SUSPENDED:
					case CypherParser.TARGET:
					case CypherParser.TERMINATE:
					case CypherParser.TEXT:
					case CypherParser.THEN:
					case CypherParser.TO:
					case CypherParser.TOPOLOGY:
					case CypherParser.TRANSACTION:
					case CypherParser.TRANSACTIONS:
					case CypherParser.TRAVERSE:
					case CypherParser.TRUE:
					case CypherParser.TYPE:
					case CypherParser.TYPES:
					case CypherParser.UNION:
					case CypherParser.UNIQUE:
					case CypherParser.UNIQUENESS:
					case CypherParser.UNWIND:
					case CypherParser.USE:
					case CypherParser.USER:
					case CypherParser.USERS:
					case CypherParser.USING:
					case CypherParser.VERBOSE:
					case CypherParser.WAIT:
					case CypherParser.WHEN:
					case CypherParser.WHERE:
					case CypherParser.WITH:
					case CypherParser.WRITE:
					case CypherParser.XOR:
					case CypherParser.YIELD:
					case CypherParser.IDENTIFIER:
					case CypherParser.ESCAPED_SYMBOLIC_NAME:
						{
						this.state = 2860;
						this.symbolicNameOrStringParameterList();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2863;
					this.match(CypherParser.RPAREN);
					}
				}

				}
				break;
			case CypherParser.TERMINATE:
				{
				this.state = 2866;
				this.match(CypherParser.TERMINATE);
				this.state = 2867;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.TRANSACTION || _la === CypherParser.TRANSACTIONS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 2874;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.LPAREN) {
					{
					this.state = 2868;
					this.match(CypherParser.LPAREN);
					this.state = 2871;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.TIMES:
						{
						this.state = 2869;
						this.match(CypherParser.TIMES);
						}
						break;
					case CypherParser.ACCESS:
					case CypherParser.ACTIVE:
					case CypherParser.ADMIN:
					case CypherParser.ADMINISTRATOR:
					case CypherParser.ALIAS:
					case CypherParser.ALIASES:
					case CypherParser.ALL_SHORTEST_PATH:
					case CypherParser.ALL:
					case CypherParser.ALTER:
					case CypherParser.AND:
					case CypherParser.ANY:
					case CypherParser.AS:
					case CypherParser.ASC:
					case CypherParser.ASSERT:
					case CypherParser.ASSIGN:
					case CypherParser.AT:
					case CypherParser.BOOSTED:
					case CypherParser.BREAK:
					case CypherParser.BRIEF:
					case CypherParser.BTREE:
					case CypherParser.BUILT:
					case CypherParser.BY:
					case CypherParser.CALL:
					case CypherParser.CASE:
					case CypherParser.CHANGE:
					case CypherParser.COMMAND:
					case CypherParser.COMMANDS:
					case CypherParser.COMMIT:
					case CypherParser.COMPOSITE:
					case CypherParser.CONSTRAINT:
					case CypherParser.CONSTRAINTS:
					case CypherParser.CONTAINS:
					case CypherParser.COPY:
					case CypherParser.CONTINUE:
					case CypherParser.COUNT:
					case CypherParser.CREATE:
					case CypherParser.CSV:
					case CypherParser.CURRENT:
					case CypherParser.DATA:
					case CypherParser.DATABASE:
					case CypherParser.DATABASES:
					case CypherParser.DBMS:
					case CypherParser.DEALLOCATE:
					case CypherParser.DEFAULT_TOKEN:
					case CypherParser.DEFINED:
					case CypherParser.DELETE:
					case CypherParser.DENY:
					case CypherParser.DESC:
					case CypherParser.DESTROY:
					case CypherParser.DETACH:
					case CypherParser.DOLLAR:
					case CypherParser.DISTINCT:
					case CypherParser.DRIVER:
					case CypherParser.DROP:
					case CypherParser.DRYRUN:
					case CypherParser.DUMP:
					case CypherParser.EACH:
					case CypherParser.ENABLE:
					case CypherParser.ELEMENT:
					case CypherParser.ELEMENTS:
					case CypherParser.ELSE:
					case CypherParser.ENCRYPTED:
					case CypherParser.END:
					case CypherParser.ENDS:
					case CypherParser.EXECUTABLE:
					case CypherParser.EXECUTE:
					case CypherParser.EXIST:
					case CypherParser.EXISTENCE:
					case CypherParser.EXISTS:
					case CypherParser.ERROR:
					case CypherParser.FAIL:
					case CypherParser.FALSE:
					case CypherParser.FIELDTERMINATOR:
					case CypherParser.FOR:
					case CypherParser.FOREACH:
					case CypherParser.FROM:
					case CypherParser.FULLTEXT:
					case CypherParser.FUNCTION:
					case CypherParser.FUNCTIONS:
					case CypherParser.GRANT:
					case CypherParser.GRAPH:
					case CypherParser.GRAPHS:
					case CypherParser.HEADERS:
					case CypherParser.HOME:
					case CypherParser.IF:
					case CypherParser.IMMUTABLE:
					case CypherParser.IN:
					case CypherParser.INDEX:
					case CypherParser.INDEXES:
					case CypherParser.INF:
					case CypherParser.INFINITY:
					case CypherParser.IS:
					case CypherParser.JOIN:
					case CypherParser.KEY:
					case CypherParser.LABEL:
					case CypherParser.LABELS:
					case CypherParser.LIMITROWS:
					case CypherParser.LOAD:
					case CypherParser.LOOKUP:
					case CypherParser.MANAGEMENT:
					case CypherParser.MATCH:
					case CypherParser.MERGE:
					case CypherParser.NAME:
					case CypherParser.NAMES:
					case CypherParser.NAN:
					case CypherParser.NEW:
					case CypherParser.NODE:
					case CypherParser.NODES:
					case CypherParser.NONE:
					case CypherParser.NOT:
					case CypherParser.NOWAIT:
					case CypherParser.NULL:
					case CypherParser.OF:
					case CypherParser.ON:
					case CypherParser.ONLY:
					case CypherParser.OPTIONAL:
					case CypherParser.OPTIONS:
					case CypherParser.OPTION:
					case CypherParser.OR:
					case CypherParser.ORDER:
					case CypherParser.OUTPUT:
					case CypherParser.PASSWORD:
					case CypherParser.PASSWORDS:
					case CypherParser.PERIODIC:
					case CypherParser.PLAINTEXT:
					case CypherParser.POINT:
					case CypherParser.POPULATED:
					case CypherParser.PRIMARY:
					case CypherParser.PRIMARIES:
					case CypherParser.PRIVILEGE:
					case CypherParser.PRIVILEGES:
					case CypherParser.PROCEDURE:
					case CypherParser.PROCEDURES:
					case CypherParser.PROPERTIES:
					case CypherParser.PROPERTY:
					case CypherParser.RANGE:
					case CypherParser.READ:
					case CypherParser.REALLOCATE:
					case CypherParser.REDUCE:
					case CypherParser.RENAME:
					case CypherParser.REL:
					case CypherParser.RELATIONSHIP:
					case CypherParser.RELATIONSHIPS:
					case CypherParser.REMOVE:
					case CypherParser.REPLACE:
					case CypherParser.REPORT:
					case CypherParser.REQUIRE:
					case CypherParser.REQUIRED:
					case CypherParser.RETURN:
					case CypherParser.REVOKE:
					case CypherParser.ROLE:
					case CypherParser.ROLES:
					case CypherParser.ROW:
					case CypherParser.ROWS:
					case CypherParser.SCAN:
					case CypherParser.SEC:
					case CypherParser.SECOND:
					case CypherParser.SECONDARY:
					case CypherParser.SECONDARIES:
					case CypherParser.SECONDS:
					case CypherParser.SEEK:
					case CypherParser.SERVER:
					case CypherParser.SERVERS:
					case CypherParser.SET:
					case CypherParser.SETTING:
					case CypherParser.SETTINGS:
					case CypherParser.SHORTEST_PATH:
					case CypherParser.SHOW:
					case CypherParser.SINGLE:
					case CypherParser.SKIPROWS:
					case CypherParser.START:
					case CypherParser.STARTS:
					case CypherParser.STATUS:
					case CypherParser.STOP:
					case CypherParser.SUSPENDED:
					case CypherParser.TARGET:
					case CypherParser.TERMINATE:
					case CypherParser.TEXT:
					case CypherParser.THEN:
					case CypherParser.TO:
					case CypherParser.TOPOLOGY:
					case CypherParser.TRANSACTION:
					case CypherParser.TRANSACTIONS:
					case CypherParser.TRAVERSE:
					case CypherParser.TRUE:
					case CypherParser.TYPE:
					case CypherParser.TYPES:
					case CypherParser.UNION:
					case CypherParser.UNIQUE:
					case CypherParser.UNIQUENESS:
					case CypherParser.UNWIND:
					case CypherParser.USE:
					case CypherParser.USER:
					case CypherParser.USERS:
					case CypherParser.USING:
					case CypherParser.VERBOSE:
					case CypherParser.WAIT:
					case CypherParser.WHEN:
					case CypherParser.WHERE:
					case CypherParser.WITH:
					case CypherParser.WRITE:
					case CypherParser.XOR:
					case CypherParser.YIELD:
					case CypherParser.IDENTIFIER:
					case CypherParser.ESCAPED_SYMBOLIC_NAME:
						{
						this.state = 2870;
						this.symbolicNameOrStringParameterList();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2873;
					this.match(CypherParser.RPAREN);
					}
				}

				}
				break;
			case CypherParser.NAME:
				{
				this.state = 2876;
				this.match(CypherParser.NAME);
				this.state = 2878;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.MANAGEMENT) {
					{
					this.state = 2877;
					this.match(CypherParser.MANAGEMENT);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2882;
			this.match(CypherParser.ON);
			this.state = 2883;
			this.databaseScopeList();
			this.state = 2884;
			this.databasePrivilege();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dbmsPrivilege(): DbmsPrivilegeContext {
		let _localctx: DbmsPrivilegeContext = new DbmsPrivilegeContext(this._ctx, this.state);
		this.enterRule(_localctx, 398, CypherParser.RULE_dbmsPrivilege);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2942;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ALTER:
				{
				this.state = 2886;
				this.match(CypherParser.ALTER);
				this.state = 2887;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.ALIAS || _la === CypherParser.DATABASE || _la === CypherParser.USER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case CypherParser.ASSIGN:
				{
				this.state = 2888;
				this.match(CypherParser.ASSIGN);
				this.state = 2889;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.PRIVILEGE || _la === CypherParser.ROLE)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case CypherParser.COMPOSITE:
				{
				this.state = 2890;
				this.match(CypherParser.COMPOSITE);
				this.state = 2891;
				this.match(CypherParser.DATABASE);
				this.state = 2892;
				this.match(CypherParser.MANAGEMENT);
				}
				break;
			case CypherParser.DATABASE:
				{
				this.state = 2893;
				this.match(CypherParser.DATABASE);
				this.state = 2894;
				this.match(CypherParser.MANAGEMENT);
				}
				break;
			case CypherParser.ALIAS:
				{
				this.state = 2895;
				this.match(CypherParser.ALIAS);
				this.state = 2896;
				this.match(CypherParser.MANAGEMENT);
				}
				break;
			case CypherParser.EXECUTE:
				{
				this.state = 2897;
				this.match(CypherParser.EXECUTE);
				this.state = 2923;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
					{
					this.state = 2898;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.ADMIN || _la === CypherParser.ADMINISTRATOR)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2899;
					this.match(CypherParser.PROCEDURES);
					}
					break;
				case CypherParser.BOOSTED:
					{
					this.state = 2900;
					this.match(CypherParser.BOOSTED);
					this.state = 2911;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.PROCEDURE:
					case CypherParser.PROCEDURES:
						{
						this.state = 2901;
						_la = this._input.LA(1);
						if (!(_la === CypherParser.PROCEDURE || _la === CypherParser.PROCEDURES)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 2902;
						this.executeProcedureQualifier();
						}
						break;
					case CypherParser.FUNCTION:
					case CypherParser.FUNCTIONS:
					case CypherParser.USER:
						{
						this.state = 2907;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === CypherParser.USER) {
							{
							this.state = 2903;
							this.match(CypherParser.USER);
							this.state = 2905;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							if (_la === CypherParser.DEFINED) {
								{
								this.state = 2904;
								this.match(CypherParser.DEFINED);
								}
							}

							}
						}

						this.state = 2909;
						_la = this._input.LA(1);
						if (!(_la === CypherParser.FUNCTION || _la === CypherParser.FUNCTIONS)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						this.state = 2910;
						this.executeFunctionQualifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
					{
					this.state = 2913;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.PROCEDURE || _la === CypherParser.PROCEDURES)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2914;
					this.executeProcedureQualifier();
					}
					break;
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.USER:
					{
					this.state = 2919;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.USER) {
						{
						this.state = 2915;
						this.match(CypherParser.USER);
						this.state = 2917;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
						if (_la === CypherParser.DEFINED) {
							{
							this.state = 2916;
							this.match(CypherParser.DEFINED);
							}
						}

						}
					}

					this.state = 2921;
					_la = this._input.LA(1);
					if (!(_la === CypherParser.FUNCTION || _la === CypherParser.FUNCTIONS)) {
					this._errHandler.recoverInline(this);
					} else {
						if (this._input.LA(1) === Token.EOF) {
							this.matchedEOF = true;
						}

						this._errHandler.reportMatch(this);
						this.consume();
					}
					this.state = 2922;
					this.executeFunctionQualifier();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.PRIVILEGE:
				{
				this.state = 2925;
				this.match(CypherParser.PRIVILEGE);
				this.state = 2926;
				this.match(CypherParser.MANAGEMENT);
				}
				break;
			case CypherParser.RENAME:
				{
				this.state = 2927;
				this.match(CypherParser.RENAME);
				this.state = 2928;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.ROLE || _la === CypherParser.USER)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				}
				break;
			case CypherParser.SERVER:
				{
				this.state = 2929;
				this.match(CypherParser.SERVER);
				this.state = 2930;
				this.match(CypherParser.MANAGEMENT);
				}
				break;
			case CypherParser.USER:
				{
				this.state = 2931;
				this.match(CypherParser.USER);
				this.state = 2932;
				this.match(CypherParser.MANAGEMENT);
				}
				break;
			case CypherParser.IMPERSONATE:
				{
				this.state = 2933;
				this.match(CypherParser.IMPERSONATE);
				this.state = 2940;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.LPAREN) {
					{
					this.state = 2934;
					this.match(CypherParser.LPAREN);
					this.state = 2937;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.TIMES:
						{
						this.state = 2935;
						this.match(CypherParser.TIMES);
						}
						break;
					case CypherParser.ACCESS:
					case CypherParser.ACTIVE:
					case CypherParser.ADMIN:
					case CypherParser.ADMINISTRATOR:
					case CypherParser.ALIAS:
					case CypherParser.ALIASES:
					case CypherParser.ALL_SHORTEST_PATH:
					case CypherParser.ALL:
					case CypherParser.ALTER:
					case CypherParser.AND:
					case CypherParser.ANY:
					case CypherParser.AS:
					case CypherParser.ASC:
					case CypherParser.ASSERT:
					case CypherParser.ASSIGN:
					case CypherParser.AT:
					case CypherParser.BOOSTED:
					case CypherParser.BREAK:
					case CypherParser.BRIEF:
					case CypherParser.BTREE:
					case CypherParser.BUILT:
					case CypherParser.BY:
					case CypherParser.CALL:
					case CypherParser.CASE:
					case CypherParser.CHANGE:
					case CypherParser.COMMAND:
					case CypherParser.COMMANDS:
					case CypherParser.COMMIT:
					case CypherParser.COMPOSITE:
					case CypherParser.CONSTRAINT:
					case CypherParser.CONSTRAINTS:
					case CypherParser.CONTAINS:
					case CypherParser.COPY:
					case CypherParser.CONTINUE:
					case CypherParser.COUNT:
					case CypherParser.CREATE:
					case CypherParser.CSV:
					case CypherParser.CURRENT:
					case CypherParser.DATA:
					case CypherParser.DATABASE:
					case CypherParser.DATABASES:
					case CypherParser.DBMS:
					case CypherParser.DEALLOCATE:
					case CypherParser.DEFAULT_TOKEN:
					case CypherParser.DEFINED:
					case CypherParser.DELETE:
					case CypherParser.DENY:
					case CypherParser.DESC:
					case CypherParser.DESTROY:
					case CypherParser.DETACH:
					case CypherParser.DOLLAR:
					case CypherParser.DISTINCT:
					case CypherParser.DRIVER:
					case CypherParser.DROP:
					case CypherParser.DRYRUN:
					case CypherParser.DUMP:
					case CypherParser.EACH:
					case CypherParser.ENABLE:
					case CypherParser.ELEMENT:
					case CypherParser.ELEMENTS:
					case CypherParser.ELSE:
					case CypherParser.ENCRYPTED:
					case CypherParser.END:
					case CypherParser.ENDS:
					case CypherParser.EXECUTABLE:
					case CypherParser.EXECUTE:
					case CypherParser.EXIST:
					case CypherParser.EXISTENCE:
					case CypherParser.EXISTS:
					case CypherParser.ERROR:
					case CypherParser.FAIL:
					case CypherParser.FALSE:
					case CypherParser.FIELDTERMINATOR:
					case CypherParser.FOR:
					case CypherParser.FOREACH:
					case CypherParser.FROM:
					case CypherParser.FULLTEXT:
					case CypherParser.FUNCTION:
					case CypherParser.FUNCTIONS:
					case CypherParser.GRANT:
					case CypherParser.GRAPH:
					case CypherParser.GRAPHS:
					case CypherParser.HEADERS:
					case CypherParser.HOME:
					case CypherParser.IF:
					case CypherParser.IMMUTABLE:
					case CypherParser.IN:
					case CypherParser.INDEX:
					case CypherParser.INDEXES:
					case CypherParser.INF:
					case CypherParser.INFINITY:
					case CypherParser.IS:
					case CypherParser.JOIN:
					case CypherParser.KEY:
					case CypherParser.LABEL:
					case CypherParser.LABELS:
					case CypherParser.LIMITROWS:
					case CypherParser.LOAD:
					case CypherParser.LOOKUP:
					case CypherParser.MANAGEMENT:
					case CypherParser.MATCH:
					case CypherParser.MERGE:
					case CypherParser.NAME:
					case CypherParser.NAMES:
					case CypherParser.NAN:
					case CypherParser.NEW:
					case CypherParser.NODE:
					case CypherParser.NODES:
					case CypherParser.NONE:
					case CypherParser.NOT:
					case CypherParser.NOWAIT:
					case CypherParser.NULL:
					case CypherParser.OF:
					case CypherParser.ON:
					case CypherParser.ONLY:
					case CypherParser.OPTIONAL:
					case CypherParser.OPTIONS:
					case CypherParser.OPTION:
					case CypherParser.OR:
					case CypherParser.ORDER:
					case CypherParser.OUTPUT:
					case CypherParser.PASSWORD:
					case CypherParser.PASSWORDS:
					case CypherParser.PERIODIC:
					case CypherParser.PLAINTEXT:
					case CypherParser.POINT:
					case CypherParser.POPULATED:
					case CypherParser.PRIMARY:
					case CypherParser.PRIMARIES:
					case CypherParser.PRIVILEGE:
					case CypherParser.PRIVILEGES:
					case CypherParser.PROCEDURE:
					case CypherParser.PROCEDURES:
					case CypherParser.PROPERTIES:
					case CypherParser.PROPERTY:
					case CypherParser.RANGE:
					case CypherParser.READ:
					case CypherParser.REALLOCATE:
					case CypherParser.REDUCE:
					case CypherParser.RENAME:
					case CypherParser.REL:
					case CypherParser.RELATIONSHIP:
					case CypherParser.RELATIONSHIPS:
					case CypherParser.REMOVE:
					case CypherParser.REPLACE:
					case CypherParser.REPORT:
					case CypherParser.REQUIRE:
					case CypherParser.REQUIRED:
					case CypherParser.RETURN:
					case CypherParser.REVOKE:
					case CypherParser.ROLE:
					case CypherParser.ROLES:
					case CypherParser.ROW:
					case CypherParser.ROWS:
					case CypherParser.SCAN:
					case CypherParser.SEC:
					case CypherParser.SECOND:
					case CypherParser.SECONDARY:
					case CypherParser.SECONDARIES:
					case CypherParser.SECONDS:
					case CypherParser.SEEK:
					case CypherParser.SERVER:
					case CypherParser.SERVERS:
					case CypherParser.SET:
					case CypherParser.SETTING:
					case CypherParser.SETTINGS:
					case CypherParser.SHORTEST_PATH:
					case CypherParser.SHOW:
					case CypherParser.SINGLE:
					case CypherParser.SKIPROWS:
					case CypherParser.START:
					case CypherParser.STARTS:
					case CypherParser.STATUS:
					case CypherParser.STOP:
					case CypherParser.SUSPENDED:
					case CypherParser.TARGET:
					case CypherParser.TERMINATE:
					case CypherParser.TEXT:
					case CypherParser.THEN:
					case CypherParser.TO:
					case CypherParser.TOPOLOGY:
					case CypherParser.TRANSACTION:
					case CypherParser.TRANSACTIONS:
					case CypherParser.TRAVERSE:
					case CypherParser.TRUE:
					case CypherParser.TYPE:
					case CypherParser.TYPES:
					case CypherParser.UNION:
					case CypherParser.UNIQUE:
					case CypherParser.UNIQUENESS:
					case CypherParser.UNWIND:
					case CypherParser.USE:
					case CypherParser.USER:
					case CypherParser.USERS:
					case CypherParser.USING:
					case CypherParser.VERBOSE:
					case CypherParser.WAIT:
					case CypherParser.WHEN:
					case CypherParser.WHERE:
					case CypherParser.WITH:
					case CypherParser.WRITE:
					case CypherParser.XOR:
					case CypherParser.YIELD:
					case CypherParser.IDENTIFIER:
					case CypherParser.ESCAPED_SYMBOLIC_NAME:
						{
						this.state = 2936;
						this.symbolicNameOrStringParameterList();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 2939;
					this.match(CypherParser.RPAREN);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2944;
			this.match(CypherParser.ON);
			this.state = 2945;
			this.match(CypherParser.DBMS);
			this.state = 2946;
			this.dbmsPrivilege();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executeFunctionQualifier(): ExecuteFunctionQualifierContext {
		let _localctx: ExecuteFunctionQualifierContext = new ExecuteFunctionQualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 400, CypherParser.RULE_executeFunctionQualifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2948;
			this.globs();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public executeProcedureQualifier(): ExecuteProcedureQualifierContext {
		let _localctx: ExecuteProcedureQualifierContext = new ExecuteProcedureQualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 402, CypherParser.RULE_executeProcedureQualifier);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2950;
			this.globs();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public settingQualifier(): SettingQualifierContext {
		let _localctx: SettingQualifierContext = new SettingQualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 404, CypherParser.RULE_settingQualifier);
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2953;
			this._errHandler.sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					this.state = 2952;
					this.globs();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 2955;
				this._errHandler.sync(this);
				_alt = this.interpreter.adaptivePredict(this._input, 364, this._ctx);
			} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public globs(): GlobsContext {
		let _localctx: GlobsContext = new GlobsContext(this._ctx, this.state);
		this.enterRule(_localctx, 406, CypherParser.RULE_globs);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2957;
			this.glob();
			this.state = 2962;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 2958;
				this.match(CypherParser.COMMA);
				this.state = 2959;
				this.glob();
				}
				}
				this.state = 2964;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedGraphPrivilegesWithProperty(): QualifiedGraphPrivilegesWithPropertyContext {
		let _localctx: QualifiedGraphPrivilegesWithPropertyContext = new QualifiedGraphPrivilegesWithPropertyContext(this._ctx, this.state);
		this.enterRule(_localctx, 408, CypherParser.RULE_qualifiedGraphPrivilegesWithProperty);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2970;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.TRAVERSE:
				{
				this.state = 2965;
				this.match(CypherParser.TRAVERSE);
				}
				break;
			case CypherParser.READ:
				{
				this.state = 2966;
				this.match(CypherParser.READ);
				this.state = 2967;
				this.propertyResource();
				}
				break;
			case CypherParser.MATCH:
				{
				this.state = 2968;
				this.match(CypherParser.MATCH);
				this.state = 2969;
				this.propertyResource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2972;
			this.match(CypherParser.ON);
			this.state = 2973;
			this.graphScopeList();
			this.state = 2974;
			this.graphQualifier();
			this.state = 2978;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.LPAREN) {
				{
				this.state = 2975;
				this.match(CypherParser.LPAREN);
				this.state = 2976;
				this.match(CypherParser.TIMES);
				this.state = 2977;
				this.match(CypherParser.RPAREN);
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public qualifiedGraphPrivileges(): QualifiedGraphPrivilegesContext {
		let _localctx: QualifiedGraphPrivilegesContext = new QualifiedGraphPrivilegesContext(this._ctx, this.state);
		this.enterRule(_localctx, 410, CypherParser.RULE_qualifiedGraphPrivileges);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2983;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DELETE:
				{
				this.state = 2980;
				this.match(CypherParser.DELETE);
				}
				break;
			case CypherParser.MERGE:
				{
				this.state = 2981;
				this.match(CypherParser.MERGE);
				this.state = 2982;
				this.propertyResource();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2985;
			this.match(CypherParser.ON);
			this.state = 2986;
			this.graphScopeList();
			this.state = 2987;
			this.graphQualifier();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public labelResource(): LabelResourceContext {
		let _localctx: LabelResourceContext = new LabelResourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 412, CypherParser.RULE_labelResource);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2991;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.TIMES:
				{
				this.state = 2989;
				this.match(CypherParser.TIMES);
				}
				break;
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 2990;
				this.symbolicNameList1();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public propertyResource(): PropertyResourceContext {
		let _localctx: PropertyResourceContext = new PropertyResourceContext(this._ctx, this.state);
		this.enterRule(_localctx, 414, CypherParser.RULE_propertyResource);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 2993;
			this.match(CypherParser.LCURLY);
			this.state = 2996;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.TIMES:
				{
				this.state = 2994;
				this.match(CypherParser.TIMES);
				}
				break;
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 2995;
				this.symbolicNameList1();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			this.state = 2998;
			this.match(CypherParser.RCURLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public graphQualifier(): GraphQualifierContext {
		let _localctx: GraphQualifierContext = new GraphQualifierContext(this._ctx, this.state);
		this.enterRule(_localctx, 416, CypherParser.RULE_graphQualifier);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3036;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
				{
				this.state = 3000;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.RELATIONSHIP || _la === CypherParser.RELATIONSHIPS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3010;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TIMES:
					{
					this.state = 3001;
					this.match(CypherParser.TIMES);
					}
					break;
				case CypherParser.ACCESS:
				case CypherParser.ACTIVE:
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
				case CypherParser.ALIAS:
				case CypherParser.ALIASES:
				case CypherParser.ALL_SHORTEST_PATH:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.AND:
				case CypherParser.ANY:
				case CypherParser.AS:
				case CypherParser.ASC:
				case CypherParser.ASSERT:
				case CypherParser.ASSIGN:
				case CypherParser.AT:
				case CypherParser.BOOSTED:
				case CypherParser.BREAK:
				case CypherParser.BRIEF:
				case CypherParser.BTREE:
				case CypherParser.BUILT:
				case CypherParser.BY:
				case CypherParser.CALL:
				case CypherParser.CASE:
				case CypherParser.CHANGE:
				case CypherParser.COMMAND:
				case CypherParser.COMMANDS:
				case CypherParser.COMMIT:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CONTAINS:
				case CypherParser.COPY:
				case CypherParser.CONTINUE:
				case CypherParser.COUNT:
				case CypherParser.CREATE:
				case CypherParser.CSV:
				case CypherParser.CURRENT:
				case CypherParser.DATA:
				case CypherParser.DATABASE:
				case CypherParser.DATABASES:
				case CypherParser.DBMS:
				case CypherParser.DEALLOCATE:
				case CypherParser.DEFAULT_TOKEN:
				case CypherParser.DEFINED:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DESC:
				case CypherParser.DESTROY:
				case CypherParser.DETACH:
				case CypherParser.DISTINCT:
				case CypherParser.DRIVER:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.DUMP:
				case CypherParser.EACH:
				case CypherParser.ENABLE:
				case CypherParser.ELEMENT:
				case CypherParser.ELEMENTS:
				case CypherParser.ELSE:
				case CypherParser.ENCRYPTED:
				case CypherParser.END:
				case CypherParser.ENDS:
				case CypherParser.EXECUTABLE:
				case CypherParser.EXECUTE:
				case CypherParser.EXIST:
				case CypherParser.EXISTENCE:
				case CypherParser.EXISTS:
				case CypherParser.ERROR:
				case CypherParser.FAIL:
				case CypherParser.FALSE:
				case CypherParser.FIELDTERMINATOR:
				case CypherParser.FOR:
				case CypherParser.FOREACH:
				case CypherParser.FROM:
				case CypherParser.FULLTEXT:
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.GRANT:
				case CypherParser.GRAPH:
				case CypherParser.GRAPHS:
				case CypherParser.HEADERS:
				case CypherParser.HOME:
				case CypherParser.IF:
				case CypherParser.IMMUTABLE:
				case CypherParser.IN:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.INF:
				case CypherParser.INFINITY:
				case CypherParser.IS:
				case CypherParser.JOIN:
				case CypherParser.KEY:
				case CypherParser.LABEL:
				case CypherParser.LABELS:
				case CypherParser.LIMITROWS:
				case CypherParser.LOAD:
				case CypherParser.LOOKUP:
				case CypherParser.MANAGEMENT:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.NAMES:
				case CypherParser.NAN:
				case CypherParser.NEW:
				case CypherParser.NODE:
				case CypherParser.NODES:
				case CypherParser.NONE:
				case CypherParser.NOT:
				case CypherParser.NOWAIT:
				case CypherParser.NULL:
				case CypherParser.OF:
				case CypherParser.ON:
				case CypherParser.ONLY:
				case CypherParser.OPTIONAL:
				case CypherParser.OPTIONS:
				case CypherParser.OPTION:
				case CypherParser.OR:
				case CypherParser.ORDER:
				case CypherParser.OUTPUT:
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
				case CypherParser.PERIODIC:
				case CypherParser.PLAINTEXT:
				case CypherParser.POINT:
				case CypherParser.POPULATED:
				case CypherParser.PRIMARY:
				case CypherParser.PRIMARIES:
				case CypherParser.PRIVILEGE:
				case CypherParser.PRIVILEGES:
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
				case CypherParser.PROPERTIES:
				case CypherParser.PROPERTY:
				case CypherParser.RANGE:
				case CypherParser.READ:
				case CypherParser.REALLOCATE:
				case CypherParser.REDUCE:
				case CypherParser.RENAME:
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
				case CypherParser.RELATIONSHIPS:
				case CypherParser.REMOVE:
				case CypherParser.REPLACE:
				case CypherParser.REPORT:
				case CypherParser.REQUIRE:
				case CypherParser.REQUIRED:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.ROLE:
				case CypherParser.ROLES:
				case CypherParser.ROW:
				case CypherParser.ROWS:
				case CypherParser.SCAN:
				case CypherParser.SEC:
				case CypherParser.SECOND:
				case CypherParser.SECONDARY:
				case CypherParser.SECONDARIES:
				case CypherParser.SECONDS:
				case CypherParser.SEEK:
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
				case CypherParser.SET:
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
				case CypherParser.SHORTEST_PATH:
				case CypherParser.SHOW:
				case CypherParser.SINGLE:
				case CypherParser.SKIPROWS:
				case CypherParser.START:
				case CypherParser.STARTS:
				case CypherParser.STATUS:
				case CypherParser.STOP:
				case CypherParser.SUSPENDED:
				case CypherParser.TARGET:
				case CypherParser.TERMINATE:
				case CypherParser.TEXT:
				case CypherParser.THEN:
				case CypherParser.TO:
				case CypherParser.TOPOLOGY:
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
				case CypherParser.TRAVERSE:
				case CypherParser.TRUE:
				case CypherParser.TYPE:
				case CypherParser.TYPES:
				case CypherParser.UNION:
				case CypherParser.UNIQUE:
				case CypherParser.UNIQUENESS:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USER:
				case CypherParser.USERS:
				case CypherParser.USING:
				case CypherParser.VERBOSE:
				case CypherParser.WAIT:
				case CypherParser.WHEN:
				case CypherParser.WHERE:
				case CypherParser.WITH:
				case CypherParser.WRITE:
				case CypherParser.XOR:
				case CypherParser.YIELD:
				case CypherParser.IDENTIFIER:
				case CypherParser.ESCAPED_SYMBOLIC_NAME:
					{
					this.state = 3002;
					this.symbolicNameString();
					this.state = 3007;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === CypherParser.COMMA) {
						{
						{
						this.state = 3003;
						this.match(CypherParser.COMMA);
						this.state = 3004;
						this.symbolicNameString();
						}
						}
						this.state = 3009;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.NODE:
			case CypherParser.NODES:
				{
				this.state = 3012;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.NODE || _la === CypherParser.NODES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3022;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TIMES:
					{
					this.state = 3013;
					this.match(CypherParser.TIMES);
					}
					break;
				case CypherParser.ACCESS:
				case CypherParser.ACTIVE:
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
				case CypherParser.ALIAS:
				case CypherParser.ALIASES:
				case CypherParser.ALL_SHORTEST_PATH:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.AND:
				case CypherParser.ANY:
				case CypherParser.AS:
				case CypherParser.ASC:
				case CypherParser.ASSERT:
				case CypherParser.ASSIGN:
				case CypherParser.AT:
				case CypherParser.BOOSTED:
				case CypherParser.BREAK:
				case CypherParser.BRIEF:
				case CypherParser.BTREE:
				case CypherParser.BUILT:
				case CypherParser.BY:
				case CypherParser.CALL:
				case CypherParser.CASE:
				case CypherParser.CHANGE:
				case CypherParser.COMMAND:
				case CypherParser.COMMANDS:
				case CypherParser.COMMIT:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CONTAINS:
				case CypherParser.COPY:
				case CypherParser.CONTINUE:
				case CypherParser.COUNT:
				case CypherParser.CREATE:
				case CypherParser.CSV:
				case CypherParser.CURRENT:
				case CypherParser.DATA:
				case CypherParser.DATABASE:
				case CypherParser.DATABASES:
				case CypherParser.DBMS:
				case CypherParser.DEALLOCATE:
				case CypherParser.DEFAULT_TOKEN:
				case CypherParser.DEFINED:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DESC:
				case CypherParser.DESTROY:
				case CypherParser.DETACH:
				case CypherParser.DISTINCT:
				case CypherParser.DRIVER:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.DUMP:
				case CypherParser.EACH:
				case CypherParser.ENABLE:
				case CypherParser.ELEMENT:
				case CypherParser.ELEMENTS:
				case CypherParser.ELSE:
				case CypherParser.ENCRYPTED:
				case CypherParser.END:
				case CypherParser.ENDS:
				case CypherParser.EXECUTABLE:
				case CypherParser.EXECUTE:
				case CypherParser.EXIST:
				case CypherParser.EXISTENCE:
				case CypherParser.EXISTS:
				case CypherParser.ERROR:
				case CypherParser.FAIL:
				case CypherParser.FALSE:
				case CypherParser.FIELDTERMINATOR:
				case CypherParser.FOR:
				case CypherParser.FOREACH:
				case CypherParser.FROM:
				case CypherParser.FULLTEXT:
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.GRANT:
				case CypherParser.GRAPH:
				case CypherParser.GRAPHS:
				case CypherParser.HEADERS:
				case CypherParser.HOME:
				case CypherParser.IF:
				case CypherParser.IMMUTABLE:
				case CypherParser.IN:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.INF:
				case CypherParser.INFINITY:
				case CypherParser.IS:
				case CypherParser.JOIN:
				case CypherParser.KEY:
				case CypherParser.LABEL:
				case CypherParser.LABELS:
				case CypherParser.LIMITROWS:
				case CypherParser.LOAD:
				case CypherParser.LOOKUP:
				case CypherParser.MANAGEMENT:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.NAMES:
				case CypherParser.NAN:
				case CypherParser.NEW:
				case CypherParser.NODE:
				case CypherParser.NODES:
				case CypherParser.NONE:
				case CypherParser.NOT:
				case CypherParser.NOWAIT:
				case CypherParser.NULL:
				case CypherParser.OF:
				case CypherParser.ON:
				case CypherParser.ONLY:
				case CypherParser.OPTIONAL:
				case CypherParser.OPTIONS:
				case CypherParser.OPTION:
				case CypherParser.OR:
				case CypherParser.ORDER:
				case CypherParser.OUTPUT:
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
				case CypherParser.PERIODIC:
				case CypherParser.PLAINTEXT:
				case CypherParser.POINT:
				case CypherParser.POPULATED:
				case CypherParser.PRIMARY:
				case CypherParser.PRIMARIES:
				case CypherParser.PRIVILEGE:
				case CypherParser.PRIVILEGES:
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
				case CypherParser.PROPERTIES:
				case CypherParser.PROPERTY:
				case CypherParser.RANGE:
				case CypherParser.READ:
				case CypherParser.REALLOCATE:
				case CypherParser.REDUCE:
				case CypherParser.RENAME:
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
				case CypherParser.RELATIONSHIPS:
				case CypherParser.REMOVE:
				case CypherParser.REPLACE:
				case CypherParser.REPORT:
				case CypherParser.REQUIRE:
				case CypherParser.REQUIRED:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.ROLE:
				case CypherParser.ROLES:
				case CypherParser.ROW:
				case CypherParser.ROWS:
				case CypherParser.SCAN:
				case CypherParser.SEC:
				case CypherParser.SECOND:
				case CypherParser.SECONDARY:
				case CypherParser.SECONDARIES:
				case CypherParser.SECONDS:
				case CypherParser.SEEK:
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
				case CypherParser.SET:
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
				case CypherParser.SHORTEST_PATH:
				case CypherParser.SHOW:
				case CypherParser.SINGLE:
				case CypherParser.SKIPROWS:
				case CypherParser.START:
				case CypherParser.STARTS:
				case CypherParser.STATUS:
				case CypherParser.STOP:
				case CypherParser.SUSPENDED:
				case CypherParser.TARGET:
				case CypherParser.TERMINATE:
				case CypherParser.TEXT:
				case CypherParser.THEN:
				case CypherParser.TO:
				case CypherParser.TOPOLOGY:
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
				case CypherParser.TRAVERSE:
				case CypherParser.TRUE:
				case CypherParser.TYPE:
				case CypherParser.TYPES:
				case CypherParser.UNION:
				case CypherParser.UNIQUE:
				case CypherParser.UNIQUENESS:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USER:
				case CypherParser.USERS:
				case CypherParser.USING:
				case CypherParser.VERBOSE:
				case CypherParser.WAIT:
				case CypherParser.WHEN:
				case CypherParser.WHERE:
				case CypherParser.WITH:
				case CypherParser.WRITE:
				case CypherParser.XOR:
				case CypherParser.YIELD:
				case CypherParser.IDENTIFIER:
				case CypherParser.ESCAPED_SYMBOLIC_NAME:
					{
					this.state = 3014;
					this.symbolicNameString();
					this.state = 3019;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === CypherParser.COMMA) {
						{
						{
						this.state = 3015;
						this.match(CypherParser.COMMA);
						this.state = 3016;
						this.symbolicNameString();
						}
						}
						this.state = 3021;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
				{
				this.state = 3024;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.ELEMENT || _la === CypherParser.ELEMENTS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3034;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TIMES:
					{
					this.state = 3025;
					this.match(CypherParser.TIMES);
					}
					break;
				case CypherParser.ACCESS:
				case CypherParser.ACTIVE:
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
				case CypherParser.ALIAS:
				case CypherParser.ALIASES:
				case CypherParser.ALL_SHORTEST_PATH:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.AND:
				case CypherParser.ANY:
				case CypherParser.AS:
				case CypherParser.ASC:
				case CypherParser.ASSERT:
				case CypherParser.ASSIGN:
				case CypherParser.AT:
				case CypherParser.BOOSTED:
				case CypherParser.BREAK:
				case CypherParser.BRIEF:
				case CypherParser.BTREE:
				case CypherParser.BUILT:
				case CypherParser.BY:
				case CypherParser.CALL:
				case CypherParser.CASE:
				case CypherParser.CHANGE:
				case CypherParser.COMMAND:
				case CypherParser.COMMANDS:
				case CypherParser.COMMIT:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CONTAINS:
				case CypherParser.COPY:
				case CypherParser.CONTINUE:
				case CypherParser.COUNT:
				case CypherParser.CREATE:
				case CypherParser.CSV:
				case CypherParser.CURRENT:
				case CypherParser.DATA:
				case CypherParser.DATABASE:
				case CypherParser.DATABASES:
				case CypherParser.DBMS:
				case CypherParser.DEALLOCATE:
				case CypherParser.DEFAULT_TOKEN:
				case CypherParser.DEFINED:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DESC:
				case CypherParser.DESTROY:
				case CypherParser.DETACH:
				case CypherParser.DISTINCT:
				case CypherParser.DRIVER:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.DUMP:
				case CypherParser.EACH:
				case CypherParser.ENABLE:
				case CypherParser.ELEMENT:
				case CypherParser.ELEMENTS:
				case CypherParser.ELSE:
				case CypherParser.ENCRYPTED:
				case CypherParser.END:
				case CypherParser.ENDS:
				case CypherParser.EXECUTABLE:
				case CypherParser.EXECUTE:
				case CypherParser.EXIST:
				case CypherParser.EXISTENCE:
				case CypherParser.EXISTS:
				case CypherParser.ERROR:
				case CypherParser.FAIL:
				case CypherParser.FALSE:
				case CypherParser.FIELDTERMINATOR:
				case CypherParser.FOR:
				case CypherParser.FOREACH:
				case CypherParser.FROM:
				case CypherParser.FULLTEXT:
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.GRANT:
				case CypherParser.GRAPH:
				case CypherParser.GRAPHS:
				case CypherParser.HEADERS:
				case CypherParser.HOME:
				case CypherParser.IF:
				case CypherParser.IMMUTABLE:
				case CypherParser.IN:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.INF:
				case CypherParser.INFINITY:
				case CypherParser.IS:
				case CypherParser.JOIN:
				case CypherParser.KEY:
				case CypherParser.LABEL:
				case CypherParser.LABELS:
				case CypherParser.LIMITROWS:
				case CypherParser.LOAD:
				case CypherParser.LOOKUP:
				case CypherParser.MANAGEMENT:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.NAMES:
				case CypherParser.NAN:
				case CypherParser.NEW:
				case CypherParser.NODE:
				case CypherParser.NODES:
				case CypherParser.NONE:
				case CypherParser.NOT:
				case CypherParser.NOWAIT:
				case CypherParser.NULL:
				case CypherParser.OF:
				case CypherParser.ON:
				case CypherParser.ONLY:
				case CypherParser.OPTIONAL:
				case CypherParser.OPTIONS:
				case CypherParser.OPTION:
				case CypherParser.OR:
				case CypherParser.ORDER:
				case CypherParser.OUTPUT:
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
				case CypherParser.PERIODIC:
				case CypherParser.PLAINTEXT:
				case CypherParser.POINT:
				case CypherParser.POPULATED:
				case CypherParser.PRIMARY:
				case CypherParser.PRIMARIES:
				case CypherParser.PRIVILEGE:
				case CypherParser.PRIVILEGES:
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
				case CypherParser.PROPERTIES:
				case CypherParser.PROPERTY:
				case CypherParser.RANGE:
				case CypherParser.READ:
				case CypherParser.REALLOCATE:
				case CypherParser.REDUCE:
				case CypherParser.RENAME:
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
				case CypherParser.RELATIONSHIPS:
				case CypherParser.REMOVE:
				case CypherParser.REPLACE:
				case CypherParser.REPORT:
				case CypherParser.REQUIRE:
				case CypherParser.REQUIRED:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.ROLE:
				case CypherParser.ROLES:
				case CypherParser.ROW:
				case CypherParser.ROWS:
				case CypherParser.SCAN:
				case CypherParser.SEC:
				case CypherParser.SECOND:
				case CypherParser.SECONDARY:
				case CypherParser.SECONDARIES:
				case CypherParser.SECONDS:
				case CypherParser.SEEK:
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
				case CypherParser.SET:
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
				case CypherParser.SHORTEST_PATH:
				case CypherParser.SHOW:
				case CypherParser.SINGLE:
				case CypherParser.SKIPROWS:
				case CypherParser.START:
				case CypherParser.STARTS:
				case CypherParser.STATUS:
				case CypherParser.STOP:
				case CypherParser.SUSPENDED:
				case CypherParser.TARGET:
				case CypherParser.TERMINATE:
				case CypherParser.TEXT:
				case CypherParser.THEN:
				case CypherParser.TO:
				case CypherParser.TOPOLOGY:
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
				case CypherParser.TRAVERSE:
				case CypherParser.TRUE:
				case CypherParser.TYPE:
				case CypherParser.TYPES:
				case CypherParser.UNION:
				case CypherParser.UNIQUE:
				case CypherParser.UNIQUENESS:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USER:
				case CypherParser.USERS:
				case CypherParser.USING:
				case CypherParser.VERBOSE:
				case CypherParser.WAIT:
				case CypherParser.WHEN:
				case CypherParser.WHERE:
				case CypherParser.WITH:
				case CypherParser.WRITE:
				case CypherParser.XOR:
				case CypherParser.YIELD:
				case CypherParser.IDENTIFIER:
				case CypherParser.ESCAPED_SYMBOLIC_NAME:
					{
					this.state = 3026;
					this.symbolicNameString();
					this.state = 3031;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					while (_la === CypherParser.COMMA) {
						{
						{
						this.state = 3027;
						this.match(CypherParser.COMMA);
						this.state = 3028;
						this.symbolicNameString();
						}
						}
						this.state = 3033;
						this._errHandler.sync(this);
						_la = this._input.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.FROM:
			case CypherParser.LPAREN:
			case CypherParser.TO:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createDatabase(): CreateDatabaseContext {
		let _localctx: CreateDatabaseContext = new CreateDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 418, CypherParser.RULE_createDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3038;
			this.match(CypherParser.DATABASE);
			this.state = 3039;
			this.symbolicAliasName();
			this.state = 3043;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 3040;
				this.match(CypherParser.IF);
				this.state = 3041;
				this.match(CypherParser.NOT);
				this.state = 3042;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 3055;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.TOPOLOGY) {
				{
				this.state = 3045;
				this.match(CypherParser.TOPOLOGY);
				this.state = 3051;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				do {
					{
					{
					this.state = 3046;
					this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
					this.state = 3049;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.PRIMARY:
					case CypherParser.PRIMARIES:
						{
						this.state = 3047;
						_la = this._input.LA(1);
						if (!(_la === CypherParser.PRIMARY || _la === CypherParser.PRIMARIES)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					case CypherParser.SECONDARY:
					case CypherParser.SECONDARIES:
						{
						this.state = 3048;
						_la = this._input.LA(1);
						if (!(_la === CypherParser.SECONDARY || _la === CypherParser.SECONDARIES)) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					}
					this.state = 3053;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				} while (_la === CypherParser.UNSIGNED_DECIMAL_INTEGER);
				}
			}

			this.state = 3058;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.OPTIONS) {
				{
				this.state = 3057;
				this.options_();
				}
			}

			this.state = 3061;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.NOWAIT || _la === CypherParser.WAIT) {
				{
				this.state = 3060;
				this.waitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public options_(): Options_Context {
		let _localctx: Options_Context = new Options_Context(this._ctx, this.state);
		this.enterRule(_localctx, 420, CypherParser.RULE_options_);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3063;
			this.match(CypherParser.OPTIONS);
			this.state = 3064;
			this.mapOrParameter();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createCompositeDatabase(): CreateCompositeDatabaseContext {
		let _localctx: CreateCompositeDatabaseContext = new CreateCompositeDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 422, CypherParser.RULE_createCompositeDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3066;
			this.match(CypherParser.COMPOSITE);
			this.state = 3067;
			this.match(CypherParser.DATABASE);
			this.state = 3068;
			this.symbolicAliasName();
			this.state = 3072;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 3069;
				this.match(CypherParser.IF);
				this.state = 3070;
				this.match(CypherParser.NOT);
				this.state = 3071;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 3075;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.OPTIONS) {
				{
				this.state = 3074;
				this.options_();
				}
			}

			this.state = 3078;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.NOWAIT || _la === CypherParser.WAIT) {
				{
				this.state = 3077;
				this.waitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropDatabase(): DropDatabaseContext {
		let _localctx: DropDatabaseContext = new DropDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 424, CypherParser.RULE_dropDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3081;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.COMPOSITE) {
				{
				this.state = 3080;
				this.match(CypherParser.COMPOSITE);
				}
			}

			this.state = 3083;
			this.match(CypherParser.DATABASE);
			this.state = 3084;
			this.symbolicAliasName();
			this.state = 3087;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 3085;
				this.match(CypherParser.IF);
				this.state = 3086;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 3091;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.DESTROY || _la === CypherParser.DUMP) {
				{
				this.state = 3089;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.DESTROY || _la === CypherParser.DUMP)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3090;
				this.match(CypherParser.DATA);
				}
			}

			this.state = 3094;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.NOWAIT || _la === CypherParser.WAIT) {
				{
				this.state = 3093;
				this.waitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterDatabase(): AlterDatabaseContext {
		let _localctx: AlterDatabaseContext = new AlterDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 426, CypherParser.RULE_alterDatabase);
		let _la: number;
		try {
			let _alt: number;
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3096;
			this.match(CypherParser.DATABASE);
			this.state = 3097;
			this.symbolicAliasName();
			this.state = 3100;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 3098;
				this.match(CypherParser.IF);
				this.state = 3099;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 3133;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.SET:
				{
				this.state = 3122;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3102;
						this.match(CypherParser.SET);
						this.state = 3120;
						this._errHandler.sync(this);
						switch (this._input.LA(1)) {
						case CypherParser.ACCESS:
							{
							this.state = 3103;
							this.match(CypherParser.ACCESS);
							this.state = 3104;
							this.match(CypherParser.READ);
							this.state = 3105;
							_la = this._input.LA(1);
							if (!(_la === CypherParser.ONLY || _la === CypherParser.WRITE)) {
							this._errHandler.recoverInline(this);
							} else {
								if (this._input.LA(1) === Token.EOF) {
									this.matchedEOF = true;
								}

								this._errHandler.reportMatch(this);
								this.consume();
							}
							}
							break;
						case CypherParser.TOPOLOGY:
							{
							this.state = 3106;
							this.match(CypherParser.TOPOLOGY);
							this.state = 3112;
							this._errHandler.sync(this);
							_la = this._input.LA(1);
							do {
								{
								{
								this.state = 3107;
								this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
								this.state = 3110;
								this._errHandler.sync(this);
								switch (this._input.LA(1)) {
								case CypherParser.PRIMARY:
								case CypherParser.PRIMARIES:
									{
									this.state = 3108;
									_la = this._input.LA(1);
									if (!(_la === CypherParser.PRIMARY || _la === CypherParser.PRIMARIES)) {
									this._errHandler.recoverInline(this);
									} else {
										if (this._input.LA(1) === Token.EOF) {
											this.matchedEOF = true;
										}

										this._errHandler.reportMatch(this);
										this.consume();
									}
									}
									break;
								case CypherParser.SECONDARY:
								case CypherParser.SECONDARIES:
									{
									this.state = 3109;
									_la = this._input.LA(1);
									if (!(_la === CypherParser.SECONDARY || _la === CypherParser.SECONDARIES)) {
									this._errHandler.recoverInline(this);
									} else {
										if (this._input.LA(1) === Token.EOF) {
											this.matchedEOF = true;
										}

										this._errHandler.reportMatch(this);
										this.consume();
									}
									}
									break;
								default:
									throw new NoViableAltException(this);
								}
								}
								}
								this.state = 3114;
								this._errHandler.sync(this);
								_la = this._input.LA(1);
							} while (_la === CypherParser.UNSIGNED_DECIMAL_INTEGER);
							}
							break;
						case CypherParser.OPTION:
							{
							this.state = 3116;
							this.match(CypherParser.OPTION);
							this.state = 3117;
							this.symbolicNameString();
							this.state = 3118;
							this.expression();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3124;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 395, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			case CypherParser.REMOVE:
				{
				this.state = 3129;
				this._errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						this.state = 3126;
						this.match(CypherParser.REMOVE);
						this.state = 3127;
						this.match(CypherParser.OPTION);
						this.state = 3128;
						this.symbolicNameString();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					this.state = 3131;
					this._errHandler.sync(this);
					_alt = this.interpreter.adaptivePredict(this._input, 396, this._ctx);
				} while (_alt !== 2 && _alt !== ATN.INVALID_ALT_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public startDatabase(): StartDatabaseContext {
		let _localctx: StartDatabaseContext = new StartDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 428, CypherParser.RULE_startDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3135;
			this.match(CypherParser.START);
			this.state = 3136;
			this.match(CypherParser.DATABASE);
			this.state = 3137;
			this.symbolicAliasName();
			this.state = 3139;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.NOWAIT || _la === CypherParser.WAIT) {
				{
				this.state = 3138;
				this.waitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stopDatabase(): StopDatabaseContext {
		let _localctx: StopDatabaseContext = new StopDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 430, CypherParser.RULE_stopDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3141;
			this.match(CypherParser.STOP);
			this.state = 3142;
			this.match(CypherParser.DATABASE);
			this.state = 3143;
			this.symbolicAliasName();
			this.state = 3145;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.NOWAIT || _la === CypherParser.WAIT) {
				{
				this.state = 3144;
				this.waitClause();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public waitClause(): WaitClauseContext {
		let _localctx: WaitClauseContext = new WaitClauseContext(this._ctx, this.state);
		this.enterRule(_localctx, 432, CypherParser.RULE_waitClause);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3155;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.WAIT:
				{
				this.state = 3147;
				this.match(CypherParser.WAIT);
				this.state = 3152;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.UNSIGNED_DECIMAL_INTEGER) {
					{
					this.state = 3148;
					this.match(CypherParser.UNSIGNED_DECIMAL_INTEGER);
					this.state = 3150;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (((((_la - 191)) & ~0x1F) === 0 && ((1 << (_la - 191)) & ((1 << (CypherParser.SEC - 191)) | (1 << (CypherParser.SECOND - 191)) | (1 << (CypherParser.SECONDS - 191)))) !== 0)) {
						{
						this.state = 3149;
						_la = this._input.LA(1);
						if (!(((((_la - 191)) & ~0x1F) === 0 && ((1 << (_la - 191)) & ((1 << (CypherParser.SEC - 191)) | (1 << (CypherParser.SECOND - 191)) | (1 << (CypherParser.SECONDS - 191)))) !== 0))) {
						this._errHandler.recoverInline(this);
						} else {
							if (this._input.LA(1) === Token.EOF) {
								this.matchedEOF = true;
							}

							this._errHandler.reportMatch(this);
							this.consume();
						}
						}
					}

					}
				}

				}
				break;
			case CypherParser.NOWAIT:
				{
				this.state = 3154;
				this.match(CypherParser.NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showDatabase(): ShowDatabaseContext {
		let _localctx: ShowDatabaseContext = new ShowDatabaseContext(this._ctx, this.state);
		this.enterRule(_localctx, 434, CypherParser.RULE_showDatabase);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3187;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
				{
				this.state = 3157;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.DATABASE || _la === CypherParser.DATABASES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3172;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 406, this._ctx) ) {
				case 1:
					{
					this.state = 3158;
					this.symbolicAliasName();
					this.state = 3164;
					this._errHandler.sync(this);
					switch (this._input.LA(1)) {
					case CypherParser.YIELD:
						{
						this.state = 3159;
						this.yieldClause();
						this.state = 3161;
						this._errHandler.sync(this);
						switch ( this.interpreter.adaptivePredict(this._input, 403, this._ctx) ) {
						case 1:
							{
							this.state = 3160;
							this.returnClause();
							}
							break;
						}
						}
						break;
					case CypherParser.WHERE:
						{
						this.state = 3163;
						this.whereClause();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;

				case 2:
					{
					this.state = 3166;
					this.yieldClause();
					this.state = 3168;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 405, this._ctx) ) {
					case 1:
						{
						this.state = 3167;
						this.returnClause();
						}
						break;
					}
					}
					break;

				case 3:
					{
					this.state = 3170;
					this.whereClause();
					}
					break;

				case 4:
					{
					this.state = 3171;
					this.symbolicAliasName();
					}
					break;
				}
				}
				break;
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.HOME:
				{
				this.state = 3178;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.DEFAULT_TOKEN:
					{
					this.state = 3174;
					this.match(CypherParser.DEFAULT_TOKEN);
					this.state = 3175;
					this.match(CypherParser.DATABASE);
					}
					break;
				case CypherParser.HOME:
					{
					this.state = 3176;
					this.match(CypherParser.HOME);
					this.state = 3177;
					this.match(CypherParser.DATABASE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				this.state = 3185;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.YIELD:
					{
					this.state = 3180;
					this.yieldClause();
					this.state = 3182;
					this._errHandler.sync(this);
					switch ( this.interpreter.adaptivePredict(this._input, 408, this._ctx) ) {
					case 1:
						{
						this.state = 3181;
						this.returnClause();
						}
						break;
					}
					}
					break;
				case CypherParser.WHERE:
					{
					this.state = 3184;
					this.whereClause();
					}
					break;
				case CypherParser.EOF:
				case CypherParser.ALTER:
				case CypherParser.CALL:
				case CypherParser.CREATE:
				case CypherParser.DEALLOCATE:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DETACH:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.ENABLE:
				case CypherParser.FOREACH:
				case CypherParser.GRANT:
				case CypherParser.LOAD:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.OPTIONAL:
				case CypherParser.REALLOCATE:
				case CypherParser.RENAME:
				case CypherParser.REMOVE:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.SEMICOLON:
				case CypherParser.SET:
				case CypherParser.SHOW:
				case CypherParser.START:
				case CypherParser.STOP:
				case CypherParser.TERMINATE:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USING:
				case CypherParser.WITH:
					break;
				default:
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public databaseScopeList(): DatabaseScopeListContext {
		let _localctx: DatabaseScopeListContext = new DatabaseScopeListContext(this._ctx, this.state);
		this.enterRule(_localctx, 436, CypherParser.RULE_databaseScopeList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3198;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
				{
				this.state = 3189;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.DATABASE || _la === CypherParser.DATABASES)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3192;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TIMES:
					{
					this.state = 3190;
					this.match(CypherParser.TIMES);
					}
					break;
				case CypherParser.ACCESS:
				case CypherParser.ACTIVE:
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
				case CypherParser.ALIAS:
				case CypherParser.ALIASES:
				case CypherParser.ALL_SHORTEST_PATH:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.AND:
				case CypherParser.ANY:
				case CypherParser.AS:
				case CypherParser.ASC:
				case CypherParser.ASSERT:
				case CypherParser.ASSIGN:
				case CypherParser.AT:
				case CypherParser.BOOSTED:
				case CypherParser.BREAK:
				case CypherParser.BRIEF:
				case CypherParser.BTREE:
				case CypherParser.BUILT:
				case CypherParser.BY:
				case CypherParser.CALL:
				case CypherParser.CASE:
				case CypherParser.CHANGE:
				case CypherParser.COMMAND:
				case CypherParser.COMMANDS:
				case CypherParser.COMMIT:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CONTAINS:
				case CypherParser.COPY:
				case CypherParser.CONTINUE:
				case CypherParser.COUNT:
				case CypherParser.CREATE:
				case CypherParser.CSV:
				case CypherParser.CURRENT:
				case CypherParser.DATA:
				case CypherParser.DATABASE:
				case CypherParser.DATABASES:
				case CypherParser.DBMS:
				case CypherParser.DEALLOCATE:
				case CypherParser.DEFAULT_TOKEN:
				case CypherParser.DEFINED:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DESC:
				case CypherParser.DESTROY:
				case CypherParser.DETACH:
				case CypherParser.DOLLAR:
				case CypherParser.DISTINCT:
				case CypherParser.DRIVER:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.DUMP:
				case CypherParser.EACH:
				case CypherParser.ENABLE:
				case CypherParser.ELEMENT:
				case CypherParser.ELEMENTS:
				case CypherParser.ELSE:
				case CypherParser.ENCRYPTED:
				case CypherParser.END:
				case CypherParser.ENDS:
				case CypherParser.EXECUTABLE:
				case CypherParser.EXECUTE:
				case CypherParser.EXIST:
				case CypherParser.EXISTENCE:
				case CypherParser.EXISTS:
				case CypherParser.ERROR:
				case CypherParser.FAIL:
				case CypherParser.FALSE:
				case CypherParser.FIELDTERMINATOR:
				case CypherParser.FOR:
				case CypherParser.FOREACH:
				case CypherParser.FROM:
				case CypherParser.FULLTEXT:
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.GRANT:
				case CypherParser.GRAPH:
				case CypherParser.GRAPHS:
				case CypherParser.HEADERS:
				case CypherParser.HOME:
				case CypherParser.IF:
				case CypherParser.IMMUTABLE:
				case CypherParser.IN:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.INF:
				case CypherParser.INFINITY:
				case CypherParser.IS:
				case CypherParser.JOIN:
				case CypherParser.KEY:
				case CypherParser.LABEL:
				case CypherParser.LABELS:
				case CypherParser.LIMITROWS:
				case CypherParser.LOAD:
				case CypherParser.LOOKUP:
				case CypherParser.MANAGEMENT:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.NAMES:
				case CypherParser.NAN:
				case CypherParser.NEW:
				case CypherParser.NODE:
				case CypherParser.NODES:
				case CypherParser.NONE:
				case CypherParser.NOT:
				case CypherParser.NOWAIT:
				case CypherParser.NULL:
				case CypherParser.OF:
				case CypherParser.ON:
				case CypherParser.ONLY:
				case CypherParser.OPTIONAL:
				case CypherParser.OPTIONS:
				case CypherParser.OPTION:
				case CypherParser.OR:
				case CypherParser.ORDER:
				case CypherParser.OUTPUT:
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
				case CypherParser.PERIODIC:
				case CypherParser.PLAINTEXT:
				case CypherParser.POINT:
				case CypherParser.POPULATED:
				case CypherParser.PRIMARY:
				case CypherParser.PRIMARIES:
				case CypherParser.PRIVILEGE:
				case CypherParser.PRIVILEGES:
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
				case CypherParser.PROPERTIES:
				case CypherParser.PROPERTY:
				case CypherParser.RANGE:
				case CypherParser.READ:
				case CypherParser.REALLOCATE:
				case CypherParser.REDUCE:
				case CypherParser.RENAME:
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
				case CypherParser.RELATIONSHIPS:
				case CypherParser.REMOVE:
				case CypherParser.REPLACE:
				case CypherParser.REPORT:
				case CypherParser.REQUIRE:
				case CypherParser.REQUIRED:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.ROLE:
				case CypherParser.ROLES:
				case CypherParser.ROW:
				case CypherParser.ROWS:
				case CypherParser.SCAN:
				case CypherParser.SEC:
				case CypherParser.SECOND:
				case CypherParser.SECONDARY:
				case CypherParser.SECONDARIES:
				case CypherParser.SECONDS:
				case CypherParser.SEEK:
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
				case CypherParser.SET:
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
				case CypherParser.SHORTEST_PATH:
				case CypherParser.SHOW:
				case CypherParser.SINGLE:
				case CypherParser.SKIPROWS:
				case CypherParser.START:
				case CypherParser.STARTS:
				case CypherParser.STATUS:
				case CypherParser.STOP:
				case CypherParser.SUSPENDED:
				case CypherParser.TARGET:
				case CypherParser.TERMINATE:
				case CypherParser.TEXT:
				case CypherParser.THEN:
				case CypherParser.TO:
				case CypherParser.TOPOLOGY:
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
				case CypherParser.TRAVERSE:
				case CypherParser.TRUE:
				case CypherParser.TYPE:
				case CypherParser.TYPES:
				case CypherParser.UNION:
				case CypherParser.UNIQUE:
				case CypherParser.UNIQUENESS:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USER:
				case CypherParser.USERS:
				case CypherParser.USING:
				case CypherParser.VERBOSE:
				case CypherParser.WAIT:
				case CypherParser.WHEN:
				case CypherParser.WHERE:
				case CypherParser.WITH:
				case CypherParser.WRITE:
				case CypherParser.XOR:
				case CypherParser.YIELD:
				case CypherParser.IDENTIFIER:
				case CypherParser.ESCAPED_SYMBOLIC_NAME:
					{
					this.state = 3191;
					this.symbolicAliasNameList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.DEFAULT_TOKEN:
				{
				this.state = 3194;
				this.match(CypherParser.DEFAULT_TOKEN);
				this.state = 3195;
				this.match(CypherParser.DATABASE);
				}
				break;
			case CypherParser.HOME:
				{
				this.state = 3196;
				this.match(CypherParser.HOME);
				this.state = 3197;
				this.match(CypherParser.DATABASE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public graphScopeList(): GraphScopeListContext {
		let _localctx: GraphScopeListContext = new GraphScopeListContext(this._ctx, this.state);
		this.enterRule(_localctx, 438, CypherParser.RULE_graphScopeList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3209;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
				{
				this.state = 3200;
				_la = this._input.LA(1);
				if (!(_la === CypherParser.GRAPH || _la === CypherParser.GRAPHS)) {
				this._errHandler.recoverInline(this);
				} else {
					if (this._input.LA(1) === Token.EOF) {
						this.matchedEOF = true;
					}

					this._errHandler.reportMatch(this);
					this.consume();
				}
				this.state = 3203;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TIMES:
					{
					this.state = 3201;
					this.match(CypherParser.TIMES);
					}
					break;
				case CypherParser.ACCESS:
				case CypherParser.ACTIVE:
				case CypherParser.ADMIN:
				case CypherParser.ADMINISTRATOR:
				case CypherParser.ALIAS:
				case CypherParser.ALIASES:
				case CypherParser.ALL_SHORTEST_PATH:
				case CypherParser.ALL:
				case CypherParser.ALTER:
				case CypherParser.AND:
				case CypherParser.ANY:
				case CypherParser.AS:
				case CypherParser.ASC:
				case CypherParser.ASSERT:
				case CypherParser.ASSIGN:
				case CypherParser.AT:
				case CypherParser.BOOSTED:
				case CypherParser.BREAK:
				case CypherParser.BRIEF:
				case CypherParser.BTREE:
				case CypherParser.BUILT:
				case CypherParser.BY:
				case CypherParser.CALL:
				case CypherParser.CASE:
				case CypherParser.CHANGE:
				case CypherParser.COMMAND:
				case CypherParser.COMMANDS:
				case CypherParser.COMMIT:
				case CypherParser.COMPOSITE:
				case CypherParser.CONSTRAINT:
				case CypherParser.CONSTRAINTS:
				case CypherParser.CONTAINS:
				case CypherParser.COPY:
				case CypherParser.CONTINUE:
				case CypherParser.COUNT:
				case CypherParser.CREATE:
				case CypherParser.CSV:
				case CypherParser.CURRENT:
				case CypherParser.DATA:
				case CypherParser.DATABASE:
				case CypherParser.DATABASES:
				case CypherParser.DBMS:
				case CypherParser.DEALLOCATE:
				case CypherParser.DEFAULT_TOKEN:
				case CypherParser.DEFINED:
				case CypherParser.DELETE:
				case CypherParser.DENY:
				case CypherParser.DESC:
				case CypherParser.DESTROY:
				case CypherParser.DETACH:
				case CypherParser.DOLLAR:
				case CypherParser.DISTINCT:
				case CypherParser.DRIVER:
				case CypherParser.DROP:
				case CypherParser.DRYRUN:
				case CypherParser.DUMP:
				case CypherParser.EACH:
				case CypherParser.ENABLE:
				case CypherParser.ELEMENT:
				case CypherParser.ELEMENTS:
				case CypherParser.ELSE:
				case CypherParser.ENCRYPTED:
				case CypherParser.END:
				case CypherParser.ENDS:
				case CypherParser.EXECUTABLE:
				case CypherParser.EXECUTE:
				case CypherParser.EXIST:
				case CypherParser.EXISTENCE:
				case CypherParser.EXISTS:
				case CypherParser.ERROR:
				case CypherParser.FAIL:
				case CypherParser.FALSE:
				case CypherParser.FIELDTERMINATOR:
				case CypherParser.FOR:
				case CypherParser.FOREACH:
				case CypherParser.FROM:
				case CypherParser.FULLTEXT:
				case CypherParser.FUNCTION:
				case CypherParser.FUNCTIONS:
				case CypherParser.GRANT:
				case CypherParser.GRAPH:
				case CypherParser.GRAPHS:
				case CypherParser.HEADERS:
				case CypherParser.HOME:
				case CypherParser.IF:
				case CypherParser.IMMUTABLE:
				case CypherParser.IN:
				case CypherParser.INDEX:
				case CypherParser.INDEXES:
				case CypherParser.INF:
				case CypherParser.INFINITY:
				case CypherParser.IS:
				case CypherParser.JOIN:
				case CypherParser.KEY:
				case CypherParser.LABEL:
				case CypherParser.LABELS:
				case CypherParser.LIMITROWS:
				case CypherParser.LOAD:
				case CypherParser.LOOKUP:
				case CypherParser.MANAGEMENT:
				case CypherParser.MATCH:
				case CypherParser.MERGE:
				case CypherParser.NAME:
				case CypherParser.NAMES:
				case CypherParser.NAN:
				case CypherParser.NEW:
				case CypherParser.NODE:
				case CypherParser.NODES:
				case CypherParser.NONE:
				case CypherParser.NOT:
				case CypherParser.NOWAIT:
				case CypherParser.NULL:
				case CypherParser.OF:
				case CypherParser.ON:
				case CypherParser.ONLY:
				case CypherParser.OPTIONAL:
				case CypherParser.OPTIONS:
				case CypherParser.OPTION:
				case CypherParser.OR:
				case CypherParser.ORDER:
				case CypherParser.OUTPUT:
				case CypherParser.PASSWORD:
				case CypherParser.PASSWORDS:
				case CypherParser.PERIODIC:
				case CypherParser.PLAINTEXT:
				case CypherParser.POINT:
				case CypherParser.POPULATED:
				case CypherParser.PRIMARY:
				case CypherParser.PRIMARIES:
				case CypherParser.PRIVILEGE:
				case CypherParser.PRIVILEGES:
				case CypherParser.PROCEDURE:
				case CypherParser.PROCEDURES:
				case CypherParser.PROPERTIES:
				case CypherParser.PROPERTY:
				case CypherParser.RANGE:
				case CypherParser.READ:
				case CypherParser.REALLOCATE:
				case CypherParser.REDUCE:
				case CypherParser.RENAME:
				case CypherParser.REL:
				case CypherParser.RELATIONSHIP:
				case CypherParser.RELATIONSHIPS:
				case CypherParser.REMOVE:
				case CypherParser.REPLACE:
				case CypherParser.REPORT:
				case CypherParser.REQUIRE:
				case CypherParser.REQUIRED:
				case CypherParser.RETURN:
				case CypherParser.REVOKE:
				case CypherParser.ROLE:
				case CypherParser.ROLES:
				case CypherParser.ROW:
				case CypherParser.ROWS:
				case CypherParser.SCAN:
				case CypherParser.SEC:
				case CypherParser.SECOND:
				case CypherParser.SECONDARY:
				case CypherParser.SECONDARIES:
				case CypherParser.SECONDS:
				case CypherParser.SEEK:
				case CypherParser.SERVER:
				case CypherParser.SERVERS:
				case CypherParser.SET:
				case CypherParser.SETTING:
				case CypherParser.SETTINGS:
				case CypherParser.SHORTEST_PATH:
				case CypherParser.SHOW:
				case CypherParser.SINGLE:
				case CypherParser.SKIPROWS:
				case CypherParser.START:
				case CypherParser.STARTS:
				case CypherParser.STATUS:
				case CypherParser.STOP:
				case CypherParser.SUSPENDED:
				case CypherParser.TARGET:
				case CypherParser.TERMINATE:
				case CypherParser.TEXT:
				case CypherParser.THEN:
				case CypherParser.TO:
				case CypherParser.TOPOLOGY:
				case CypherParser.TRANSACTION:
				case CypherParser.TRANSACTIONS:
				case CypherParser.TRAVERSE:
				case CypherParser.TRUE:
				case CypherParser.TYPE:
				case CypherParser.TYPES:
				case CypherParser.UNION:
				case CypherParser.UNIQUE:
				case CypherParser.UNIQUENESS:
				case CypherParser.UNWIND:
				case CypherParser.USE:
				case CypherParser.USER:
				case CypherParser.USERS:
				case CypherParser.USING:
				case CypherParser.VERBOSE:
				case CypherParser.WAIT:
				case CypherParser.WHEN:
				case CypherParser.WHERE:
				case CypherParser.WITH:
				case CypherParser.WRITE:
				case CypherParser.XOR:
				case CypherParser.YIELD:
				case CypherParser.IDENTIFIER:
				case CypherParser.ESCAPED_SYMBOLIC_NAME:
					{
					this.state = 3202;
					this.symbolicAliasNameList();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case CypherParser.DEFAULT_TOKEN:
				{
				this.state = 3205;
				this.match(CypherParser.DEFAULT_TOKEN);
				this.state = 3206;
				this.match(CypherParser.GRAPH);
				}
				break;
			case CypherParser.HOME:
				{
				this.state = 3207;
				this.match(CypherParser.HOME);
				this.state = 3208;
				this.match(CypherParser.GRAPH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public createAlias(): CreateAliasContext {
		let _localctx: CreateAliasContext = new CreateAliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 440, CypherParser.RULE_createAlias);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3211;
			this.match(CypherParser.ALIAS);
			this.state = 3212;
			this.symbolicAliasName();
			this.state = 3216;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 3213;
				this.match(CypherParser.IF);
				this.state = 3214;
				this.match(CypherParser.NOT);
				this.state = 3215;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 3218;
			this.match(CypherParser.FOR);
			this.state = 3219;
			this.match(CypherParser.DATABASE);
			this.state = 3220;
			this.symbolicAliasName();
			this.state = 3231;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.AT) {
				{
				this.state = 3221;
				this.match(CypherParser.AT);
				this.state = 3222;
				this.stringOrParameter();
				this.state = 3223;
				this.match(CypherParser.USER);
				this.state = 3224;
				this.symbolicNameOrStringParameter();
				this.state = 3225;
				this.match(CypherParser.PASSWORD);
				this.state = 3226;
				this.passwordExpression();
				this.state = 3229;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				if (_la === CypherParser.DRIVER) {
					{
					this.state = 3227;
					this.match(CypherParser.DRIVER);
					this.state = 3228;
					this.mapOrParameter();
					}
				}

				}
			}

			this.state = 3235;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.PROPERTIES) {
				{
				this.state = 3233;
				this.match(CypherParser.PROPERTIES);
				this.state = 3234;
				this.mapOrParameter();
				}
			}

			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public dropAlias(): DropAliasContext {
		let _localctx: DropAliasContext = new DropAliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 442, CypherParser.RULE_dropAlias);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3237;
			this.match(CypherParser.ALIAS);
			this.state = 3238;
			this.symbolicAliasName();
			this.state = 3241;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 3239;
				this.match(CypherParser.IF);
				this.state = 3240;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 3243;
			this.match(CypherParser.FOR);
			this.state = 3244;
			this.match(CypherParser.DATABASE);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public alterAlias(): AlterAliasContext {
		let _localctx: AlterAliasContext = new AlterAliasContext(this._ctx, this.state);
		this.enterRule(_localctx, 444, CypherParser.RULE_alterAlias);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3246;
			this.match(CypherParser.ALIAS);
			this.state = 3247;
			this.symbolicAliasName();
			this.state = 3250;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if (_la === CypherParser.IF) {
				{
				this.state = 3248;
				this.match(CypherParser.IF);
				this.state = 3249;
				this.match(CypherParser.EXISTS);
				}
			}

			this.state = 3252;
			this.match(CypherParser.SET);
			this.state = 3253;
			this.match(CypherParser.DATABASE);
			this.state = 3268;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			do {
				{
				this.state = 3268;
				this._errHandler.sync(this);
				switch (this._input.LA(1)) {
				case CypherParser.TARGET:
					{
					this.state = 3254;
					this.match(CypherParser.TARGET);
					this.state = 3255;
					this.symbolicAliasName();
					this.state = 3258;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
					if (_la === CypherParser.AT) {
						{
						this.state = 3256;
						this.match(CypherParser.AT);
						this.state = 3257;
						this.stringOrParameter();
						}
					}

					}
					break;
				case CypherParser.USER:
					{
					this.state = 3260;
					this.match(CypherParser.USER);
					this.state = 3261;
					this.symbolicNameOrStringParameter();
					}
					break;
				case CypherParser.PASSWORD:
					{
					this.state = 3262;
					this.match(CypherParser.PASSWORD);
					this.state = 3263;
					this.passwordExpression();
					}
					break;
				case CypherParser.DRIVER:
					{
					this.state = 3264;
					this.match(CypherParser.DRIVER);
					this.state = 3265;
					this.mapOrParameter();
					}
					break;
				case CypherParser.PROPERTIES:
					{
					this.state = 3266;
					this.match(CypherParser.PROPERTIES);
					this.state = 3267;
					this.mapOrParameter();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				this.state = 3270;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			} while (_la === CypherParser.DRIVER || _la === CypherParser.PASSWORD || _la === CypherParser.PROPERTIES || _la === CypherParser.TARGET || _la === CypherParser.USER);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public showAliases(): ShowAliasesContext {
		let _localctx: ShowAliasesContext = new ShowAliasesContext(this._ctx, this.state);
		this.enterRule(_localctx, 446, CypherParser.RULE_showAliases);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3272;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.ALIAS || _la === CypherParser.ALIASES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3274;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 424, this._ctx) ) {
			case 1:
				{
				this.state = 3273;
				this.symbolicAliasName();
				}
				break;
			}
			this.state = 3276;
			this.match(CypherParser.FOR);
			this.state = 3277;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.DATABASE || _la === CypherParser.DATABASES)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			this.state = 3283;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.YIELD:
				{
				this.state = 3278;
				this.yieldClause();
				this.state = 3280;
				this._errHandler.sync(this);
				switch ( this.interpreter.adaptivePredict(this._input, 425, this._ctx) ) {
				case 1:
					{
					this.state = 3279;
					this.returnClause();
					}
					break;
				}
				}
				break;
			case CypherParser.WHERE:
				{
				this.state = 3282;
				this.whereClause();
				}
				break;
			case CypherParser.EOF:
			case CypherParser.ALTER:
			case CypherParser.CALL:
			case CypherParser.CREATE:
			case CypherParser.DEALLOCATE:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DETACH:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.ENABLE:
			case CypherParser.FOREACH:
			case CypherParser.GRANT:
			case CypherParser.LOAD:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.OPTIONAL:
			case CypherParser.REALLOCATE:
			case CypherParser.RENAME:
			case CypherParser.REMOVE:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.SEMICOLON:
			case CypherParser.SET:
			case CypherParser.SHOW:
			case CypherParser.START:
			case CypherParser.STOP:
			case CypherParser.TERMINATE:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USING:
			case CypherParser.WITH:
				break;
			default:
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicAliasNameList(): SymbolicAliasNameListContext {
		let _localctx: SymbolicAliasNameListContext = new SymbolicAliasNameListContext(this._ctx, this.state);
		this.enterRule(_localctx, 448, CypherParser.RULE_symbolicAliasNameList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3285;
			this.symbolicAliasName();
			this.state = 3290;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 3286;
				this.match(CypherParser.COMMA);
				this.state = 3287;
				this.symbolicAliasName();
				}
				}
				this.state = 3292;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicAliasName(): SymbolicAliasNameContext {
		let _localctx: SymbolicAliasNameContext = new SymbolicAliasNameContext(this._ctx, this.state);
		this.enterRule(_localctx, 450, CypherParser.RULE_symbolicAliasName);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3302;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 3293;
				this.symbolicNameString();
				this.state = 3298;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.DOT) {
					{
					{
					this.state = 3294;
					this.match(CypherParser.DOT);
					this.state = 3295;
					this.symbolicNameString();
					}
					}
					this.state = 3300;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
				break;
			case CypherParser.DOLLAR:
				{
				this.state = 3301;
				this.parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext {
		let _localctx: SymbolicNameOrStringParameterListContext = new SymbolicNameOrStringParameterListContext(this._ctx, this.state);
		this.enterRule(_localctx, 452, CypherParser.RULE_symbolicNameOrStringParameterList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3304;
			this.symbolicNameOrStringParameter();
			this.state = 3309;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 3305;
				this.match(CypherParser.COMMA);
				this.state = 3306;
				this.symbolicNameOrStringParameter();
				}
				}
				this.state = 3311;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext {
		let _localctx: SymbolicNameOrStringParameterContext = new SymbolicNameOrStringParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 454, CypherParser.RULE_symbolicNameOrStringParameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3314;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 3312;
				this.symbolicNameString();
				}
				break;
			case CypherParser.DOLLAR:
				{
				this.state = 3313;
				this.parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public glob(): GlobContext {
		let _localctx: GlobContext = new GlobContext(this._ctx, this.state);
		this.enterRule(_localctx, 456, CypherParser.RULE_glob);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3321;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 432, this._ctx) ) {
			case 1:
				{
				this.state = 3316;
				this.escapedSymbolicNameString();
				}
				break;

			case 2:
				{
				this.state = 3317;
				this.escapedSymbolicNameString();
				this.state = 3318;
				this.globRecursive();
				}
				break;

			case 3:
				{
				this.state = 3320;
				this.globRecursive();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public globRecursive(): GlobRecursiveContext {
		let _localctx: GlobRecursiveContext = new GlobRecursiveContext(this._ctx, this.state);
		this.enterRule(_localctx, 458, CypherParser.RULE_globRecursive);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3327;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 433, this._ctx) ) {
			case 1:
				{
				this.state = 3323;
				this.globPart();
				}
				break;

			case 2:
				{
				this.state = 3324;
				this.globPart();
				this.state = 3325;
				this.globRecursive();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public globPart(): GlobPartContext {
		let _localctx: GlobPartContext = new GlobPartContext(this._ctx, this.state);
		this.enterRule(_localctx, 460, CypherParser.RULE_globPart);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3335;
			this._errHandler.sync(this);
			switch ( this.interpreter.adaptivePredict(this._input, 434, this._ctx) ) {
			case 1:
				{
				this.state = 3329;
				this.match(CypherParser.DOT);
				this.state = 3330;
				this.escapedSymbolicNameString();
				}
				break;

			case 2:
				{
				this.state = 3331;
				this.match(CypherParser.QUESTION);
				}
				break;

			case 3:
				{
				this.state = 3332;
				this.match(CypherParser.TIMES);
				}
				break;

			case 4:
				{
				this.state = 3333;
				this.match(CypherParser.DOT);
				}
				break;

			case 5:
				{
				this.state = 3334;
				this.unescapedSymbolicNameString();
				}
				break;
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringImage(): StringImageContext {
		let _localctx: StringImageContext = new StringImageContext(this._ctx, this.state);
		this.enterRule(_localctx, 462, CypherParser.RULE_stringImage);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3337;
			this.stringToken();
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringList(): StringListContext {
		let _localctx: StringListContext = new StringListContext(this._ctx, this.state);
		this.enterRule(_localctx, 464, CypherParser.RULE_stringList);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3339;
			this.stringImage();
			this.state = 3344;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 3340;
				this.match(CypherParser.COMMA);
				this.state = 3341;
				this.stringImage();
				}
				}
				this.state = 3346;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringToken(): StringTokenContext {
		let _localctx: StringTokenContext = new StringTokenContext(this._ctx, this.state);
		this.enterRule(_localctx, 466, CypherParser.RULE_stringToken);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3347;
			_la = this._input.LA(1);
			if (!(_la === CypherParser.STRING_LITERAL1 || _la === CypherParser.STRING_LITERAL2)) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public stringOrParameter(): StringOrParameterContext {
		let _localctx: StringOrParameterContext = new StringOrParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 468, CypherParser.RULE_stringOrParameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3351;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.STRING_LITERAL1:
			case CypherParser.STRING_LITERAL2:
				{
				this.state = 3349;
				this.stringToken();
				}
				break;
			case CypherParser.DOLLAR:
				{
				this.state = 3350;
				this.parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public mapOrParameter(): MapOrParameterContext {
		let _localctx: MapOrParameterContext = new MapOrParameterContext(this._ctx, this.state);
		this.enterRule(_localctx, 470, CypherParser.RULE_mapOrParameter);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3355;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.LCURLY:
				{
				this.state = 3353;
				this.map();
				}
				break;
			case CypherParser.DOLLAR:
				{
				this.state = 3354;
				this.parameter();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public map(): MapContext {
		let _localctx: MapContext = new MapContext(this._ctx, this.state);
		this.enterRule(_localctx, 472, CypherParser.RULE_map);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3357;
			this.match(CypherParser.LCURLY);
			this.state = 3371;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			if ((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)) | (1 << (CypherParser.ESCAPED_SYMBOLIC_NAME - 226)))) !== 0)) {
				{
				this.state = 3358;
				this.symbolicNameString();
				this.state = 3359;
				this.match(CypherParser.COLON);
				this.state = 3360;
				this.expression();
				this.state = 3368;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
				while (_la === CypherParser.COMMA) {
					{
					{
					this.state = 3361;
					this.match(CypherParser.COMMA);
					this.state = 3362;
					this.symbolicNameString();
					this.state = 3363;
					this.match(CypherParser.COLON);
					this.state = 3364;
					this.expression();
					}
					}
					this.state = 3370;
					this._errHandler.sync(this);
					_la = this._input.LA(1);
				}
				}
			}

			this.state = 3373;
			this.match(CypherParser.RCURLY);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicNamePositions(): SymbolicNamePositionsContext {
		let _localctx: SymbolicNamePositionsContext = new SymbolicNamePositionsContext(this._ctx, this.state);
		this.enterRule(_localctx, 474, CypherParser.RULE_symbolicNamePositions);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3375;
			this.symbolicNameString();
			this.state = 3380;
			this._errHandler.sync(this);
			_la = this._input.LA(1);
			while (_la === CypherParser.COMMA) {
				{
				{
				this.state = 3376;
				this.match(CypherParser.COMMA);
				this.state = 3377;
				this.symbolicNameString();
				}
				}
				this.state = 3382;
				this._errHandler.sync(this);
				_la = this._input.LA(1);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public symbolicNameString(): SymbolicNameStringContext {
		let _localctx: SymbolicNameStringContext = new SymbolicNameStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 476, CypherParser.RULE_symbolicNameString);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3385;
			this._errHandler.sync(this);
			switch (this._input.LA(1)) {
			case CypherParser.ESCAPED_SYMBOLIC_NAME:
				{
				this.state = 3383;
				this.escapedSymbolicNameString();
				}
				break;
			case CypherParser.ACCESS:
			case CypherParser.ACTIVE:
			case CypherParser.ADMIN:
			case CypherParser.ADMINISTRATOR:
			case CypherParser.ALIAS:
			case CypherParser.ALIASES:
			case CypherParser.ALL_SHORTEST_PATH:
			case CypherParser.ALL:
			case CypherParser.ALTER:
			case CypherParser.AND:
			case CypherParser.ANY:
			case CypherParser.AS:
			case CypherParser.ASC:
			case CypherParser.ASSERT:
			case CypherParser.ASSIGN:
			case CypherParser.AT:
			case CypherParser.BOOSTED:
			case CypherParser.BREAK:
			case CypherParser.BRIEF:
			case CypherParser.BTREE:
			case CypherParser.BUILT:
			case CypherParser.BY:
			case CypherParser.CALL:
			case CypherParser.CASE:
			case CypherParser.CHANGE:
			case CypherParser.COMMAND:
			case CypherParser.COMMANDS:
			case CypherParser.COMMIT:
			case CypherParser.COMPOSITE:
			case CypherParser.CONSTRAINT:
			case CypherParser.CONSTRAINTS:
			case CypherParser.CONTAINS:
			case CypherParser.COPY:
			case CypherParser.CONTINUE:
			case CypherParser.COUNT:
			case CypherParser.CREATE:
			case CypherParser.CSV:
			case CypherParser.CURRENT:
			case CypherParser.DATA:
			case CypherParser.DATABASE:
			case CypherParser.DATABASES:
			case CypherParser.DBMS:
			case CypherParser.DEALLOCATE:
			case CypherParser.DEFAULT_TOKEN:
			case CypherParser.DEFINED:
			case CypherParser.DELETE:
			case CypherParser.DENY:
			case CypherParser.DESC:
			case CypherParser.DESTROY:
			case CypherParser.DETACH:
			case CypherParser.DISTINCT:
			case CypherParser.DRIVER:
			case CypherParser.DROP:
			case CypherParser.DRYRUN:
			case CypherParser.DUMP:
			case CypherParser.EACH:
			case CypherParser.ENABLE:
			case CypherParser.ELEMENT:
			case CypherParser.ELEMENTS:
			case CypherParser.ELSE:
			case CypherParser.ENCRYPTED:
			case CypherParser.END:
			case CypherParser.ENDS:
			case CypherParser.EXECUTABLE:
			case CypherParser.EXECUTE:
			case CypherParser.EXIST:
			case CypherParser.EXISTENCE:
			case CypherParser.EXISTS:
			case CypherParser.ERROR:
			case CypherParser.FAIL:
			case CypherParser.FALSE:
			case CypherParser.FIELDTERMINATOR:
			case CypherParser.FOR:
			case CypherParser.FOREACH:
			case CypherParser.FROM:
			case CypherParser.FULLTEXT:
			case CypherParser.FUNCTION:
			case CypherParser.FUNCTIONS:
			case CypherParser.GRANT:
			case CypherParser.GRAPH:
			case CypherParser.GRAPHS:
			case CypherParser.HEADERS:
			case CypherParser.HOME:
			case CypherParser.IF:
			case CypherParser.IMMUTABLE:
			case CypherParser.IN:
			case CypherParser.INDEX:
			case CypherParser.INDEXES:
			case CypherParser.INF:
			case CypherParser.INFINITY:
			case CypherParser.IS:
			case CypherParser.JOIN:
			case CypherParser.KEY:
			case CypherParser.LABEL:
			case CypherParser.LABELS:
			case CypherParser.LIMITROWS:
			case CypherParser.LOAD:
			case CypherParser.LOOKUP:
			case CypherParser.MANAGEMENT:
			case CypherParser.MATCH:
			case CypherParser.MERGE:
			case CypherParser.NAME:
			case CypherParser.NAMES:
			case CypherParser.NAN:
			case CypherParser.NEW:
			case CypherParser.NODE:
			case CypherParser.NODES:
			case CypherParser.NONE:
			case CypherParser.NOT:
			case CypherParser.NOWAIT:
			case CypherParser.NULL:
			case CypherParser.OF:
			case CypherParser.ON:
			case CypherParser.ONLY:
			case CypherParser.OPTIONAL:
			case CypherParser.OPTIONS:
			case CypherParser.OPTION:
			case CypherParser.OR:
			case CypherParser.ORDER:
			case CypherParser.OUTPUT:
			case CypherParser.PASSWORD:
			case CypherParser.PASSWORDS:
			case CypherParser.PERIODIC:
			case CypherParser.PLAINTEXT:
			case CypherParser.POINT:
			case CypherParser.POPULATED:
			case CypherParser.PRIMARY:
			case CypherParser.PRIMARIES:
			case CypherParser.PRIVILEGE:
			case CypherParser.PRIVILEGES:
			case CypherParser.PROCEDURE:
			case CypherParser.PROCEDURES:
			case CypherParser.PROPERTIES:
			case CypherParser.PROPERTY:
			case CypherParser.RANGE:
			case CypherParser.READ:
			case CypherParser.REALLOCATE:
			case CypherParser.REDUCE:
			case CypherParser.RENAME:
			case CypherParser.REL:
			case CypherParser.RELATIONSHIP:
			case CypherParser.RELATIONSHIPS:
			case CypherParser.REMOVE:
			case CypherParser.REPLACE:
			case CypherParser.REPORT:
			case CypherParser.REQUIRE:
			case CypherParser.REQUIRED:
			case CypherParser.RETURN:
			case CypherParser.REVOKE:
			case CypherParser.ROLE:
			case CypherParser.ROLES:
			case CypherParser.ROW:
			case CypherParser.ROWS:
			case CypherParser.SCAN:
			case CypherParser.SEC:
			case CypherParser.SECOND:
			case CypherParser.SECONDARY:
			case CypherParser.SECONDARIES:
			case CypherParser.SECONDS:
			case CypherParser.SEEK:
			case CypherParser.SERVER:
			case CypherParser.SERVERS:
			case CypherParser.SET:
			case CypherParser.SETTING:
			case CypherParser.SETTINGS:
			case CypherParser.SHORTEST_PATH:
			case CypherParser.SHOW:
			case CypherParser.SINGLE:
			case CypherParser.SKIPROWS:
			case CypherParser.START:
			case CypherParser.STARTS:
			case CypherParser.STATUS:
			case CypherParser.STOP:
			case CypherParser.SUSPENDED:
			case CypherParser.TARGET:
			case CypherParser.TERMINATE:
			case CypherParser.TEXT:
			case CypherParser.THEN:
			case CypherParser.TO:
			case CypherParser.TOPOLOGY:
			case CypherParser.TRANSACTION:
			case CypherParser.TRANSACTIONS:
			case CypherParser.TRAVERSE:
			case CypherParser.TRUE:
			case CypherParser.TYPE:
			case CypherParser.TYPES:
			case CypherParser.UNION:
			case CypherParser.UNIQUE:
			case CypherParser.UNIQUENESS:
			case CypherParser.UNWIND:
			case CypherParser.USE:
			case CypherParser.USER:
			case CypherParser.USERS:
			case CypherParser.USING:
			case CypherParser.VERBOSE:
			case CypherParser.WAIT:
			case CypherParser.WHEN:
			case CypherParser.WHERE:
			case CypherParser.WITH:
			case CypherParser.WRITE:
			case CypherParser.XOR:
			case CypherParser.YIELD:
			case CypherParser.IDENTIFIER:
				{
				this.state = 3384;
				this.unescapedSymbolicNameString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public escapedSymbolicNameString(): EscapedSymbolicNameStringContext {
		let _localctx: EscapedSymbolicNameStringContext = new EscapedSymbolicNameStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 478, CypherParser.RULE_escapedSymbolicNameString);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3387;
			this.match(CypherParser.ESCAPED_SYMBOLIC_NAME);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public unescapedSymbolicNameString(): UnescapedSymbolicNameStringContext {
		let _localctx: UnescapedSymbolicNameStringContext = new UnescapedSymbolicNameStringContext(this._ctx, this.state);
		this.enterRule(_localctx, 480, CypherParser.RULE_unescapedSymbolicNameString);
		let _la: number;
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3389;
			_la = this._input.LA(1);
			if (!((((_la) & ~0x1F) === 0 && ((1 << _la) & ((1 << CypherParser.ACCESS) | (1 << CypherParser.ACTIVE) | (1 << CypherParser.ADMIN) | (1 << CypherParser.ADMINISTRATOR) | (1 << CypherParser.ALIAS) | (1 << CypherParser.ALIASES) | (1 << CypherParser.ALL_SHORTEST_PATH) | (1 << CypherParser.ALL) | (1 << CypherParser.ALTER) | (1 << CypherParser.AND) | (1 << CypherParser.ANY) | (1 << CypherParser.AS) | (1 << CypherParser.ASC) | (1 << CypherParser.ASSERT) | (1 << CypherParser.ASSIGN) | (1 << CypherParser.AT) | (1 << CypherParser.BOOSTED) | (1 << CypherParser.BREAK) | (1 << CypherParser.BRIEF) | (1 << CypherParser.BTREE) | (1 << CypherParser.BUILT) | (1 << CypherParser.BY) | (1 << CypherParser.CALL) | (1 << CypherParser.CASE))) !== 0) || ((((_la - 32)) & ~0x1F) === 0 && ((1 << (_la - 32)) & ((1 << (CypherParser.CHANGE - 32)) | (1 << (CypherParser.COMMAND - 32)) | (1 << (CypherParser.COMMANDS - 32)) | (1 << (CypherParser.COMMIT - 32)) | (1 << (CypherParser.COMPOSITE - 32)) | (1 << (CypherParser.CONSTRAINT - 32)) | (1 << (CypherParser.CONSTRAINTS - 32)) | (1 << (CypherParser.CONTAINS - 32)) | (1 << (CypherParser.COPY - 32)) | (1 << (CypherParser.CONTINUE - 32)) | (1 << (CypherParser.COUNT - 32)) | (1 << (CypherParser.CREATE - 32)) | (1 << (CypherParser.CSV - 32)) | (1 << (CypherParser.CURRENT - 32)) | (1 << (CypherParser.DATA - 32)) | (1 << (CypherParser.DATABASE - 32)) | (1 << (CypherParser.DATABASES - 32)) | (1 << (CypherParser.DBMS - 32)) | (1 << (CypherParser.DEALLOCATE - 32)) | (1 << (CypherParser.DEFAULT_TOKEN - 32)) | (1 << (CypherParser.DEFINED - 32)) | (1 << (CypherParser.DELETE - 32)) | (1 << (CypherParser.DENY - 32)) | (1 << (CypherParser.DESC - 32)) | (1 << (CypherParser.DESTROY - 32)) | (1 << (CypherParser.DETACH - 32)) | (1 << (CypherParser.DISTINCT - 32)))) !== 0) || ((((_la - 65)) & ~0x1F) === 0 && ((1 << (_la - 65)) & ((1 << (CypherParser.DRIVER - 65)) | (1 << (CypherParser.DROP - 65)) | (1 << (CypherParser.DRYRUN - 65)) | (1 << (CypherParser.DUMP - 65)) | (1 << (CypherParser.EACH - 65)) | (1 << (CypherParser.ENABLE - 65)) | (1 << (CypherParser.ELEMENT - 65)) | (1 << (CypherParser.ELEMENTS - 65)) | (1 << (CypherParser.ELSE - 65)) | (1 << (CypherParser.ENCRYPTED - 65)) | (1 << (CypherParser.END - 65)) | (1 << (CypherParser.ENDS - 65)) | (1 << (CypherParser.EXECUTABLE - 65)) | (1 << (CypherParser.EXECUTE - 65)) | (1 << (CypherParser.EXIST - 65)) | (1 << (CypherParser.EXISTENCE - 65)) | (1 << (CypherParser.EXISTS - 65)) | (1 << (CypherParser.ERROR - 65)) | (1 << (CypherParser.FAIL - 65)) | (1 << (CypherParser.FALSE - 65)) | (1 << (CypherParser.FIELDTERMINATOR - 65)) | (1 << (CypherParser.FOR - 65)) | (1 << (CypherParser.FOREACH - 65)) | (1 << (CypherParser.FROM - 65)) | (1 << (CypherParser.FULLTEXT - 65)) | (1 << (CypherParser.FUNCTION - 65)) | (1 << (CypherParser.FUNCTIONS - 65)) | (1 << (CypherParser.GRANT - 65)) | (1 << (CypherParser.GRAPH - 65)) | (1 << (CypherParser.GRAPHS - 65)))) !== 0) || ((((_la - 98)) & ~0x1F) === 0 && ((1 << (_la - 98)) & ((1 << (CypherParser.HEADERS - 98)) | (1 << (CypherParser.HOME - 98)) | (1 << (CypherParser.IF - 98)) | (1 << (CypherParser.IMMUTABLE - 98)) | (1 << (CypherParser.IN - 98)) | (1 << (CypherParser.INDEX - 98)) | (1 << (CypherParser.INDEXES - 98)) | (1 << (CypherParser.INF - 98)) | (1 << (CypherParser.INFINITY - 98)) | (1 << (CypherParser.IS - 98)) | (1 << (CypherParser.JOIN - 98)) | (1 << (CypherParser.KEY - 98)) | (1 << (CypherParser.LABEL - 98)) | (1 << (CypherParser.LABELS - 98)) | (1 << (CypherParser.LIMITROWS - 98)) | (1 << (CypherParser.LOAD - 98)) | (1 << (CypherParser.LOOKUP - 98)) | (1 << (CypherParser.MANAGEMENT - 98)) | (1 << (CypherParser.MATCH - 98)) | (1 << (CypherParser.MERGE - 98)))) !== 0) || ((((_la - 130)) & ~0x1F) === 0 && ((1 << (_la - 130)) & ((1 << (CypherParser.NAME - 130)) | (1 << (CypherParser.NAMES - 130)) | (1 << (CypherParser.NAN - 130)) | (1 << (CypherParser.NEW - 130)) | (1 << (CypherParser.NODE - 130)) | (1 << (CypherParser.NODES - 130)) | (1 << (CypherParser.NONE - 130)) | (1 << (CypherParser.NOT - 130)) | (1 << (CypherParser.NOWAIT - 130)) | (1 << (CypherParser.NULL - 130)) | (1 << (CypherParser.OF - 130)) | (1 << (CypherParser.ON - 130)) | (1 << (CypherParser.ONLY - 130)) | (1 << (CypherParser.OPTIONAL - 130)) | (1 << (CypherParser.OPTIONS - 130)) | (1 << (CypherParser.OPTION - 130)) | (1 << (CypherParser.OR - 130)) | (1 << (CypherParser.ORDER - 130)) | (1 << (CypherParser.OUTPUT - 130)) | (1 << (CypherParser.PASSWORD - 130)) | (1 << (CypherParser.PASSWORDS - 130)) | (1 << (CypherParser.PERIODIC - 130)) | (1 << (CypherParser.PLAINTEXT - 130)) | (1 << (CypherParser.POINT - 130)) | (1 << (CypherParser.POPULATED - 130)) | (1 << (CypherParser.PRIMARY - 130)) | (1 << (CypherParser.PRIMARIES - 130)) | (1 << (CypherParser.PRIVILEGE - 130)) | (1 << (CypherParser.PRIVILEGES - 130)))) !== 0) || ((((_la - 162)) & ~0x1F) === 0 && ((1 << (_la - 162)) & ((1 << (CypherParser.PROCEDURE - 162)) | (1 << (CypherParser.PROCEDURES - 162)) | (1 << (CypherParser.PROPERTIES - 162)) | (1 << (CypherParser.PROPERTY - 162)) | (1 << (CypherParser.RANGE - 162)) | (1 << (CypherParser.READ - 162)) | (1 << (CypherParser.REALLOCATE - 162)) | (1 << (CypherParser.REDUCE - 162)) | (1 << (CypherParser.RENAME - 162)) | (1 << (CypherParser.REL - 162)) | (1 << (CypherParser.RELATIONSHIP - 162)) | (1 << (CypherParser.RELATIONSHIPS - 162)) | (1 << (CypherParser.REMOVE - 162)) | (1 << (CypherParser.REPLACE - 162)) | (1 << (CypherParser.REPORT - 162)) | (1 << (CypherParser.REQUIRE - 162)) | (1 << (CypherParser.REQUIRED - 162)) | (1 << (CypherParser.RETURN - 162)) | (1 << (CypherParser.REVOKE - 162)) | (1 << (CypherParser.ROLE - 162)) | (1 << (CypherParser.ROLES - 162)) | (1 << (CypherParser.ROW - 162)) | (1 << (CypherParser.ROWS - 162)) | (1 << (CypherParser.SCAN - 162)) | (1 << (CypherParser.SEC - 162)) | (1 << (CypherParser.SECOND - 162)) | (1 << (CypherParser.SECONDARY - 162)))) !== 0) || ((((_la - 194)) & ~0x1F) === 0 && ((1 << (_la - 194)) & ((1 << (CypherParser.SECONDARIES - 194)) | (1 << (CypherParser.SECONDS - 194)) | (1 << (CypherParser.SEEK - 194)) | (1 << (CypherParser.SERVER - 194)) | (1 << (CypherParser.SERVERS - 194)) | (1 << (CypherParser.SET - 194)) | (1 << (CypherParser.SETTING - 194)) | (1 << (CypherParser.SETTINGS - 194)) | (1 << (CypherParser.SHORTEST_PATH - 194)) | (1 << (CypherParser.SHOW - 194)) | (1 << (CypherParser.SINGLE - 194)) | (1 << (CypherParser.SKIPROWS - 194)) | (1 << (CypherParser.START - 194)) | (1 << (CypherParser.STARTS - 194)) | (1 << (CypherParser.STATUS - 194)) | (1 << (CypherParser.STOP - 194)) | (1 << (CypherParser.SUSPENDED - 194)) | (1 << (CypherParser.TARGET - 194)) | (1 << (CypherParser.TERMINATE - 194)) | (1 << (CypherParser.TEXT - 194)) | (1 << (CypherParser.THEN - 194)) | (1 << (CypherParser.TO - 194)) | (1 << (CypherParser.TOPOLOGY - 194)) | (1 << (CypherParser.TRANSACTION - 194)) | (1 << (CypherParser.TRANSACTIONS - 194)) | (1 << (CypherParser.TRAVERSE - 194)) | (1 << (CypherParser.TRUE - 194)) | (1 << (CypherParser.TYPE - 194)) | (1 << (CypherParser.TYPES - 194)) | (1 << (CypherParser.UNION - 194)))) !== 0) || ((((_la - 226)) & ~0x1F) === 0 && ((1 << (_la - 226)) & ((1 << (CypherParser.UNIQUE - 226)) | (1 << (CypherParser.UNIQUENESS - 226)) | (1 << (CypherParser.UNWIND - 226)) | (1 << (CypherParser.USE - 226)) | (1 << (CypherParser.USER - 226)) | (1 << (CypherParser.USERS - 226)) | (1 << (CypherParser.USING - 226)) | (1 << (CypherParser.VERBOSE - 226)) | (1 << (CypherParser.WAIT - 226)) | (1 << (CypherParser.WHEN - 226)) | (1 << (CypherParser.WHERE - 226)) | (1 << (CypherParser.WITH - 226)) | (1 << (CypherParser.WRITE - 226)) | (1 << (CypherParser.XOR - 226)) | (1 << (CypherParser.YIELD - 226)) | (1 << (CypherParser.IDENTIFIER - 226)))) !== 0))) {
			this._errHandler.recoverInline(this);
			} else {
				if (this._input.LA(1) === Token.EOF) {
					this.matchedEOF = true;
				}

				this._errHandler.reportMatch(this);
				this.consume();
			}
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}
	// @RuleVersion(0)
	public endOfFile(): EndOfFileContext {
		let _localctx: EndOfFileContext = new EndOfFileContext(this._ctx, this.state);
		this.enterRule(_localctx, 482, CypherParser.RULE_endOfFile);
		try {
			this.enterOuterAlt(_localctx, 1);
			{
			this.state = 3391;
			this.match(CypherParser.EOF);
			}
		}
		catch (re) {
			if (re instanceof RecognitionException) {
				_localctx.exception = re;
				this._errHandler.reportError(this, re);
				this._errHandler.recover(this, re);
			} else {
				throw re;
			}
		}
		finally {
			this.exitRule();
		}
		return _localctx;
	}

	private static readonly _serializedATNSegments: number = 7;
	private static readonly _serializedATNSegment0: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x03\u0109\u0D44\x04" +
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04" +
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r" +
		"\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t\x12" +
		"\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t\x17" +
		"\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t\x1C" +
		"\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t\"\x04" +
		"#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04+\t" +
		"+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x048\t8\x049\t9\x04:\t:\x04;\t;\x04<\t<\x04" +
		"=\t=\x04>\t>\x04?\t?\x04@\t@\x04A\tA\x04B\tB\x04C\tC\x04D\tD\x04E\tE\x04" +
		"F\tF\x04G\tG\x04H\tH\x04I\tI\x04J\tJ\x04K\tK\x04L\tL\x04M\tM\x04N\tN\x04" +
		"O\tO\x04P\tP\x04Q\tQ\x04R\tR\x04S\tS\x04T\tT\x04U\tU\x04V\tV\x04W\tW\x04" +
		"X\tX\x04Y\tY\x04Z\tZ\x04[\t[\x04\\\t\\\x04]\t]\x04^\t^\x04_\t_\x04`\t" +
		"`\x04a\ta\x04b\tb\x04c\tc\x04d\td\x04e\te\x04f\tf\x04g\tg\x04h\th\x04" +
		"i\ti\x04j\tj\x04k\tk\x04l\tl\x04m\tm\x04n\tn\x04o\to\x04p\tp\x04q\tq\x04" +
		"r\tr\x04s\ts\x04t\tt\x04u\tu\x04v\tv\x04w\tw\x04x\tx\x04y\ty\x04z\tz\x04" +
		"{\t{\x04|\t|\x04}\t}\x04~\t~\x04\x7F\t\x7F\x04\x80\t\x80\x04\x81\t\x81" +
		"\x04\x82\t\x82\x04\x83\t\x83\x04\x84\t\x84\x04\x85\t\x85\x04\x86\t\x86" +
		"\x04\x87\t\x87\x04\x88\t\x88\x04\x89\t\x89\x04\x8A\t\x8A\x04\x8B\t\x8B" +
		"\x04\x8C\t\x8C\x04\x8D\t\x8D\x04\x8E\t\x8E\x04\x8F\t\x8F\x04\x90\t\x90" +
		"\x04\x91\t\x91\x04\x92\t\x92\x04\x93\t\x93\x04\x94\t\x94\x04\x95\t\x95" +
		"\x04\x96\t\x96\x04\x97\t\x97\x04\x98\t\x98\x04\x99\t\x99\x04\x9A\t\x9A" +
		"\x04\x9B\t\x9B\x04\x9C\t\x9C\x04\x9D\t\x9D\x04\x9E\t\x9E\x04\x9F\t\x9F" +
		"\x04\xA0\t\xA0\x04\xA1\t\xA1\x04\xA2\t\xA2\x04\xA3\t\xA3\x04\xA4\t\xA4" +
		"\x04\xA5\t\xA5\x04\xA6\t\xA6\x04\xA7\t\xA7\x04\xA8\t\xA8\x04\xA9\t\xA9" +
		"\x04\xAA\t\xAA\x04\xAB\t\xAB\x04\xAC\t\xAC\x04\xAD\t\xAD\x04\xAE\t\xAE" +
		"\x04\xAF\t\xAF\x04\xB0\t\xB0\x04\xB1\t\xB1\x04\xB2\t\xB2\x04\xB3\t\xB3" +
		"\x04\xB4\t\xB4\x04\xB5\t\xB5\x04\xB6\t\xB6\x04\xB7\t\xB7\x04\xB8\t\xB8" +
		"\x04\xB9\t\xB9\x04\xBA\t\xBA\x04\xBB\t\xBB\x04\xBC\t\xBC\x04\xBD\t\xBD" +
		"\x04\xBE\t\xBE\x04\xBF\t\xBF\x04\xC0\t\xC0\x04\xC1\t\xC1\x04\xC2\t\xC2" +
		"\x04\xC3\t\xC3\x04\xC4\t\xC4\x04\xC5\t\xC5\x04\xC6\t\xC6\x04\xC7\t\xC7" +
		"\x04\xC8\t\xC8\x04\xC9\t\xC9\x04\xCA\t\xCA\x04\xCB\t\xCB\x04\xCC\t\xCC" +
		"\x04\xCD\t\xCD\x04\xCE\t\xCE\x04\xCF\t\xCF\x04\xD0\t\xD0\x04\xD1\t\xD1" +
		"\x04\xD2\t\xD2\x04\xD3\t\xD3\x04\xD4\t\xD4\x04\xD5\t\xD5\x04\xD6\t\xD6" +
		"\x04\xD7\t\xD7\x04\xD8\t\xD8\x04\xD9\t\xD9\x04\xDA\t\xDA\x04\xDB\t\xDB" +
		"\x04\xDC\t\xDC\x04\xDD\t\xDD\x04\xDE\t\xDE\x04\xDF\t\xDF\x04\xE0\t\xE0" +
		"\x04\xE1\t\xE1\x04\xE2\t\xE2\x04\xE3\t\xE3\x04\xE4\t\xE4\x04\xE5\t\xE5" +
		"\x04\xE6\t\xE6\x04\xE7\t\xE7\x04\xE8\t\xE8\x04\xE9\t\xE9\x04\xEA\t\xEA" +
		"\x04\xEB\t\xEB\x04\xEC\t\xEC\x04\xED\t\xED\x04\xEE\t\xEE\x04\xEF\t\xEF" +
		"\x04\xF0\t\xF0\x04\xF1\t\xF1\x04\xF2\t\xF2\x04\xF3\t\xF3\x03\x02\x06\x02" +
		"\u01E8\n\x02\r\x02\x0E\x02\u01E9\x03\x02\x03\x02\x03\x03\x05\x03\u01EF" +
		"\n\x03\x03\x03\x03\x03\x03\x03\x03\x03\x05\x03\u01F5\n\x03\x03\x03\x05" +
		"\x03\u01F8\n\x03\x03\x04\x03\x04\x03\x04\x03\x04\x07\x04\u01FE\n\x04\f" +
		"\x04\x0E\x04\u0201\v\x04\x05\x04\u0203\n\x04\x03\x05\x03\x05\x03\x05\x03" +
		"\x05\x07\x05\u0209\n\x05\f\x05\x0E\x05\u020C\v\x05\x05\x05\u020E\n\x05" +
		"\x03\x06\x03\x06\x03\x06\x03\x06\x05\x06\u0214\n\x06\x03\x07\x03\x07\x07" +
		"\x07\u0218\n\x07\f\x07\x0E\x07\u021B\v\x07\x03\b\x03\b\x05\b\u021F\n\b" +
		"\x03\b\x03\b\x03\t\x06\t\u0224\n\t\r\t\x0E\t\u0225\x03\n\x07\n\u0229\n" +
		"\n\f\n\x0E\n\u022C\v\n\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v" +
		"\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x05\v\u023C\n\v\x03\f\x03\f\x03\f" +
		"\x03\f\x05\f\u0242\n\f\x03\r\x03\r\x03\r\x03\x0E\x05\x0E\u0248\n\x0E\x03" +
		"\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x07\x0E\u0250\n\x0E\f\x0E" +
		"\x0E\x0E\u0253\v\x0E\x05\x0E\u0255\n\x0E\x03\x0E\x05\x0E\u0258\n\x0E\x03" +
		"\x0E\x05\x0E\u025B\n\x0E\x03\x0F\x03\x0F\x03\x0F\x05\x0F\u0260\n\x0F\x03" +
		"\x10\x03\x10\x03\x10\x07\x10\u0265\n\x10\f\x10\x0E\x10\u0268\v\x10\x03" +
		"\x10\x03\x10\x03\x10\x07\x10\u026D\n\x10\f\x10\x0E\x10\u0270\v\x10\x05" +
		"\x10\u0272\n\x10\x03\x11\x03\x11\x03\x11\x05\x11\u0277\n\x11\x05\x11\u0279" +
		"\n\x11\x03\x12\x03\x12\x03\x12\x03\x13\x03\x13\x03\x13\x03\x14\x03\x14" +
		"\x03\x14\x03\x15\x03\x15\x03\x15\x05\x15\u0287\n\x15\x03\x16\x03\x16\x03" +
		"\x16\x03\x17\x03\x17\x03\x17\x03\x17\x07\x17\u0290\n\x17\f\x17\x0E\x17" +
		"\u0293\v\x17\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03" +
		"\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x03\x18\x05\x18\u02A4" +
		"\n\x18\x03\x19\x03\x19\x03\x19\x03\x19\x07\x19\u02AA\n\x19\f\x19\x0E\x19" +
		"\u02AD\v\x19\x03\x1A\x03\x1A\x03\x1A\x03\x1A\x05\x1A\u02B3\n\x1A\x03\x1B" +
		"\x05\x1B\u02B6\n\x1B\x03\x1B\x03\x1B\x03\x1B\x03\x1B\x07\x1B\u02BC\n\x1B" +
		"\f\x1B\x0E\x1B\u02BF\v\x1B\x03\x1C\x03\x1C\x03\x1C\x05\x1C\u02C4\n\x1C" +
		"\x03\x1C\x03\x1C\x07\x1C\u02C8\n\x1C\f\x1C\x0E\x1C\u02CB\v\x1C\x03\x1C" +
		"\x05\x1C\u02CE\n\x1C\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03" +
		"\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x03\x1D\x05\x1D\u02E6\n\x1D" +
		"\x03\x1E\x05\x1E\u02E9\n\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03\x1E\x03" +
		"\x1E\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x03\x1F\x05\x1F\u02F8" +
		"\n\x1F\x07\x1F\u02FA\n\x1F\f\x1F\x0E\x1F\u02FD\v\x1F\x03 \x03 \x03 \x03" +
		" \x03 \x03!\x03!\x03!\x03!\x05!\u0308\n!\x03!\x03!\x07!\u030C\n!\f!\x0E" +
		"!\u030F\v!\x03!\x05!\u0312\n!\x03!\x03!\x03!\x03!\x03!\x07!\u0319\n!\f" +
		"!\x0E!\u031C\v!\x03!\x05!\u031F\n!\x05!\u0321\n!\x05!\u0323\n!\x03\"\x03" +
		"\"\x03\"\x03#\x03#\x03$\x03$\x03$\x05$\u032D\n$\x03%\x03%\x03%\x03%\x05" +
		"%\u0333\n%\x03%\x03%\x03%\x03%\x03%\x03%\x05%\u033B\n%\x03&\x03&\x03&" +
		"\x03&\x03&\x03&\x03&\x06&\u0344\n&\r&\x0E&\u0345\x03&\x03&\x03\'\x03\'" +
		"\x03\'\x03\'\x03\'\x05\'\u034F\n\'\x03(\x03(\x03(\x03(\x03(\x07(\u0356" +
		"\n(\f(\x0E(\u0359\v(\x03)\x03)\x03)\x03)\x03*\x03*\x03*\x03*\x03+\x03" +
		"+\x03+\x03+\x03+\x03,\x03,\x03,\x07,\u036B\n,\f,\x0E,\u036E\v,\x03-\x03" +
		"-\x03-\x03-\x03-\x05-\u0375\n-\x03.\x03.\x03.\x03.\x03.\x05.\u037C\n." +
		"\x03.\x03.\x05.\u0380\n.\x03.\x03.\x03.\x05.\u0385\n.\x03/\x03/\x05/\u0389" +
		"\n/\x030\x030\x030\x030\x030\x030\x030\x030\x030\x030\x050\u0395\n0\x03" +
		"1\x031\x051\u0399\n1\x032\x032\x032\x032\x072\u039F\n2\f2\x0E2\u03A2\v" +
		"2\x032\x062\u03A5\n2\r2\x0E2\u03A6\x033\x033\x033\x033\x063\u03AD\n3\r" +
		"3\x0E3\u03AE\x034\x034\x034\x034\x034\x034\x034\x034\x034\x054\u03BA\n" +
		"4\x034\x034\x034\x054\u03BF\n4\x034\x054\u03C2\n4\x034\x054\u03C5\n4\x03" +
		"4\x034\x054\u03C9\n4\x054\u03CB\n4\x034\x034\x035\x035\x035\x035\x055" +
		"\u03D3\n5\x035\x035\x055\u03D7\n5\x036\x066\u03DA\n6\r6\x0E6\u03DB\x03" +
		"7\x037\x038\x038\x038\x039\x039\x039\x039\x079\u03E7\n9\f9\x0E9\u03EA" +
		"\v9\x03:\x03:\x05:\u03EE\n:\x03;\x05;\u03F1\n;\x03;\x03;\x03;\x03;\x03" +
		";\x03;\x03;\x03;\x03;\x03;\x05;\u03FD\n;\x03;\x03;\x03;\x05;\u0402\n;" +
		"\x03;\x05;\u0405\n;\x03;\x05;\u0408\n;\x03;\x05;\u040B\n;\x03;\x03;\x05" +
		";\u040F\n;\x05;\u0411\n;\x03;\x05;\u0414\n;\x03;\x03;\x05;\u0418\n;\x03" +
		"<\x03<\x03=\x03=\x03>\x03>\x03?\x03?\x05?\u0422\n?\x03@\x05@\u0425\n@" +
		"\x03@\x03@\x05@\u0429\n@\x03@\x05@\u042C\n@\x03A\x03A\x03A\x03B\x03B\x05" +
		"B\u0433\nB\x03C\x03C\x03C\x03C\x03C\x05C\u043A\nC\x07C\u043C\nC\fC\x0E" +
		"C\u043F\vC\x03D\x03D\x03D\x03D\x03D\x05D\u0446\nD\x07D\u0448\nD\fD\x0E" +
		"D\u044B\vD\x03E\x03E\x03E\x03E\x03E\x07E\u0452\nE\fE\x0EE\u0455\vE\x03" +
		"F\x03F\x03F\x05F\u045A\nF\x03G\x03G\x03G\x03G\x03G\x03G\x05G\u0462\nG" +
		"\x03H\x03H\x03I\x03I\x03I\x07I\u0469\nI\fI\x0EI\u046C\vI\x03J\x03J\x03" +
		"J\x07J\u0471\nJ\fJ\x0EJ\u0474\vJ\x03K\x03K\x03K\x07K\u0479\nK\fK\x0EK" +
		"\u047C\vK\x03L\x03L\x03L\x05L\u0481\nL\x03M\x03M\x03M\x03M\x03M\x03M\x03" +
		"M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x03M\x07M\u0492\nM\fM\x0EM\u0495" +
		"\vM\x03N\x03N\x05N\u0499\nN\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x03" +
		"O\x03O\x03O\x03O\x03O\x03O\x03O\x03O\x05O\u04AB\nO\x05O\u04AD\nO\x03P" +
		"\x03P\x03P\x03P\x03P\x07P\u04B4\nP\fP\x0EP\u04B7\vP\x03Q\x03Q\x03Q\x03" +
		"Q\x03Q\x03Q\x03Q\x07Q\u04C0\nQ\fQ\x0EQ\u04C3\vQ\x03R\x03R\x03R\x07R\u04C8" +
		"\nR\fR\x0ER\u04CB\vR\x03S\x03S\x03S\x03S\x03S\x05S\u04D2\nS\x03T\x03T" +
		"\x07T\u04D6\nT\fT\x0ET\u04D9\vT\x03U\x03U\x03U\x03U\x03U\x03U\x03U\x03" +
		"U\x05U\u04E3\nU\x03U\x03U\x05U\u04E7\nU\x03U\x05U\u04EA\nU\x03V\x03V\x03" +
		"V\x03W\x03W\x06W\u04F1\nW\rW\x0EW\u04F2\x03X\x03X\x03X\x03X\x03X\x03X" +
		"\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03X\x03" +
		"X\x03X\x03X\x03X\x03X\x03X\x05X\u050E\nX\x03Y\x03Y\x03Y\x03Y\x03Y\x03" +
		"Y\x03Y\x03Y\x03Y\x05Y\u0519\nY\x03Z\x03Z\x03Z\x03Z\x03Z\x05Z\u0520\nZ" +
		"\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x03Z\x07Z\u052A\nZ\fZ\x0EZ\u052D\v" +
		"Z\x03Z\x03Z\x05Z\u0531\nZ\x03Z\x03Z\x03[\x03[\x03[\x03[\x03[\x03[\x05" +
		"[\u053B\n[\x03[\x03[\x05[\u053F\n[\x03[\x03[\x03\\\x03\\\x03\\\x03\\\x05" +
		"\\\u0547\n\\\x03\\\x03\\\x03\\\x05\\\u054C\n\\\x03\\\x03\\\x03\\\x03\\" +
		"\x03]\x03]\x03]\x03]\x05]\u0556\n]\x03]\x03]\x03]\x03^\x03^\x03^\x03^" +
		"\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03^\x03_\x03_\x03_\x03_\x03" +
		"_\x03_\x03_\x05_\u056F\n_\x03_\x03_\x03`\x03`\x03`\x03`\x03`\x03`\x03" +
		"`\x05`\u057A\n`\x03`\x03`\x03a\x03a\x03a\x03a\x03a\x03a\x03a\x05a\u0585" +
		"\na\x03a\x03a\x03b\x03b\x03b\x03b\x03b\x03b\x03b\x05b\u0590\nb\x03b\x03" +
		"b\x03c\x03c\x03d\x03d\x03e\x03e\x03e\x05e\u059B\ne\x03e\x03e\x07e\u059F" +
		"\ne\fe\x0Ee\u05A2\ve\x03e\x03e\x03f\x03f\x03f\x03f\x03f\x03f\x03f\x03" +
		"f\x03f\x05f\u05AF\nf\x03g\x03g\x03g\x03g\x03g\x05g\u05B6\ng\x05g\u05B8" +
		"\ng\x03g\x03g\x03h\x03h\x03h\x03h\x03h\x05h\u05C1\nh\x05h\u05C3\nh\x03" +
		"h\x03h\x03i\x03i\x03j\x05j\u05CA\nj\x03j\x03j\x03k\x05k\u05CF\nk\x03k" +
		"\x03k\x03l\x03l\x05l\u05D5\nl\x03l\x03l\x07l\u05D9\nl\fl\x0El\u05DC\v" +
		"l\x03l\x03l\x03m\x03m\x03m\x03m\x03m\x05m\u05E5\nm\x03m\x03m\x03m\x03" +
		"m\x03m\x07m\u05EC\nm\fm\x0Em\u05EF\vm\x03m\x03m\x03n\x03n\x03o\x03o\x03" +
		"o\x05o\u05F8\no\x03p\x03p\x03p\x05p\u05FD\np\x03p\x05p\u0600\np\x03p\x03" +
		"p\x07p\u0604\np\fp\x0Ep\u0607\vp\x03p\x03p\x03q\x03q\x03q\x03r\x03r\x03" +
		"s\x03s\x03s\x07s\u0613\ns\fs\x0Es\u0616\vs\x03t\x03t\x03t\x07t\u061B\n" +
		"t\ft\x0Et\u061E\vt\x03u\x03u\x03v\x03v\x03v\x07v\u0625\nv\fv\x0Ev\u0628" +
		"\vv\x03w\x03w\x03w\x05w\u062D\nw\x03w\x03w\x03w\x03w\x03w\x03w\x03w\x05" +
		"w\u0636\nw\x03x\x03x\x03x\x05x\u063B\nx\x03y\x03y\x03y\x03y\x03y\x03y" +
		"\x03y\x03y\x03y\x03y\x05y\u0647\ny\x03z\x03z\x03z\x03z\x03z\x03z\x03z" +
		"\x03z\x05z\u0651\nz\x03{\x03{\x03{\x03{\x03{\x03{\x05{\u0659\n{\x03|\x03" +
		"|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03" +
		"|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03" +
		"|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03" +
		"|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x05|\u0693" +
		"\n|\x03|\x03|\x03|\x03|\x03|\x03|\x03|\x05|\u069C\n|\x05|\u069E\n|\x03" +
		"}\x03}\x03}\x03~\x03~\x03~\x03~\x03~\x03~\x05~\u06A9\n~\x03\x7F\x03\x7F" +
		"\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F\x03\x7F" +
		"\x03\x7F\x05\x7F\u06B7\n\x7F\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03" +
		"\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x03\x80\x05\x80\u06C5\n\x80" +
		"\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81\x03\x81" +
		"\x03\x81\x05\x81\u06D1\n\x81\x03\x82\x03\x82\x03\x82\x03\x83\x03\x83\x03" +
		"\x83\x05\x83\u06D9\n\x83\x03\x84\x03\x84\x03\x84\x03\x84\x03\x84\x07\x84" +
		"\u06E0\n\x84\f\x84\x0E\x84\u06E3\v\x84\x05\x84\u06E5\n\x84\x03\x84\x03" +
		"\x84\x03\x84\x03\x84\x03\x84\x07\x84\u06EC\n\x84\f\x84\x0E\x84\u06EF\v" +
		"\x84\x05\x84\u06F1\n\x84\x03\x84\x03\x84\x05\x84\u06F5\n\x84\x03\x84\x03" +
		"\x84\x05\x84\u06F9\n\x84\x03\x84\x05\x84\u06FC\n\x84\x03\x85\x03\x85\x03" +
		"\x85\x05\x85\u0701\n\x85\x03\x85\x03\x85\x05\x85\u0705\n\x85\x03\x85\x05" +
		"\x85\u0708\n\x85\x03\x86\x03\x86\x03\x86\x05\x86\u070D\n\x86\x03\x86\x05" +
		"\x86\u0710\n\x86\x03\x87\x03\x87\x03\x87\x05\x87\u0715\n\x87\x03\x87\x03" +
		"\x87\x05\x87\u0719\n\x87\x03\x87\x05\x87\u071C\n\x87\x03\x88\x03\x88\x03" +
		"\x88\x05\x88\u0721\n\x88\x05\x88\u0723\n\x88\x03\x89\x03\x89\x03\x89\x05" +
		"\x89\u0728\n\x89\x03\x89\x05\x89\u072B\n\x89\x03\x8A\x03\x8A\x03\x8A\x03" +
		"\x8A\x03\x8A\x03\x8A\x05\x8A\u0733\n\x8A\x05\x8A\u0735\n\x8A\x05\x8A\u0737" +
		"\n\x8A\x03\x8A\x03\x8A\x05\x8A\u073B\n\x8A\x03\x8A\x05\x8A\u073E\n\x8A" +
		"\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x03\x8B\x05\x8B\u0746\n\x8B\x05" +
		"\x8B\u0748\n\x8B\x05\x8B\u074A\n\x8B\x03\x8B\x03\x8B\x05\x8B\u074E\n\x8B" +
		"\x03\x8B\x05\x8B\u0751\n\x8B\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x03\x8C\x05" +
		"\x8C\u0758\n\x8C\x03\x8C\x05\x8C\u075B\n\x8C\x03\x8C\x03\x8C\x05\x8C\u075F" +
		"\n\x8C\x03\x8C\x03\x8C\x05\x8C\u0763\n\x8C\x03\x8C\x05\x8C\u0766\n\x8C" +
		"\x05\x8C\u0768\n\x8C\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x03\x8D\x05\x8D\u076F" +
		"\n\x8D\x03\x8D\x05\x8D\u0772\n\x8D\x03\x8D\x03\x8D\x05\x8D\u0776\n\x8D" +
		"\x03\x8D\x03\x8D\x05\x8D\u077A\n\x8D\x03\x8D\x05\x8D\u077D\n\x8D\x05\x8D" +
		"\u077F\n\x8D\x03\x8E\x03\x8E\x03\x8E\x03\x8E\x05\x8E\u0785\n\x8E\x03\x8F" +
		"\x03\x8F\x05\x8F\u0789\n\x8F\x03\x90\x03\x90\x03\x90\x03\x90\x05\x90\u078F" +
		"\n\x90\x03\x90\x05\x90\u0792\n\x90\x03\x90\x03\x90\x05\x90\u0796\n\x90" +
		"\x03\x90\x03\x90\x05\x90\u079A\n\x90\x03\x91\x03\x91\x03\x91\x03\x91\x03" +
		"\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x05\x91\u07A7\n\x91" +
		"\x03\x91\x03\x91\x03\x91\x05\x91\u07AC\n\x91\x03\x91\x03\x91\x05\x91\u07B0" +
		"\n\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x05\x91\u07B8\n" +
		"\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x05\x91\u07C1" +
		"\n\x91\x03\x91\x03\x91\x03\x91\x05\x91\u07C6\n\x91\x03\x91\x03\x91\x03" +
		"\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03\x91\x03" +
		"\x91\x03\x91\x03\x91\x05\x91\u07D6\n\x91\x05\x91\u07D8\n\x91\x03\x91\x03" +
		"\x91\x05\x91\u07DC\n\x91\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92" +
		"\x03\x92\x03\x92\x03\x92\x05\x92\u07E7\n\x92\x03\x92\x03\x92\x03\x92\x03" +
		"\x92\x03\x92\x03\x92\x03\x92\x05\x92\u07F0\n\x92\x03\x92\x03\x92\x03\x92" +
		"\x05\x92\u07F5\n\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03\x92\x03" +
		"\x92\x03\x92\x03\x92\x03\x92\x05\x92\u0801\n\x92\x05\x92\u0803\n\x92\x03" +
		"\x92\x03\x92\x03\x92\x05\x92\u0808\n\x92\x05\x92\u080A\n\x92\x03\x93\x03" +
		"\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03" +
		"\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03\x93\x03" +
		"\x93\x03\x93\x03\x93\x05\x93\u0822\n\x93\x05\x93\u0824\n\x93\x03\x94\x03" +
		"\x94\x03\x94\x03\x94\x03\x94\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03" +
		"\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95\x05\x95\u0836\n\x95\x03\x95" +
		"\x03\x95\x03\x95\x05\x95\u083B\n\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03" +
		"\x95\x03\x95\x05\x95\u0843\n\x95\x03\x95\x03\x95\x03\x95\x03\x95\x03\x95" +
		"\x03\x95\x03\x95\x05\x95\u084C\n\x95\x03\x95\x03\x95\x03\x95\x05\x95\u0851" +
		"\n\x95\x03\x95\x03\x95\x03\x95\x03\x95\x05\x95\u0857\n\x95\x03\x95\x03" +
		"\x95\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03" +
		"\x96\x03\x96\x03\x96\x05\x96\u0866\n\x96\x03\x96\x03\x96\x03\x96\x05\x96" +
		"\u086B\n\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x05\x96\u0873" +
		"\n\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x05\x96" +
		"\u087C\n\x96\x03\x96\x03\x96\x03\x96\x05\x96\u0881\n\x96\x03\x96\x03\x96" +
		"\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x03\x96\x07\x96\u088C" +
		"\n\x96\f\x96\x0E\x96\u088F\v\x96\x03\x96\x03\x96\x03\x96\x05\x96\u0894" +
		"\n\x96\x03\x96\x03\x96\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97" +
		"\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97\x05\x97\u08A3\n\x97\x03\x97\x03" +
		"\x97\x03\x97\x05\x97\u08A8\n\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97" +
		"\x03\x97\x03\x97\x05\x97\u08B1\n\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03" +
		"\x97\x03\x97\x05\x97\u08B9\n\x97\x03\x97\x03\x97\x03\x97\x03\x97\x05\x97" +
		"\u08BF\n\x97\x05\x97\u08C1\n\x97\x03\x97\x03\x97\x03\x97\x03\x97\x03\x97" +
		"\x03\x97\x05\x97\u08C9\n\x97\x03\x97\x03\x97\x03\x98\x03\x98\x03\x98\x03" +
		"\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x03\x98\x05\x98\u08D7\n\x98" +
		"\x05\x98\u08D9\n\x98\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x03\x99\x03" +
		"\x99\x03\x99\x03\x99\x03\x99\x07\x99\u08E5\n\x99\f\x99\x0E\x99\u08E8\v" +
		"\x99\x03\x99\x03\x99\x05\x99\u08EC\n\x99\x03\x9A\x03\x9A\x03\x9A\x03\x9A" +
		"\x05\x9A\u08F2\n\x9A\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u08F9" +
		"\n\x9B\x03\x9B\x03\x9B\x03\x9B\x03\x9B\x05\x9B\u08FF\n\x9B\x03\x9B\x03" +
		"\x9B\x05\x9B\u0903\n\x9B\x05\x9B\u0905\n\x9B\x03\x9C\x03\x9C\x03\x9C\x05" +
		"\x9C\u090A\n\x9C\x03\x9C\x03\x9C\x03\x9C\x05\x9C\u090F\n\x9C\x03\x9C\x03" +
		"\x9C\x05\x9C\u0913\n\x9C\x03\x9C\x03\x9C\x03\x9C\x05\x9C\u0918\n\x9C\x03" +
		"\x9C\x03\x9C\x03\x9C\x03\x9C\x05\x9C\u091E\n\x9C\x03\x9C\x03\x9C\x03\x9C" +
		"\x03\x9C\x03\x9C\x05\x9C\u0925";
	private static readonly _serializedATNSegment1: string =
		"\n\x9C\x05\x9C\u0927\n\x9C\x03\x9D\x03\x9D\x03\x9D\x03\x9D\x05\x9D\u092D" +
		"\n\x9D\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9E\x03\x9F\x03\x9F\x03\x9F" +
		"\x03\x9F\x03\x9F\x03\xA0\x03\xA0\x03\xA0\x03\xA1\x03\xA1\x03\xA1\x05\xA1" +
		"\u093F\n\xA1\x03\xA1\x05\xA1\u0942\n\xA1\x03\xA2\x05\xA2\u0945\n\xA2\x03" +
		"\xA2\x03\xA2\x05\xA2\u0949\n\xA2\x03\xA3\x03\xA3\x03\xA3\x03\xA3\x03\xA3" +
		"\x03\xA3\x03\xA3\x07\xA3\u0952\n\xA3\f\xA3\x0E\xA3\u0955\v\xA3\x03\xA4" +
		"\x03\xA4\x03\xA4\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u095F" +
		"\n\xA5\x03\xA5\x03\xA5\x03\xA5\x03\xA5\x05\xA5\u0965\n\xA5\x03\xA6\x03" +
		"\xA6\x03\xA6\x03\xA6\x05\xA6\u096B\n\xA6\x03\xA7\x03\xA7\x03\xA7\x03\xA7" +
		"\x05\xA7\u0971\n\xA7\x03\xA7\x03\xA7\x03\xA7\x03\xA8\x03\xA8\x05\xA8\u0978" +
		"\n\xA8\x03\xA8\x03\xA8\x05\xA8\u097C\n\xA8\x03\xA8\x05\xA8\u097F\n\xA8" +
		"\x03\xA9\x03\xA9\x03\xA9\x03\xA9\x03\xAA\x03\xAA\x03\xAA\x03\xAA\x03\xAB" +
		"\x03\xAB\x03\xAB\x03\xAB\x03\xAB\x05\xAB\u098E\n\xAB\x03\xAB\x03\xAB\x05" +
		"\xAB\u0992\n\xAB\x03\xAB\x03\xAB\x03\xAB\x05\xAB\u0997\n\xAB\x03\xAB\x03" +
		"\xAB\x03\xAB\x03\xAB\x03\xAB\x05\xAB\u099E\n\xAB\x07\xAB\u09A0\n\xAB\f" +
		"\xAB\x0E\xAB\u09A3\v\xAB\x03\xAC\x03\xAC\x03\xAC\x03\xAC\x05\xAC\u09A9" +
		"\n\xAC\x03\xAD\x03\xAD\x03\xAD\x03\xAD\x05\xAD\u09AF\n\xAD\x03\xAD\x03" +
		"\xAD\x03\xAD\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03\xAE\x03" +
		"\xAE\x03\xAE\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u09C1\n\xAF\x03\xAF" +
		"\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u09C8\n\xAF\x03\xAF\x03\xAF\x03" +
		"\xAF\x03\xAF\x05\xAF\u09CE\n\xAF\x03\xAF\x03\xAF\x03\xAF\x03\xAF\x05\xAF" +
		"\u09D4\n\xAF\x05\xAF\u09D6\n\xAF\x03\xAF\x03\xAF\x05\xAF\u09DA\n\xAF\x06" +
		"\xAF\u09DC\n\xAF\r\xAF\x0E\xAF\u09DD\x03\xAF\x03\xAF\x03\xAF\x05\xAF\u09E3" +
		"\n\xAF\x03\xB0\x03\xB0\x03\xB1\x03\xB1\x05\xB1\u09E9\n\xB1\x03\xB2\x03" +
		"\xB2\x05\xB2\u09ED\n\xB2\x03\xB2\x03\xB2\x03\xB3\x03\xB3\x03\xB3\x03\xB4" +
		"\x03\xB4\x03\xB4\x03\xB4\x03\xB5\x03\xB5\x05\xB5\u09FA\n\xB5\x03\xB5\x05" +
		"\xB5\u09FD\n\xB5\x03\xB6\x03\xB6\x03\xB6\x03\xB6\x05\xB6\u0A03\n\xB6\x03" +
		"\xB6\x05\xB6\u0A06\n\xB6\x03\xB7\x03\xB7\x03\xB7\x05\xB7\u0A0B\n\xB7\x03" +
		"\xB7\x05\xB7\u0A0E\n\xB7\x03\xB7\x03\xB7\x05\xB7\u0A12\n\xB7\x03\xB7\x05" +
		"\xB7\u0A15\n\xB7\x03\xB8\x03\xB8\x03\xB8\x03\xB8\x05\xB8\u0A1B\n\xB8\x03" +
		"\xB8\x05\xB8\u0A1E\n\xB8\x03\xB8\x03\xB8\x05\xB8\u0A22\n\xB8\x03\xB8\x05" +
		"\xB8\u0A25\n\xB8\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9\x03\xB9" +
		"\x05\xB9\u0A2E\n\xB9\x03\xB9\x03\xB9\x05\xB9\u0A32\n\xB9\x03\xB9\x05\xB9" +
		"\u0A35\n\xB9\x03\xB9\x03\xB9\x05\xB9\u0A39\n\xB9\x03\xB9\x05\xB9\u0A3C" +
		"\n\xB9\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBA\x03\xBB\x03\xBB\x03\xBB" +
		"\x03\xBB\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBC\x03\xBD\x03\xBD\x03\xBD" +
		"\x03\xBD\x03\xBD\x03\xBE\x03\xBE\x05\xBE\u0A53\n\xBE\x03\xBE\x03\xBE\x03" +
		"\xBE\x05\xBE\u0A58\n\xBE\x03\xBE\x03\xBE\x03\xBE\x03\xBF\x03\xBF\x03\xBF" +
		"\x03\xBF\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0\x03\xC0" +
		"\x03\xC0\x03\xC0\x03\xC0\x05\xC0\u0A6C\n\xC0\x03\xC1\x03\xC1\x05\xC1\u0A70" +
		"\n\xC1\x03\xC1\x05\xC1\u0A73\n\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03" +
		"\xC1\x05\xC1\u0A7A\n\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u0A80" +
		"\n\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x03\xC1\x05\xC1\u0A87\n\xC1\x03" +
		"\xC1\x03\xC1\x03\xC1\x05\xC1\u0A8C\n\xC1\x03\xC1\x05\xC1\u0A8F\n\xC1\x03" +
		"\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x05\xC2\u0A96\n\xC2\x03\xC2\x03\xC2" +
		"\x05\xC2\u0A9A\n\xC2\x03\xC2\x03\xC2\x05\xC2\u0A9E\n\xC2\x03\xC2\x05\xC2" +
		"\u0AA1\n\xC2\x05\xC2\u0AA3\n\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2" +
		"\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x05\xC2\u0AAF\n\xC2\x03\xC2\x03" +
		"\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x03\xC2\x05\xC2\u0AB8\n\xC2\x03\xC3" +
		"\x03\xC3\x03\xC3\x05\xC3\u0ABD\n\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03" +
		"\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x03\xC3\x05\xC3\u0AC9\n\xC3\x03\xC3" +
		"\x03\xC3\x03\xC3\x05\xC3\u0ACE\n\xC3\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03" +
		"\xC4\x03\xC4\x03\xC4\x05\xC4\u0AD7\n\xC4\x03\xC4\x05\xC4\u0ADA\n\xC4\x05" +
		"\xC4\u0ADC\n\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x03\xC4" +
		"\x03\xC4\x03\xC4\x03\xC4\x03\xC4\x05\xC4\u0AE9\n\xC4\x03\xC4\x03\xC4\x03" +
		"\xC4\x05\xC4\u0AEE\n\xC4\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5" +
		"\x05\xC5\u0AF6\n\xC5\x03\xC5\x03\xC5\x05\xC5\u0AFA\n\xC5\x03\xC5\x03\xC5" +
		"\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5\x03\xC5" +
		"\x03\xC5\x03\xC5\x03\xC5\x05\xC5\u0B0A\n\xC5\x05\xC5\u0B0C\n\xC5\x03\xC6" +
		"\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6\x03\xC6" +
		"\x05\xC6\u0B18\n\xC6\x03\xC7\x03\xC7\x03\xC7\x03\xC7\x03\xC8\x03\xC8\x03" +
		"\xC8\x03\xC8\x03\xC8\x05\xC8\u0B23\n\xC8\x03\xC8\x03\xC8\x05\xC8\u0B27" +
		"\n\xC8\x03\xC8\x03\xC8\x05\xC8\u0B2B\n\xC8\x03\xC8\x03\xC8\x03\xC8\x05" +
		"\xC8\u0B30\n\xC8\x03\xC8\x05\xC8\u0B33\n\xC8\x03\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x03\xC8\x05\xC8\u0B3A\n\xC8\x03\xC8\x05\xC8\u0B3D\n\xC8\x03\xC8\x03" +
		"\xC8\x05\xC8\u0B41\n\xC8\x05\xC8\u0B43\n\xC8\x03\xC8\x03\xC8\x03\xC8\x03" +
		"\xC8\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03" +
		"\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03" +
		"\xC9\x03\xC9\x05\xC9\u0B5C\n\xC9\x05\xC9\u0B5E\n\xC9\x03\xC9\x03\xC9\x05" +
		"\xC9\u0B62\n\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x05\xC9\u0B68\n\xC9\x05" +
		"\xC9\u0B6A\n\xC9\x03\xC9\x03\xC9\x05\xC9\u0B6E\n\xC9\x03\xC9\x03\xC9\x03" +
		"\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03" +
		"\xC9\x05\xC9\u0B7C\n\xC9\x03\xC9\x05\xC9\u0B7F\n\xC9\x05\xC9\u0B81\n\xC9" +
		"\x03\xC9\x03\xC9\x03\xC9\x03\xC9\x03\xCA\x03\xCA\x03\xCB\x03\xCB\x03\xCC" +
		"\x06\xCC\u0B8C\n\xCC\r\xCC\x0E\xCC\u0B8D\x03\xCD\x03\xCD\x03\xCD\x07\xCD" +
		"\u0B93\n\xCD\f\xCD\x0E\xCD\u0B96\v\xCD\x03\xCE\x03\xCE\x03\xCE\x03\xCE" +
		"\x03\xCE\x05\xCE\u0B9D\n\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03\xCE\x03" +
		"\xCE\x05\xCE\u0BA5\n\xCE\x03\xCF\x03\xCF\x03\xCF\x05\xCF\u0BAA\n\xCF\x03" +
		"\xCF\x03\xCF\x03\xCF\x03\xCF\x03\xD0\x03\xD0\x05\xD0\u0BB2\n\xD0\x03\xD1" +
		"\x03\xD1\x03\xD1\x05\xD1\u0BB7\n\xD1\x03\xD1\x03\xD1\x03\xD2\x03\xD2\x03" +
		"\xD2\x03\xD2\x03\xD2\x07\xD2\u0BC0\n\xD2\f\xD2\x0E\xD2\u0BC3\v\xD2\x05" +
		"\xD2\u0BC5\n\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x03\xD2\x07\xD2\u0BCC" +
		"\n\xD2\f\xD2\x0E\xD2\u0BCF\v\xD2\x05\xD2\u0BD1\n\xD2\x03\xD2\x03\xD2\x03" +
		"\xD2\x03\xD2\x03\xD2\x07\xD2\u0BD8\n\xD2\f\xD2\x0E\xD2\u0BDB\v\xD2\x05" +
		"\xD2\u0BDD\n\xD2\x05\xD2\u0BDF\n\xD2\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x03" +
		"\xD3\x05\xD3\u0BE6\n\xD3\x03\xD3\x03\xD3\x03\xD3\x03\xD3\x05\xD3\u0BEC" +
		"\n\xD3\x06\xD3\u0BEE\n\xD3\r\xD3\x0E\xD3\u0BEF\x05\xD3\u0BF2\n\xD3\x03" +
		"\xD3\x05\xD3\u0BF5\n\xD3\x03\xD3\x05\xD3\u0BF8\n\xD3\x03\xD4\x03\xD4\x03" +
		"\xD4\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x03\xD5\x05\xD5\u0C03\n\xD5" +
		"\x03\xD5\x05\xD5\u0C06\n\xD5\x03\xD5\x05\xD5\u0C09\n\xD5\x03\xD6\x05\xD6" +
		"\u0C0C\n\xD6\x03\xD6\x03\xD6\x03\xD6\x03\xD6\x05\xD6\u0C12\n\xD6\x03\xD6" +
		"\x03\xD6\x05\xD6\u0C16\n\xD6\x03\xD6\x05\xD6\u0C19\n\xD6\x03\xD7\x03\xD7" +
		"\x03\xD7\x03\xD7\x05\xD7\u0C1F\n\xD7\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x03" +
		"\xD7\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u0C29\n\xD7\x06\xD7\u0C2B\n\xD7\r" +
		"\xD7\x0E\xD7\u0C2C\x03\xD7\x03\xD7\x03\xD7\x03\xD7\x05\xD7\u0C33\n\xD7" +
		"\x06\xD7\u0C35\n\xD7\r\xD7\x0E\xD7\u0C36\x03\xD7\x03\xD7\x03\xD7\x06\xD7" +
		"\u0C3C\n\xD7\r\xD7\x0E\xD7\u0C3D\x05\xD7\u0C40\n\xD7\x03\xD8\x03\xD8\x03" +
		"\xD8\x03\xD8\x05\xD8\u0C46\n\xD8\x03\xD9\x03\xD9\x03\xD9\x03\xD9\x05\xD9" +
		"\u0C4C\n\xD9\x03\xDA\x03\xDA\x03\xDA\x05\xDA\u0C51\n\xDA\x05\xDA\u0C53" +
		"\n\xDA\x03\xDA\x05\xDA\u0C56\n\xDA\x03\xDB\x03\xDB\x03\xDB\x03\xDB\x05" +
		"\xDB\u0C5C\n\xDB\x03\xDB\x05\xDB\u0C5F\n\xDB\x03\xDB\x03\xDB\x05\xDB\u0C63" +
		"\n\xDB\x03\xDB\x03\xDB\x05\xDB\u0C67\n\xDB\x03\xDB\x03\xDB\x03\xDB\x03" +
		"\xDB\x05\xDB\u0C6D\n\xDB\x03\xDB\x03\xDB\x05\xDB\u0C71\n\xDB\x03\xDB\x05" +
		"\xDB\u0C74\n\xDB\x05\xDB\u0C76\n\xDB\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u0C7B" +
		"\n\xDC\x03\xDC\x03\xDC\x03\xDC\x03\xDC\x05\xDC\u0C81\n\xDC\x03\xDD\x03" +
		"\xDD\x03\xDD\x05\xDD\u0C86\n\xDD\x03\xDD\x03\xDD\x03\xDD\x03\xDD\x05\xDD" +
		"\u0C8C\n\xDD\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x05\xDE\u0C93\n\xDE" +
		"\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE\x03\xDE" +
		"\x03\xDE\x03\xDE\x05\xDE\u0CA0\n\xDE\x05\xDE\u0CA2\n\xDE\x03\xDE\x03\xDE" +
		"\x05\xDE\u0CA6\n\xDE\x03\xDF\x03\xDF\x03\xDF\x03\xDF\x05\xDF\u0CAC\n\xDF" +
		"\x03\xDF\x03\xDF\x03\xDF\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x05\xE0\u0CB5" +
		"\n\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x05\xE0\u0CBD\n" +
		"\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x03\xE0\x06" +
		"\xE0\u0CC7\n\xE0\r\xE0\x0E\xE0\u0CC8\x03\xE1\x03\xE1\x05\xE1\u0CCD\n\xE1" +
		"\x03\xE1\x03\xE1\x03\xE1\x03\xE1\x05\xE1\u0CD3\n\xE1\x03\xE1\x05\xE1\u0CD6" +
		"\n\xE1\x03\xE2\x03\xE2\x03\xE2\x07\xE2\u0CDB\n\xE2\f\xE2\x0E\xE2\u0CDE" +
		"\v\xE2\x03\xE3\x03\xE3\x03\xE3\x07\xE3\u0CE3\n\xE3\f\xE3\x0E\xE3\u0CE6" +
		"\v\xE3\x03\xE3\x05\xE3\u0CE9\n\xE3\x03\xE4\x03\xE4\x03\xE4\x07\xE4\u0CEE" +
		"\n\xE4\f\xE4\x0E\xE4\u0CF1\v\xE4\x03\xE5\x03\xE5\x05\xE5\u0CF5\n\xE5\x03" +
		"\xE6\x03\xE6\x03\xE6\x03\xE6\x03\xE6\x05\xE6\u0CFC\n\xE6\x03\xE7\x03\xE7" +
		"\x03\xE7\x03\xE7\x05\xE7\u0D02\n\xE7\x03\xE8\x03\xE8\x03\xE8\x03\xE8\x03" +
		"\xE8\x03\xE8\x05\xE8\u0D0A\n\xE8\x03\xE9\x03\xE9\x03\xEA\x03\xEA\x03\xEA" +
		"\x07\xEA\u0D11\n\xEA\f\xEA\x0E\xEA\u0D14\v\xEA\x03\xEB\x03\xEB\x03\xEC" +
		"\x03\xEC\x05\xEC\u0D1A\n\xEC\x03\xED\x03\xED\x05\xED\u0D1E\n\xED\x03\xEE" +
		"\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x03\xEE\x07\xEE" +
		"\u0D29\n\xEE\f\xEE\x0E\xEE\u0D2C\v\xEE\x05\xEE\u0D2E\n\xEE\x03\xEE\x03" +
		"\xEE\x03\xEF\x03\xEF\x03\xEF\x07\xEF\u0D35\n\xEF\f\xEF\x0E\xEF\u0D38\v" +
		"\xEF\x03\xF0\x03\xF0\x05\xF0\u0D3C\n\xF0\x03\xF1\x03\xF1\x03\xF2\x03\xF2" +
		"\x03\xF3\x03\xF3\x03\xF3\x02\x02\x02\xF4\x02\x02\x04\x02\x06\x02\b\x02" +
		"\n\x02\f\x02\x0E\x02\x10\x02\x12\x02\x14\x02\x16\x02\x18\x02\x1A\x02\x1C" +
		"\x02\x1E\x02 \x02\"\x02$\x02&\x02(\x02*\x02,\x02.\x020\x022\x024\x026" +
		"\x028\x02:\x02<\x02>\x02@\x02B\x02D\x02F\x02H\x02J\x02L\x02N\x02P\x02" +
		"R\x02T\x02V\x02X\x02Z\x02\\\x02^\x02`\x02b\x02d\x02f\x02h\x02j\x02l\x02" +
		"n\x02p\x02r\x02t\x02v\x02x\x02z\x02|\x02~\x02\x80\x02\x82\x02\x84\x02" +
		"\x86\x02\x88\x02\x8A\x02\x8C\x02\x8E\x02\x90\x02\x92\x02\x94\x02\x96\x02" +
		"\x98\x02\x9A\x02\x9C\x02\x9E\x02\xA0\x02\xA2\x02\xA4\x02\xA6\x02\xA8\x02" +
		"\xAA\x02\xAC\x02\xAE\x02\xB0\x02\xB2\x02\xB4\x02\xB6\x02\xB8\x02\xBA\x02" +
		"\xBC\x02\xBE\x02\xC0\x02\xC2\x02\xC4\x02\xC6\x02\xC8\x02\xCA\x02\xCC\x02" +
		"\xCE\x02\xD0\x02\xD2\x02\xD4\x02\xD6\x02\xD8\x02\xDA\x02\xDC\x02\xDE\x02" +
		"\xE0\x02\xE2\x02\xE4\x02\xE6\x02\xE8\x02\xEA\x02\xEC\x02\xEE\x02\xF0\x02" +
		"\xF2\x02\xF4\x02\xF6\x02\xF8\x02\xFA\x02\xFC\x02\xFE\x02\u0100\x02\u0102" +
		"\x02\u0104\x02\u0106\x02\u0108\x02\u010A\x02\u010C\x02\u010E\x02\u0110" +
		"\x02\u0112\x02\u0114\x02\u0116\x02\u0118\x02\u011A\x02\u011C\x02\u011E" +
		"\x02\u0120\x02\u0122\x02\u0124\x02\u0126\x02\u0128\x02\u012A\x02\u012C" +
		"\x02\u012E\x02\u0130\x02\u0132\x02\u0134\x02\u0136\x02\u0138\x02\u013A" +
		"\x02\u013C\x02\u013E\x02\u0140\x02\u0142\x02\u0144\x02\u0146\x02\u0148" +
		"\x02\u014A\x02\u014C\x02\u014E\x02\u0150\x02\u0152\x02\u0154\x02\u0156" +
		"\x02\u0158\x02\u015A\x02\u015C\x02\u015E\x02\u0160\x02\u0162\x02\u0164" +
		"\x02\u0166\x02\u0168\x02\u016A\x02\u016C\x02\u016E\x02\u0170\x02\u0172" +
		"\x02\u0174\x02\u0176\x02\u0178\x02\u017A\x02\u017C\x02\u017E\x02\u0180" +
		"\x02\u0182\x02\u0184\x02\u0186\x02\u0188\x02\u018A\x02\u018C\x02\u018E" +
		"\x02\u0190\x02\u0192\x02\u0194\x02\u0196\x02\u0198\x02\u019A\x02\u019C" +
		"\x02\u019E\x02\u01A0\x02\u01A2\x02\u01A4\x02\u01A6\x02\u01A8\x02\u01AA" +
		"\x02\u01AC\x02\u01AE\x02\u01B0\x02\u01B2\x02\u01B4\x02\u01B6\x02\u01B8" +
		"\x02\u01BA\x02\u01BC\x02\u01BE\x02\u01C0\x02\u01C2\x02\u01C4\x02\u01C6" +
		"\x02\u01C8\x02\u01CA\x02\u01CC\x02\u01CE\x02\u01D0\x02\u01D2\x02\u01D4" +
		"\x02\u01D6\x02\u01D8\x02\u01DA\x02\u01DC\x02\u01DE\x02\u01E0\x02\u01E2" +
		"\x02\u01E4\x02\x024\x03\x02\xBD\xBE\x05\x02\x1B\x1B--VV\x04\x02||\xF5" +
		"\xF5\x04\x02\x80\x80\xF4\xF4\x04\x02cc\xF6\xF6\x03\x02lm\x04\x02\x19\x19" +
		"\xEE\xEE\x03\x02\x05\b\x03\x02\xBB\xBC\x03\x02\xE8\xE9\x03\x02\xE4\xE5" +
		"\x03\x02RS\x03\x02jk\x04\x02\x1C\x1C\xEB\xEB\x03\x02)*\x03\x02\xA4\xA5" +
		"\x03\x02]^\x03\x02\xDD\xDE\x03\x02\xCB\xCC\x04\x02YY\x8F\x8F\x04\x02\x16" +
		"\x16\xB7\xB7\x04\x02pp\xE4\xE4\x03\x02\xB1\xB2\x03\x02\xC8\xC9\x03\x02" +
		"34\x04\x02LL\x9A\x9A\x04\x02\n\n\xD5\xD5\x03\x02\xA2\xA3\x03\x02%&\x05" +
		"\x023355aa\x03\x02ab\x03\x02qr\x03\x02\xE1\xE2\x03\x02\x84\x85\x03\x02" +
		"\x97\x98\x04\x02\xA2\xA2\xBB\xBB\x05\x02\r\r33\xE8\xE8\x03\x02\v\f\x04" +
		"\x02\xBB\xBB\xE8\xE8\x03\x02\xB2\xB3\x03\x02\x88\x89\x03\x02IJ\x03\x02" +
		"\xA0\xA1\x03\x02\xC3\xC4\x04\x02<<FF\x04\x02\x90\x90\xF0\xF0\x04\x02\xC1" +
		"\xC2\xC5\xC5\x03\x02\r\x0E\x03\x02\xF8\xF9\x16\x02\t\x18\x1A\"%=??CNP" +
		"^`bdfhrxz}\x7F\x84\x9A\x9D\x9E\xA0\xA7\xA9\xA9\xAC\xAF\xB1\xBE\xC0\xC6" +
		"\xC8\xD9\xDB\xF3\x02\u0F02\x02\u01E7\x03\x02\x02\x02\x04\u01EE\x03\x02" +
		"\x02\x02\x06\u0202\x03\x02\x02\x02\b\u020D\x03\x02\x02\x02\n\u020F\x03" +
		"\x02\x02\x02\f\u0215\x03\x02\x02\x02\x0E\u021C\x03\x02\x02\x02\x10\u0223" +
		"\x03\x02\x02\x02\x12\u022A\x03\x02\x02\x02\x14\u023B\x03\x02\x02\x02\x16" +
		"\u023D\x03\x02\x02\x02\x18\u0243\x03\x02\x02\x02\x1A\u0247\x03\x02\x02" +
		"\x02\x1C\u025C\x03\x02\x02\x02\x1E\u0271\x03\x02\x02\x02 \u0273\x03\x02" +
		"\x02\x02\"\u027A\x03\x02\x02\x02$\u027D\x03\x02\x02\x02&\u0280\x03\x02" +
		"\x02\x02(\u0283\x03\x02\x02\x02*\u0288\x03\x02\x02\x02,\u028B\x03\x02" +
		"\x02\x02.\u02A3\x03\x02\x02\x020\u02A5\x03\x02\x02\x022\u02B2\x03\x02" +
		"\x02\x024\u02B5\x03\x02\x02\x026\u02C3\x03\x02\x02\x028\u02CF\x03\x02" +
		"\x02\x02:\u02E8\x03\x02\x02\x02<\u02F0\x03\x02\x02\x02>\u02FE\x03\x02" +
		"\x02\x02@\u0303\x03\x02\x02\x02B\u0324\x03\x02\x02\x02D\u0327\x03\x02" +
		"\x02\x02F\u0329\x03\x02\x02\x02H\u032E\x03\x02\x02\x02J\u033C\x03\x02" +
		"\x02\x02L\u0349\x03\x02\x02\x02N\u0350\x03\x02\x02\x02P\u035A\x03\x02" +
		"\x02\x02R\u035E\x03\x02\x02\x02T\u0362\x03\x02\x02\x02V\u0367\x03\x02" +
		"\x02\x02X\u0374\x03\x02\x02\x02Z\u0384\x03\x02\x02\x02\\\u0388\x03\x02" +
		"\x02\x02^\u0394\x03\x02\x02\x02`\u0396\x03\x02\x02\x02b\u03A4\x03\x02" +
		"\x02\x02d\u03A8\x03\x02\x02\x02f\u03B0\x03\x02\x02\x02h\u03CE\x03\x02" +
		"\x02\x02j\u03D9\x03\x02\x02\x02l\u03DD\x03\x02\x02\x02n\u03DF\x03\x02" +
		"\x02\x02p\u03E2\x03\x02\x02\x02r\u03ED\x03\x02\x02\x02t\u03F0\x03\x02" +
		"\x02\x02v\u0419\x03\x02\x02\x02x\u041B\x03\x02\x02\x02z\u041D\x03\x02" +
		"\x02\x02|\u041F\x03\x02\x02\x02~\u042B\x03\x02\x02\x02\x80\u042D\x03\x02" +
		"\x02\x02\x82\u0432\x03\x02\x02\x02\x84\u0434\x03\x02\x02\x02\x86\u0440" +
		"\x03\x02\x02\x02\x88\u044C\x03\x02\x02\x02\x8A\u0459\x03\x02\x02\x02\x8C" +
		"\u0461\x03\x02\x02\x02\x8E\u0463\x03\x02\x02\x02\x90\u0465\x03\x02\x02" +
		"\x02\x92\u046D\x03\x02\x02\x02\x94\u0475\x03\x02\x02\x02\x96\u0480\x03" +
		"\x02\x02\x02\x98\u0482\x03\x02\x02\x02\x9A\u0496\x03\x02\x02\x02\x9C\u04AC" +
		"\x03\x02\x02\x02\x9E\u04AE\x03\x02\x02\x02\xA0\u04B8\x03\x02\x02\x02\xA2" +
		"\u04C4\x03\x02\x02\x02\xA4\u04D1\x03\x02\x02\x02\xA6\u04D3\x03\x02\x02" +
		"\x02\xA8\u04E9\x03\x02\x02\x02\xAA\u04EB\x03\x02\x02\x02\xAC\u04EE\x03" +
		"\x02\x02\x02\xAE\u050D\x03\x02\x02\x02\xB0\u0518\x03\x02\x02\x02\xB2\u051A" +
		"\x03\x02\x02\x02\xB4\u0534\x03\x02\x02\x02\xB6\u0542\x03\x02\x02\x02\xB8" +
		"\u0551\x03\x02\x02\x02\xBA\u055A\x03\x02\x02\x02\xBC\u0567\x03\x02\x02" +
		"\x02\xBE\u0572\x03\x02\x02\x02\xC0\u057D\x03\x02\x02\x02\xC2\u0588\x03" +
		"\x02\x02\x02\xC4\u0593\x03\x02\x02\x02\xC6\u0595\x03\x02\x02\x02\xC8\u0597" +
		"\x03\x02\x02\x02\xCA\u05AE\x03\x02\x02\x02\xCC\u05B0\x03\x02\x02\x02\xCE" +
		"\u05BB\x03\x02\x02\x02\xD0\u05C6\x03\x02\x02\x02\xD2\u05C9\x03\x02\x02" +
		"\x02\xD4\u05CE\x03\x02\x02\x02\xD6\u05D2\x03\x02\x02\x02\xD8\u05DF\x03" +
		"\x02\x02\x02\xDA\u05F2\x03\x02\x02\x02\xDC\u05F4\x03\x02\x02\x02\xDE\u05F9" +
		"\x03\x02\x02\x02\xE0\u060A\x03\x02\x02\x02\xE2\u060D\x03\x02\x02\x02\xE4" +
		"\u0614\x03\x02\x02\x02\xE6\u0617\x03\x02\x02\x02\xE8\u061F\x03\x02\x02" +
		"\x02\xEA\u0621\x03\x02\x02\x02\xEC\u0629\x03\x02\x02\x02\xEE\u063A\x03" +
		"\x02\x02\x02\xF0\u0646\x03\x02\x02\x02\xF2\u0648\x03\x02\x02\x02\xF4\u0652" +
		"\x03\x02\x02\x02\xF6\u065A\x03\x02\x02\x02\xF8\u069F\x03\x02\x02\x02\xFA" +
		"\u06A8\x03\x02\x02\x02\xFC\u06B6\x03\x02\x02\x02\xFE\u06C4\x03\x02\x02" +
		"\x02\u0100\u06D0\x03\x02\x02\x02\u0102\u06D2\x03\x02\x02\x02\u0104\u06D5" +
		"\x03\x02\x02\x02\u0106\u06DA\x03\x02\x02\x02\u0108\u06FD\x03\x02\x02\x02" +
		"\u010A\u0709\x03\x02\x02\x02\u010C\u0711\x03\x02\x02\x02\u010E\u071D\x03" +
		"\x02\x02\x02\u0110\u0724\x03\x02\x02\x02\u0112\u072C\x03\x02\x02\x02\u0114" +
		"\u073F\x03\x02\x02\x02\u0116\u0752\x03\x02\x02\x02\u0118\u0769\x03\x02" +
		"\x02\x02\u011A\u0784\x03\x02\x02\x02\u011C\u0788\x03\x02\x02\x02\u011E" +
		"\u078A\x03\x02\x02\x02\u0120\u079B\x03\x02\x02\x02\u0122\u07DD\x03\x02" +
		"\x02\x02\u0124\u0823\x03\x02\x02\x02\u0126\u0825\x03\x02\x02\x02\u0128" +
		"\u083A\x03\x02\x02\x02\u012A\u086A\x03\x02\x02\x02\u012C\u08A7\x03\x02" +
		"\x02\x02\u012E\u08CC\x03\x02\x02\x02\u0130\u08EB\x03\x02\x02\x02\u0132" +
		"\u08ED\x03\x02\x02\x02\u0134\u08F3\x03\x02\x02\x02\u0136\u0906\x03\x02" +
		"\x02\x02\u0138\u0928\x03\x02\x02\x02\u013A\u092E\x03\x02\x02\x02\u013C" +
		"\u0933\x03\x02\x02\x02\u013E\u0938\x03\x02\x02\x02\u0140\u093B\x03\x02" +
		"\x02\x02\u0142\u0944\x03\x02\x02\x02\u0144\u094A\x03\x02\x02\x02\u0146" +
		"\u0956\x03\x02\x02\x02\u0148\u0959\x03\x02\x02\x02\u014A\u0966\x03\x02" +
		"\x02\x02\u014C\u096C\x03\x02\x02\x02\u014E\u0977\x03\x02\x02\x02\u0150" +
		"\u0980\x03\x02\x02\x02\u0152\u0984\x03\x02\x02\x02\u0154\u0988\x03\x02" +
		"\x02\x02\u0156\u09A4\x03\x02\x02\x02\u0158\u09AA\x03\x02\x02\x02\u015A" +
		"\u09B3\x03\x02\x02\x02\u015C\u09BC\x03\x02\x02\x02\u015E\u09E4\x03\x02" +
		"\x02\x02\u0160\u09E8\x03\x02\x02\x02\u0162\u09EA\x03\x02\x02\x02\u0164" +
		"\u09F0\x03\x02\x02\x02\u0166\u09F3\x03\x02\x02\x02\u0168\u09FC\x03\x02" +
		"\x02\x02\u016A\u09FE\x03\x02\x02\x02\u016C\u0A07\x03\x02\x02\x02\u016E" +
		"\u0A16\x03\x02\x02\x02\u0170\u0A2D\x03\x02\x02\x02\u0172\u0A3D\x03\x02" +
		"\x02\x02\u0174\u0A42\x03\x02\x02\x02\u0176\u0A46\x03\x02\x02\x02\u0178" +
		"\u0A4B\x03\x02\x02\x02\u017A\u0A50\x03\x02\x02\x02\u017C\u0A5C\x03\x02" +
		"\x02\x02\u017E\u0A6B\x03\x02\x02\x02\u0180\u0A6D\x03\x02\x02\x02\u0182" +
		"\u0A90\x03\x02\x02\x02\u0184\u0AB9\x03\x02\x02\x02\u0186\u0ACF\x03\x02" +
		"\x02\x02\u0188\u0AEF\x03\x02\x02\x02\u018A\u0B0D\x03\x02\x02\x02\u018C" +
		"\u0B19\x03\x02\x02\x02\u018E\u0B42\x03\x02\x02\x02\u0190\u0B80\x03\x02" +
		"\x02\x02\u0192\u0B86\x03\x02\x02\x02\u0194\u0B88\x03\x02\x02\x02\u0196" +
		"\u0B8B\x03\x02\x02\x02\u0198\u0B8F\x03\x02\x02\x02\u019A\u0B9C\x03\x02" +
		"\x02\x02\u019C\u0BA9\x03\x02\x02\x02\u019E\u0BB1\x03\x02\x02\x02\u01A0" +
		"\u0BB3\x03\x02\x02\x02\u01A2\u0BDE\x03\x02\x02\x02\u01A4\u0BE0\x03\x02" +
		"\x02\x02\u01A6\u0BF9\x03\x02\x02\x02\u01A8\u0BFC\x03\x02\x02\x02\u01AA" +
		"\u0C0B\x03\x02\x02\x02\u01AC\u0C1A\x03\x02\x02\x02\u01AE\u0C41\x03\x02" +
		"\x02\x02\u01B0\u0C47\x03\x02\x02\x02\u01B2\u0C55\x03\x02\x02\x02\u01B4" +
		"\u0C75\x03\x02\x02\x02\u01B6\u0C80\x03\x02\x02\x02\u01B8\u0C8B\x03\x02" +
		"\x02\x02\u01BA\u0C8D\x03\x02\x02\x02\u01BC\u0CA7\x03\x02\x02\x02\u01BE" +
		"\u0CB0\x03\x02\x02\x02\u01C0\u0CCA\x03\x02\x02\x02\u01C2\u0CD7\x03\x02" +
		"\x02\x02\u01C4\u0CE8\x03\x02\x02\x02\u01C6\u0CEA\x03\x02\x02\x02\u01C8" +
		"\u0CF4\x03\x02\x02\x02\u01CA\u0CFB\x03\x02\x02\x02\u01CC\u0D01\x03\x02" +
		"\x02\x02\u01CE\u0D09\x03\x02\x02\x02\u01D0\u0D0B\x03\x02\x02\x02\u01D2" +
		"\u0D0D\x03\x02\x02\x02\u01D4\u0D15\x03\x02\x02\x02\u01D6\u0D19\x03\x02" +
		"\x02\x02\u01D8\u0D1D\x03\x02\x02\x02\u01DA\u0D1F\x03\x02\x02\x02\u01DC" +
		"\u0D31\x03\x02\x02\x02\u01DE\u0D3B\x03\x02\x02\x02\u01E0\u0D3D\x03\x02" +
		"\x02\x02\u01E2\u0D3F\x03\x02\x02\x02\u01E4\u0D41\x03\x02\x02\x02\u01E6" +
		"\u01E8\x05\x04\x03\x02\u01E7\u01E6\x03\x02\x02\x02\u01E8\u01E9\x03\x02" +
		"\x02\x02\u01E9\u01E7\x03\x02\x02\x02\u01E9\u01EA\x03\x02\x02\x02\u01EA" +
		"\u01EB\x03\x02\x02\x02\u01EB\u01EC\x07\x02\x02\x03\u01EC\x03\x03\x02\x02" +
		"\x02\u01ED\u01EF\x05\n\x06\x02\u01EE\u01ED\x03\x02\x02\x02\u01EE\u01EF" +
		"\x03\x02\x02\x02\u01EF\u01F4\x03\x02\x02\x02\u01F0\u01F1\x05\x16\f\x02" +
		"\u01F1\u01F2\x05\b\x05\x02\u01F2\u01F5\x03\x02\x02\x02\u01F3\u01F5\x05" +
		"\x06\x04\x02\u01F4\u01F0\x03\x02\x02\x02\u01F4\u01F3\x03\x02\x02\x02\u01F5" +
		"\u01F7\x03\x02\x02\x02\u01F6\u01F8\x07\xC7\x02\x02\u01F7\u01F6\x03\x02" +
		"\x02\x02\u01F7\u01F8\x03\x02\x02\x02\u01F8\x05\x03\x02\x02\x02\u01F9\u0203" +
		"\x05\xECw\x02\u01FA\u0203\x05\xEEx\x02\u01FB\u01FF\x05\x10\t\x02\u01FC" +
		"\u01FE\x05\x0E\b\x02\u01FD\u01FC\x03\x02\x02\x02\u01FE\u0201\x03\x02\x02" +
		"\x02\u01FF\u01FD\x03\x02\x02\x02\u01FF\u0200\x03\x02\x02\x02\u0200\u0203" +
		"\x03\x02\x02\x02\u0201\u01FF\x03\x02\x02\x02\u0202\u01F9\x03\x02\x02\x02" +
		"\u0202\u01FA\x03\x02\x02\x02\u0202\u01FB\x03\x02\x02\x02\u0203\x07\x03" +
		"\x02\x02\x02\u0204\u020E\x05\xECw\x02\u0205\u020E\x05\xEEx\x02\u0206\u020A" +
		"\x05\x12\n\x02\u0207\u0209\x05\x0E\b\x02\u0208\u0207\x03\x02\x02\x02\u0209" +
		"\u020C\x03\x02\x02\x02\u020A\u0208\x03\x02\x02\x02\u020A\u020B\x03\x02" +
		"\x02\x02\u020B\u020E\x03\x02\x02\x02\u020C\u020A\x03\x02\x02\x02\u020D" +
		"\u0204\x03\x02\x02\x02\u020D\u0205\x03\x02\x02\x02\u020D\u0206\x03\x02" +
		"\x02\x02\u020E\t\x03\x02\x02\x02\u020F\u0210\x07\xEA\x02\x02\u0210\u0211" +
		"\x07\x99\x02\x02\u0211\u0213\x07\'\x02\x02\u0212\u0214\x07\x06\x02\x02" +
		"\u0213\u0212\x03\x02\x02\x02\u0213\u0214\x03\x02\x02\x02\u0214\v\x03\x02" +
		"\x02\x02\u0215\u0219\x05\x10\t\x02\u0216\u0218\x05\x0E\b\x02\u0217\u0216" +
		"\x03\x02\x02\x02\u0218\u021B\x03\x02\x02\x02\u0219\u0217\x03\x02\x02\x02" +
		"\u0219\u021A\x03\x02\x02\x02\u021A\r\x03\x02\x02\x02\u021B\u0219\x03\x02" +
		"\x02\x02\u021C\u021E\x07\xE3\x02\x02\u021D\u021F\x07\x10\x02\x02\u021E" +
		"\u021D\x03\x02\x02\x02\u021E\u021F\x03\x02\x02\x02\u021F\u0220\x03\x02" +
		"\x02\x02\u0220\u0221\x05\x10\t\x02\u0221\x0F\x03\x02\x02\x02\u0222\u0224" +
		"\x05\x14\v\x02\u0223\u0222\x03\x02\x02\x02\u0224\u0225\x03\x02\x02\x02" +
		"\u0225\u0223\x03\x02\x02\x02\u0225\u0226\x03\x02\x02\x02\u0226\x11\x03" +
		"\x02\x02\x02";
	private static readonly _serializedATNSegment2: string =
		"\u0227\u0229\x05\x14\v\x02\u0228\u0227\x03\x02\x02\x02\u0229\u022C\x03" +
		"\x02\x02\x02\u022A\u0228\x03\x02\x02\x02\u022A\u022B\x03\x02\x02\x02\u022B" +
		"\x13\x03\x02\x02\x02\u022C\u022A\x03\x02\x02\x02\u022D\u023C\x05\x16\f" +
		"\x02\u022E\u023C\x05\x18\r\x02\u022F\u023C\x05*\x16\x02\u0230\u023C\x05" +
		"4\x1B\x02\u0231\u023C\x05,\x17\x02\u0232\u023C\x050\x19\x02\u0233\u023C" +
		"\x056\x1C\x02\u0234\u023C\x05<\x1F\x02\u0235\u023C\x05(\x15\x02\u0236" +
		"\u023C\x05> \x02\u0237\u023C\x05@!\x02\u0238\u023C\x05L\'\x02\u0239\u023C" +
		"\x05H%\x02\u023A\u023C\x05J&\x02\u023B\u022D\x03\x02\x02\x02\u023B\u022E" +
		"\x03\x02\x02\x02\u023B\u022F\x03\x02\x02\x02\u023B\u0230\x03\x02\x02\x02" +
		"\u023B\u0231\x03\x02\x02\x02\u023B\u0232\x03\x02\x02\x02\u023B\u0233\x03" +
		"\x02\x02\x02\u023B\u0234\x03\x02\x02\x02\u023B\u0235\x03\x02\x02\x02\u023B" +
		"\u0236\x03\x02\x02\x02\u023B\u0237\x03\x02\x02\x02\u023B\u0238\x03\x02" +
		"\x02\x02\u023B\u0239\x03\x02\x02\x02\u023B\u023A\x03\x02\x02\x02\u023C" +
		"\x15\x03\x02\x02\x02\u023D\u0241\x07\xE7\x02\x02\u023E\u023F\x07a\x02" +
		"\x02\u023F\u0242\x05\x8EH\x02\u0240\u0242\x05\x8EH\x02\u0241\u023E\x03" +
		"\x02\x02\x02\u0241\u0240\x03\x02\x02\x02\u0242\x17\x03\x02\x02\x02\u0243" +
		"\u0244\x07\xB9\x02\x02\u0244\u0245\x05\x1A\x0E\x02\u0245\x19\x03\x02\x02" +
		"\x02\u0246\u0248\x07?\x02\x02\u0247\u0246\x03\x02\x02\x02\u0247\u0248" +
		"\x03\x02\x02\x02\u0248\u0249\x03\x02\x02\x02\u0249\u0254\x05\x1E\x10\x02" +
		"\u024A\u024B\x07\x95\x02\x02\u024B\u024C\x07\x1F\x02\x02\u024C\u0251\x05" +
		" \x11\x02\u024D\u024E\x07$\x02\x02\u024E\u0250\x05 \x11\x02\u024F\u024D" +
		"\x03\x02\x02\x02\u0250\u0253\x03\x02\x02\x02\u0251\u024F\x03\x02\x02\x02" +
		"\u0251\u0252\x03\x02\x02\x02\u0252\u0255\x03\x02\x02\x02\u0253\u0251\x03" +
		"\x02\x02\x02\u0254\u024A\x03\x02\x02\x02\u0254\u0255\x03\x02\x02\x02\u0255" +
		"\u0257\x03\x02\x02\x02\u0256\u0258\x05\"\x12\x02\u0257\u0256\x03\x02\x02" +
		"\x02\u0257\u0258\x03\x02\x02\x02\u0258\u025A\x03\x02\x02\x02\u0259\u025B" +
		"\x05$\x13\x02\u025A\u0259\x03\x02\x02\x02\u025A\u025B\x03\x02\x02\x02" +
		"\u025B\x1B\x03\x02\x02\x02\u025C\u025F\x05\x8EH\x02\u025D\u025E\x07\x14" +
		"\x02\x02\u025E\u0260\x05\xE8u\x02\u025F\u025D\x03\x02\x02\x02\u025F\u0260" +
		"\x03\x02\x02\x02\u0260\x1D\x03\x02\x02\x02\u0261\u0266\x07\xDA\x02\x02" +
		"\u0262\u0263\x07$\x02\x02\u0263\u0265\x05\x1C\x0F\x02\u0264\u0262\x03" +
		"\x02\x02\x02\u0265\u0268\x03\x02\x02\x02\u0266\u0264\x03\x02\x02\x02\u0266" +
		"\u0267\x03\x02\x02\x02\u0267\u0272\x03\x02\x02\x02\u0268\u0266\x03\x02" +
		"\x02\x02\u0269\u026E\x05\x1C\x0F\x02\u026A\u026B\x07$\x02\x02\u026B\u026D" +
		"\x05\x1C\x0F\x02\u026C\u026A\x03\x02\x02\x02\u026D\u0270\x03\x02\x02\x02" +
		"\u026E\u026C\x03\x02\x02\x02\u026E\u026F\x03\x02\x02\x02\u026F\u0272\x03" +
		"\x02\x02\x02\u0270\u026E\x03\x02\x02\x02\u0271\u0261\x03\x02\x02\x02\u0271" +
		"\u0269\x03\x02\x02\x02\u0272\x1F\x03\x02\x02\x02\u0273\u0278\x05\x8EH" +
		"\x02\u0274\u0279\x07;\x02\x02\u0275\u0277\x07\x15\x02\x02\u0276\u0275" +
		"\x03\x02\x02\x02\u0276\u0277\x03\x02\x02\x02\u0277\u0279\x03\x02\x02\x02" +
		"\u0278\u0274\x03\x02\x02\x02\u0278\u0276\x03\x02\x02\x02\u0279!\x03\x02" +
		"\x02\x02\u027A\u027B\x07\xD0\x02\x02\u027B\u027C\x05\x8EH\x02\u027C#\x03" +
		"\x02\x02\x02\u027D\u027E\x07x\x02\x02\u027E\u027F\x05\x8EH\x02\u027F%" +
		"\x03\x02\x02\x02\u0280\u0281\x07\xEE\x02\x02\u0281\u0282\x05\x8EH\x02" +
		"\u0282\'\x03\x02\x02\x02\u0283\u0284\x07\xEF\x02\x02\u0284\u0286\x05\x1A" +
		"\x0E\x02\u0285\u0287\x05&\x14\x02\u0286\u0285\x03\x02\x02\x02\u0286\u0287" +
		"\x03\x02\x02\x02\u0287)\x03\x02\x02\x02\u0288\u0289\x07/\x02\x02\u0289" +
		"\u028A\x05V,\x02\u028A+\x03\x02\x02\x02\u028B\u028C\x07\xCA\x02\x02\u028C" +
		"\u0291\x05.\x18\x02\u028D\u028E\x07$\x02\x02\u028E\u0290\x05.\x18\x02" +
		"\u028F\u028D\x03\x02\x02\x02\u0290\u0293\x03\x02\x02\x02\u0291\u028F\x03" +
		"\x02\x02\x02\u0291\u0292\x03\x02\x02\x02\u0292-\x03\x02\x02\x02\u0293" +
		"\u0291\x03\x02\x02\x02\u0294\u0295\x05\xACW\x02\u0295\u0296\x07O\x02\x02" +
		"\u0296\u0297\x05\x8EH\x02\u0297\u02A4\x03\x02\x02\x02\u0298\u0299\x05" +
		"\xE8u\x02\u0299\u029A\x07O\x02\x02\u029A\u029B\x05\x8EH\x02\u029B\u02A4" +
		"\x03\x02\x02\x02\u029C\u029D\x05\xE8u\x02\u029D\u029E\x07\x9C\x02\x02" +
		"\u029E\u029F\x05\x8EH\x02\u029F\u02A4\x03\x02\x02\x02\u02A0\u02A1\x05" +
		"\xE8u\x02\u02A1\u02A2\x05j6\x02\u02A2\u02A4\x03\x02\x02\x02\u02A3\u0294" +
		"\x03\x02\x02\x02\u02A3\u0298\x03\x02\x02\x02\u02A3\u029C\x03\x02\x02\x02" +
		"\u02A3\u02A0\x03\x02\x02\x02\u02A4/\x03\x02\x02\x02\u02A5\u02A6\x07\xB4" +
		"\x02\x02\u02A6\u02AB\x052\x1A\x02\u02A7\u02A8\x07$\x02\x02\u02A8\u02AA" +
		"\x052\x1A\x02\u02A9\u02A7\x03\x02\x02\x02\u02AA\u02AD\x03\x02\x02\x02" +
		"\u02AB\u02A9\x03\x02\x02\x02\u02AB\u02AC\x03\x02\x02\x02\u02AC1\x03\x02" +
		"\x02\x02\u02AD\u02AB\x03\x02\x02\x02\u02AE\u02B3\x05\xACW\x02\u02AF\u02B0" +
		"\x05\xE8u\x02\u02B0\u02B1\x05j6\x02\u02B1\u02B3\x03\x02\x02\x02\u02B2" +
		"\u02AE\x03\x02\x02\x02\u02B2\u02AF\x03\x02\x02\x02\u02B33\x03\x02\x02" +
		"\x02\u02B4\u02B6\x07=\x02\x02\u02B5\u02B4\x03\x02\x02\x02\u02B5\u02B6" +
		"\x03\x02\x02\x02\u02B6\u02B7\x03\x02\x02\x02\u02B7\u02B8\x079\x02\x02" +
		"\u02B8\u02BD\x05\x8EH\x02\u02B9\u02BA\x07$\x02\x02\u02BA\u02BC\x05\x8E" +
		"H\x02\u02BB\u02B9\x03\x02\x02\x02\u02BC\u02BF\x03\x02\x02\x02\u02BD\u02BB" +
		"\x03\x02\x02\x02\u02BD\u02BE\x03\x02\x02\x02\u02BE5\x03\x02\x02\x02\u02BF" +
		"\u02BD\x03\x02\x02\x02\u02C0\u02C1\x07\x91\x02\x02\u02C1\u02C4\x07~\x02" +
		"\x02\u02C2\u02C4\x07~\x02\x02\u02C3\u02C0\x03\x02\x02\x02\u02C3\u02C2" +
		"\x03\x02\x02\x02\u02C4\u02C5\x03\x02\x02\x02\u02C5\u02C9\x05V,\x02\u02C6" +
		"\u02C8\x058\x1D\x02\u02C7\u02C6\x03\x02\x02\x02\u02C8\u02CB\x03\x02\x02" +
		"\x02\u02C9\u02C7\x03\x02\x02\x02\u02C9\u02CA\x03\x02\x02\x02\u02CA\u02CD" +
		"\x03\x02\x02\x02\u02CB\u02C9\x03\x02\x02\x02\u02CC\u02CE\x05&\x14\x02" +
		"\u02CD\u02CC\x03\x02\x02\x02\u02CD\u02CE\x03\x02\x02\x02\u02CE7\x03\x02" +
		"\x02\x02\u02CF\u02E5\x07\xEA\x02\x02\u02D0\u02D1\x07j\x02\x02\u02D1\u02E6" +
		"\x05:\x1E\x02\u02D2\u02D3\x07\x1D\x02\x02\u02D3\u02D4\x07j\x02\x02\u02D4" +
		"\u02E6\x05:\x1E\x02\u02D5\u02D6\x07\xD8\x02\x02\u02D6\u02D7\x07j\x02\x02" +
		"\u02D7\u02E6\x05:\x1E\x02\u02D8\u02D9\x07\xA9\x02\x02\u02D9\u02DA\x07" +
		"j\x02\x02\u02DA\u02E6\x05:\x1E\x02\u02DB\u02DC\x07\x9D\x02\x02\u02DC\u02DD" +
		"\x07j\x02\x02\u02DD\u02E6\x05:\x1E\x02\u02DE\u02DF\x07o\x02\x02\u02DF" +
		"\u02E0\x07\x8F\x02\x02\u02E0\u02E6\x05\xE6t\x02\u02E1\u02E2\x07\xC0\x02" +
		"\x02\u02E2\u02E3\x05\xE8u\x02\u02E3\u02E4\x05n8\x02\u02E4\u02E6\x03\x02" +
		"\x02\x02\u02E5\u02D0\x03\x02\x02\x02\u02E5\u02D2\x03\x02\x02\x02\u02E5" +
		"\u02D5\x03\x02\x02\x02\u02E5\u02D8\x03\x02\x02\x02\u02E5\u02DB\x03\x02" +
		"\x02\x02\u02E5\u02DE\x03\x02\x02\x02\u02E5\u02E1\x03\x02\x02\x02\u02E6" +
		"9\x03\x02\x02\x02\u02E7\u02E9\x07\xC6\x02\x02\u02E8\u02E7\x03\x02\x02" +
		"\x02\u02E8\u02E9\x03\x02\x02\x02\u02E9\u02EA\x03\x02\x02\x02\u02EA\u02EB" +
		"\x05\xE8u\x02\u02EB\u02EC\x05n8\x02\u02EC\u02ED\x07{\x02\x02\u02ED\u02EE" +
		"\x05\xEAv\x02\u02EE\u02EF\x07\xBF\x02\x02\u02EF;\x03\x02\x02\x02\u02F0" +
		"\u02F1\x07\x7F\x02\x02\u02F1\u02FB\x05X-\x02\u02F2\u02F7\x07\x8F\x02\x02" +
		"\u02F3\u02F4\x07~\x02\x02\u02F4\u02F8\x05,\x17\x02\u02F5\u02F6\x07/\x02" +
		"\x02\u02F6\u02F8\x05,\x17\x02\u02F7\u02F3\x03\x02\x02\x02\u02F7\u02F5" +
		"\x03\x02\x02\x02\u02F8\u02FA\x03\x02\x02\x02\u02F9\u02F2\x03\x02\x02\x02" +
		"\u02FA\u02FD\x03\x02\x02\x02\u02FB\u02F9\x03\x02\x02\x02\u02FB\u02FC\x03" +
		"\x02\x02\x02\u02FC=\x03\x02\x02\x02\u02FD\u02FB\x03\x02\x02\x02\u02FE" +
		"\u02FF\x07\xE6\x02\x02\u02FF\u0300\x05\x8EH\x02\u0300\u0301\x07\x14\x02" +
		"\x02\u0301\u0302\x05\xE8u\x02\u0302?\x03\x02\x02\x02\u0303\u0304\x07 " +
		"\x02\x02\u0304\u0311\x05B\"\x02\u0305\u0307\x07{\x02\x02\u0306\u0308\x05" +
		"D#\x02\u0307\u0306\x03\x02\x02\x02\u0307\u0308\x03\x02\x02\x02\u0308\u030D" +
		"\x03\x02\x02\x02\u0309\u030A\x07$\x02\x02\u030A\u030C\x05D#\x02\u030B" +
		"\u0309\x03\x02\x02\x02\u030C\u030F\x03\x02\x02\x02\u030D\u030B\x03\x02" +
		"\x02\x02\u030D\u030E\x03\x02\x02\x02\u030E\u0310\x03\x02\x02\x02\u030F" +
		"\u030D\x03\x02\x02\x02\u0310\u0312\x07\xBF\x02\x02\u0311\u0305\x03\x02" +
		"\x02\x02\u0311\u0312\x03\x02\x02\x02\u0312\u0322\x03\x02\x02\x02\u0313" +
		"\u0320\x07\xF2\x02\x02\u0314\u0321\x07\xDA\x02\x02\u0315\u031A\x05F$\x02" +
		"\u0316\u0317\x07$\x02\x02\u0317\u0319\x05F$\x02\u0318\u0316\x03\x02\x02" +
		"\x02\u0319\u031C\x03\x02\x02\x02\u031A\u0318\x03\x02\x02\x02\u031A\u031B" +
		"\x03\x02\x02\x02\u031B\u031E\x03\x02\x02\x02\u031C\u031A\x03\x02\x02\x02" +
		"\u031D\u031F\x05&\x14\x02\u031E\u031D\x03\x02\x02\x02\u031E\u031F\x03" +
		"\x02\x02\x02\u031F\u0321\x03\x02\x02\x02\u0320\u0314\x03\x02\x02\x02\u0320" +
		"\u0315\x03\x02\x02\x02\u0321\u0323\x03\x02\x02\x02\u0322\u0313\x03\x02" +
		"\x02\x02\u0322\u0323\x03\x02\x02\x02\u0323A\x03\x02\x02\x02\u0324\u0325" +
		"\x05\xE4s\x02\u0325\u0326\x05\u01DE\xF0\x02\u0326C\x03\x02\x02\x02\u0327" +
		"\u0328\x05\x8EH\x02\u0328E\x03\x02\x02\x02\u0329\u032C\x05\u01DE\xF0\x02" +
		"\u032A\u032B\x07\x14\x02\x02\u032B\u032D\x05\xE8u\x02\u032C\u032A\x03" +
		"\x02\x02\x02\u032C\u032D\x03\x02\x02\x02\u032DG\x03\x02\x02\x02\u032E" +
		"\u032F\x07y\x02\x02\u032F\u0332\x070\x02\x02\u0330\u0331\x07\xEF\x02\x02" +
		"\u0331\u0333\x07d\x02\x02\u0332\u0330\x03\x02\x02\x02\u0332\u0333\x03" +
		"\x02\x02\x02\u0333\u0334\x03\x02\x02\x02\u0334\u0335\x07[\x02\x02\u0335" +
		"\u0336\x05\x8EH\x02\u0336\u0337\x07\x14\x02\x02\u0337\u033A\x05\xE8u\x02" +
		"\u0338\u0339\x07X\x02\x02\u0339\u033B\x05\u01D4\xEB\x02\u033A\u0338\x03" +
		"\x02\x02\x02\u033A\u033B\x03\x02\x02\x02\u033BI\x03\x02\x02\x02\u033C" +
		"\u033D\x07Z\x02\x02\u033D\u033E\x07{\x02\x02\u033E\u033F\x05\xE8u\x02" +
		"\u033F\u0340\x07i\x02\x02\u0340\u0341\x05\x8EH\x02\u0341\u0343\x07\x19" +
		"\x02\x02\u0342\u0344\x05\x14\v\x02\u0343\u0342\x03\x02\x02\x02\u0344\u0345" +
		"\x03\x02\x02\x02\u0345\u0343\x03\x02\x02\x02\u0345\u0346\x03\x02\x02\x02" +
		"\u0346\u0347\x03\x02\x02\x02\u0347\u0348\x07\xBF\x02\x02\u0348K\x03\x02" +
		"\x02\x02\u0349\u034A\x07 \x02\x02\u034A\u034B\x07v\x02\x02\u034B\u034C" +
		"\x05\f\x07\x02\u034C\u034E\x07\xAB\x02\x02\u034D\u034F\x05N(\x02\u034E" +
		"\u034D\x03\x02\x02\x02\u034E\u034F\x03\x02\x02\x02\u034FM\x03\x02\x02" +
		"\x02\u0350\u0351\x07i\x02\x02\u0351\u0357\x07\xDE\x02\x02\u0352\u0356" +
		"\x05P)\x02\u0353\u0356\x05R*\x02\u0354\u0356\x05T+\x02\u0355\u0352\x03" +
		"\x02\x02\x02\u0355\u0353\x03\x02\x02\x02\u0355\u0354\x03\x02\x02\x02\u0356" +
		"\u0359\x03\x02\x02\x02\u0357\u0355\x03\x02\x02\x02\u0357\u0358\x03\x02" +
		"\x02\x02\u0358O\x03\x02\x02\x02\u0359\u0357\x03\x02\x02\x02\u035A\u035B" +
		"\x07\x8E\x02\x02\u035B\u035C\x05\x8EH\x02\u035C\u035D\t\x02\x02\x02\u035D" +
		"Q\x03\x02\x02\x02\u035E\u035F\x07\x8F\x02\x02\u035F\u0360\x07U\x02\x02" +
		"\u0360\u0361\t\x03\x02\x02\u0361S\x03\x02\x02\x02\u0362\u0363\x07\xB6" +
		"\x02\x02\u0363\u0364\x07\xD3\x02\x02\u0364\u0365\x07\x14\x02\x02\u0365" +
		"\u0366\x05\xE8u\x02\u0366U\x03\x02\x02\x02\u0367\u036C\x05X-\x02\u0368" +
		"\u0369\x07$\x02\x02\u0369\u036B\x05X-\x02\u036A\u0368\x03\x02\x02\x02" +
		"\u036B\u036E\x03\x02\x02\x02\u036C\u036A\x03\x02\x02\x02\u036C\u036D\x03" +
		"\x02\x02\x02\u036DW\x03\x02\x02\x02\u036E\u036C\x03\x02\x02\x02\u036F" +
		"\u0370\x05\xE8u\x02\u0370\u0371\x07O\x02\x02\u0371\u0372\x05\\/\x02\u0372" +
		"\u0375\x03\x02\x02\x02\u0373\u0375\x05\\/\x02\u0374\u036F\x03\x02\x02" +
		"\x02\u0374\u0373\x03\x02\x02\x02\u0375Y\x03\x02\x02\x02\u0376\u0377\x07" +
		"v\x02\x02\u0377\u0378\x07\x06\x02\x02\u0378\u0385\x07\xAB\x02\x02\u0379" +
		"\u037B\x07v\x02\x02\u037A\u037C\x07\x06\x02\x02\u037B\u037A\x03\x02\x02" +
		"\x02\u037B\u037C\x03\x02\x02\x02\u037C\u037D\x03\x02\x02\x02\u037D\u037F" +
		"\x07$\x02\x02\u037E\u0380\x07\x06\x02\x02\u037F\u037E\x03\x02\x02\x02" +
		"\u037F\u0380\x03\x02\x02\x02\u0380\u0381\x03\x02\x02\x02\u0381\u0385\x07" +
		"\xAB\x02\x02\u0382\u0385\x07\x9B\x02\x02\u0383\u0385\x07\xDA\x02\x02\u0384" +
		"\u0376\x03\x02\x02\x02\u0384\u0379\x03\x02\x02\x02\u0384\u0382\x03\x02" +
		"\x02\x02\u0384\u0383\x03\x02\x02\x02\u0385[\x03\x02\x02\x02\u0386\u0389" +
		"\x05^0\x02\u0387\u0389\x05b2\x02\u0388\u0386\x03\x02\x02\x02\u0388\u0387" +
		"\x03\x02\x02\x02\u0389]\x03\x02\x02\x02\u038A\u038B\x07\xCD\x02\x02\u038B" +
		"\u038C\x07{\x02\x02\u038C\u038D\x05b2\x02\u038D\u038E\x07\xBF\x02\x02" +
		"\u038E\u0395\x03\x02\x02\x02\u038F\u0390\x07\x0F\x02\x02\u0390\u0391\x07" +
		"{\x02\x02\u0391\u0392\x05b2\x02\u0392\u0393\x07\xBF\x02\x02\u0393\u0395" +
		"\x03\x02\x02\x02\u0394\u038A\x03\x02\x02\x02\u0394\u038F\x03\x02\x02\x02" +
		"\u0395_\x03\x02\x02\x02\u0396\u0398\x05t;\x02\u0397\u0399\x05Z.\x02\u0398" +
		"\u0397\x03\x02\x02\x02\u0398\u0399\x03\x02\x02\x02\u0399a\x03\x02\x02" +
		"\x02\u039A\u03A0\x05f4\x02\u039B\u039C\x05`1\x02\u039C\u039D\x05f4\x02" +
		"\u039D\u039F\x03\x02\x02\x02\u039E\u039B\x03\x02\x02\x02\u039F\u03A2\x03" +
		"\x02\x02\x02\u03A0\u039E\x03\x02\x02\x02\u03A0\u03A1\x03\x02\x02\x02\u03A1" +
		"\u03A5\x03\x02\x02\x02\u03A2\u03A0\x03\x02\x02\x02\u03A3\u03A5\x05h5\x02" +
		"\u03A4\u039A\x03\x02\x02\x02\u03A4\u03A3\x03\x02\x02\x02\u03A5\u03A6\x03" +
		"\x02\x02\x02\u03A6\u03A4\x03\x02\x02\x02\u03A6\u03A7\x03\x02\x02\x02\u03A7" +
		"c\x03\x02\x02\x02\u03A8\u03AC\x05f4\x02\u03A9\u03AA\x05t;\x02\u03AA\u03AB" +
		"\x05f4\x02\u03AB\u03AD\x03\x02\x02\x02\u03AC\u03A9\x03\x02\x02\x02\u03AD" +
		"\u03AE\x03\x02\x02\x02\u03AE\u03AC\x03\x02\x02\x02\u03AE\u03AF\x03\x02" +
		"\x02\x02\u03AFe\x03\x02\x02\x02\u03B0\u03CA\x07{\x02\x02\u03B1\u03B2\x05" +
		"\xE8u\x02\u03B2\u03B3\x07\xEE\x02\x02\u03B3\u03B4\x05\x8EH\x02\u03B4\u03CB" +
		"\x03\x02\x02\x02\u03B5\u03B6\x05\xE8u\x02\u03B6\u03B9\x05r:\x02\u03B7" +
		"\u03B8\x07\xEE\x02\x02\u03B8\u03BA\x05\x8EH\x02\u03B9\u03B7\x03\x02\x02" +
		"\x02\u03B9\u03BA\x03\x02\x02\x02\u03BA\u03CB\x03\x02\x02\x02\u03BB\u03BC" +
		"\x07\xEE\x02\x02\u03BC\u03CB\x05\x8EH\x02\u03BD\u03BF\x05\xE8u\x02\u03BE" +
		"\u03BD\x03\x02\x02\x02\u03BE\u03BF\x03\x02\x02\x02\u03BF\u03C1\x03\x02" +
		"\x02\x02\u03C0\u03C2\x05\x80A\x02\u03C1\u03C0\x03\x02\x02\x02\u03C1\u03C2" +
		"\x03\x02\x02\x02\u03C2\u03C4\x03\x02\x02\x02\u03C3\u03C5\x05r:\x02\u03C4" +
		"\u03C3\x03\x02\x02\x02\u03C4\u03C5\x03\x02\x02\x02\u03C5\u03C8\x03\x02" +
		"\x02\x02\u03C6\u03C7\x07\xEE\x02\x02\u03C7\u03C9\x05\x8EH\x02\u03C8\u03C6" +
		"\x03\x02\x02\x02\u03C8\u03C9\x03\x02\x02\x02\u03C9\u03CB\x03\x02\x02\x02" +
		"\u03CA\u03B1\x03\x02\x02\x02\u03CA\u03B5\x03\x02\x02\x02\u03CA\u03BB\x03" +
		"\x02\x02\x02\u03CA\u03BE\x03\x02\x02\x02\u03CB\u03CC\x03\x02\x02\x02\u03CC" +
		"\u03CD\x07\xBF\x02\x02\u03CDg\x03\x02\x02\x02\u03CE\u03CF\x07{\x02\x02" +
		"\u03CF\u03D2\x05X-\x02\u03D0\u03D1\x07\xEE\x02\x02\u03D1\u03D3\x05\x8E" +
		"H\x02\u03D2\u03D0\x03\x02\x02\x02\u03D2\u03D3\x03\x02\x02\x02\u03D3\u03D4" +
		"\x03\x02\x02\x02\u03D4\u03D6\x07\xBF\x02\x02\u03D5\u03D7\x05Z.\x02\u03D6" +
		"\u03D5\x03\x02\x02\x02\u03D6\u03D7\x03\x02\x02\x02\u03D7i\x03\x02\x02" +
		"\x02\u03D8\u03DA\x05n8\x02\u03D9\u03D8\x03\x02\x02\x02\u03DA\u03DB\x03" +
		"\x02\x02\x02\u03DB\u03D9\x03\x02\x02\x02\u03DB\u03DC\x03\x02\x02\x02\u03DC" +
		"k\x03\x02\x02\x02\u03DD\u03DE\x05\x80A\x02\u03DEm\x03\x02\x02\x02\u03DF" +
		"\u03E0\x07#\x02\x02\u03E0\u03E1\x05\u01DE\xF0\x02\u03E1o\x03\x02\x02\x02" +
		"\u03E2\u03E3\x07#\x02\x02\u03E3\u03E8\x05\u01DE\xF0\x02\u03E4\u03E5\x07" +
		"\x19\x02\x02\u03E5\u03E7\x05\u01DE\xF0\x02\u03E6\u03E4\x03\x02\x02\x02" +
		"\u03E7\u03EA\x03\x02\x02\x02\u03E8\u03E6\x03\x02\x02\x02\u03E8\u03E9\x03" +
		"\x02\x02\x02\u03E9q\x03\x02\x02\x02\u03EA\u03E8\x03\x02\x02\x02\u03EB" +
		"\u03EE\x05\xD8m\x02\u03EC\u03EE\x05\xDCo\x02\u03ED\u03EB\x03\x02\x02\x02" +
		"\u03ED\u03EC\x03\x02\x02\x02\u03EEs\x03\x02\x02\x02\u03EF\u03F1\x05v<" +
		"\x02\u03F0\u03EF\x03\x02\x02\x02\u03F0\u03F1\x03\x02\x02\x02\u03F1\u03F2" +
		"\x03\x02\x02\x02\u03F2\u0413\x05x=\x02\u03F3\u0410\x07u\x02\x02\u03F4" +
		"\u03F5\x05\xE8u\x02\u03F5\u03F6\x07\xEE\x02\x02\u03F6\u03F7\x05\x8EH\x02" +
		"\u03F7\u0411\x03\x02\x02\x02\u03F8\u03F9\x05\xE8u\x02\u03F9\u03FC\x05" +
		"r:\x02\u03FA\u03FB\x07\xEE\x02\x02\u03FB\u03FD\x05\x8EH\x02\u03FC\u03FA" +
		"\x03\x02\x02\x02\u03FC\u03FD\x03\x02\x02\x02\u03FD\u0411\x03\x02\x02\x02" +
		"\u03FE\u03FF\x07\xEE\x02\x02\u03FF\u0411\x05\x8EH\x02\u0400\u0402\x05" +
		"\xE8u\x02\u0401\u0400\x03\x02\x02\x02\u0401\u0402\x03\x02\x02\x02\u0402" +
		"\u0404\x03\x02\x02\x02\u0403\u0405\x05\x80A\x02\u0404\u0403\x03\x02\x02" +
		"\x02\u0404\u0405\x03\x02\x02\x02\u0405\u0407\x03\x02\x02\x02\u0406\u0408" +
		"\x05|?\x02\u0407\u0406\x03\x02\x02\x02\u0407\u0408\x03\x02\x02\x02\u0408" +
		"\u040A\x03\x02\x02\x02\u0409\u040B\x05r:\x02\u040A\u0409\x03\x02\x02\x02" +
		"\u040A\u040B\x03\x02\x02\x02\u040B\u040E\x03\x02\x02\x02\u040C\u040D\x07" +
		"\xEE\x02\x02\u040D\u040F\x05\x8EH\x02\u040E\u040C\x03\x02\x02\x02\u040E" +
		"\u040F\x03\x02\x02\x02\u040F\u0411\x03\x02\x02\x02\u0410\u03F4\x03\x02" +
		"\x02\x02\u0410\u03F8\x03\x02\x02\x02\u0410\u03FE\x03\x02\x02\x02\u0410" +
		"\u0401\x03\x02\x02\x02\u0411\u0412\x03\x02\x02\x02\u0412\u0414\x07\xAA" +
		"\x02\x02\u0413\u03F3\x03\x02\x02\x02\u0413\u0414\x03\x02\x02\x02\u0414" +
		"\u0415\x03\x02\x02\x02\u0415\u0417\x05x=\x02\u0416\u0418\x05z>\x02\u0417" +
		"\u0416\x03\x02\x02\x02\u0417\u0418\x03\x02\x02\x02\u0418u\x03\x02\x02" +
		"\x02\u0419\u041A\t\x04\x02\x02\u041Aw\x03\x02\x02\x02\u041B\u041C\t\x05" +
		"\x02\x02\u041Cy\x03\x02\x02\x02\u041D\u041E\t\x06\x02\x02\u041E{\x03\x02" +
		"\x02\x02\u041F\u0421\x07\xDA\x02\x02\u0420\u0422\x05~@\x02\u0421\u0420" +
		"\x03\x02\x02\x02\u0421\u0422\x03\x02\x02\x02\u0422}\x03\x02\x02\x02\u0423" +
		"\u0425\x07\x06\x02\x02\u0424\u0423\x03\x02\x02\x02\u0424\u0425\x03\x02" +
		"\x02\x02\u0425\u0426\x03\x02\x02\x02\u0426\u0428\x07B\x02\x02\u0427\u0429" +
		"\x07\x06\x02\x02\u0428\u0427\x03\x02\x02\x02\u0428\u0429\x03\x02\x02\x02" +
		"\u0429\u042C\x03\x02\x02\x02\u042A\u042C\x07\x06\x02\x02\u042B\u0424\x03" +
		"\x02\x02\x02\u042B\u042A\x03\x02\x02\x02\u042C\x7F\x03\x02\x02\x02\u042D" +
		"\u042E\x07#\x02\x02\u042E\u042F\x05\x82B\x02\u042F\x81\x03\x02\x02\x02" +
		"\u0430\u0433\x05\x86D\x02\u0431\u0433\x05\x84C\x02\u0432\u0430\x03\x02" +
		"\x02\x02\u0432\u0431\x03\x02\x02\x02\u0433\x83\x03\x02\x02\x02\u0434\u043D" +
		"\x05\x88E\x02\u0435\u0439\x07\x19\x02\x02\u0436\u0437\x07#\x02\x02\u0437" +
		"\u043A\x05\x88E\x02\u0438\u043A\x05\x88E\x02\u0439\u0436\x03\x02\x02\x02" +
		"\u0439\u0438\x03\x02\x02\x02\u043A\u043C\x03\x02\x02\x02\u043B\u0435\x03" +
		"\x02\x02\x02\u043C\u043F\x03\x02\x02\x02\u043D\u043B\x03\x02\x02\x02\u043D" +
		"\u043E\x03\x02\x02\x02\u043E\x85\x03\x02\x02\x02\u043F\u043D\x03\x02\x02" +
		"\x02\u0440\u0449\x05\x88E\x02\u0441\u0445\x07\x19\x02\x02\u0442\u0443" +
		"\x07#\x02\x02\u0443\u0446\x05\x88E\x02\u0444\u0446\x05\x88E\x02\u0445" +
		"\u0442\x03\x02\x02\x02\u0445\u0444\x03\x02\x02\x02\u0446\u0448\x03\x02" +
		"\x02\x02\u0447\u0441\x03\x02\x02\x02\u0448\u044B\x03\x02\x02\x02\u0449" +
		"\u0447\x03\x02\x02\x02\u0449\u044A\x03\x02\x02\x02\u044A\x87\x03\x02\x02" +
		"\x02\u044B\u0449\x03\x02\x02\x02\u044C\u0453\x05\x8AF\x02\u044D\u044E" +
		"\x07s\x02\x02\u044E\u0452\x05\x8AF\x02\u044F\u0450\x07#\x02\x02\u0450" +
		"\u0452\x05\x8AF\x02\u0451\u044D\x03\x02\x02\x02\u0451\u044F\x03\x02\x02" +
		"\x02\u0452\u0455\x03\x02\x02\x02\u0453\u0451\x03\x02\x02\x02\u0453\u0454" +
		"\x03\x02\x02\x02\u0454\x89\x03\x02\x02\x02\u0455\u0453\x03\x02\x02\x02" +
		"\u0456\u0457\x07t\x02\x02\u0457\u045A\x05\x8AF\x02\u0458\u045A\x05\x8C" +
		"G\x02\u0459\u0456\x03\x02\x02\x02\u0459\u0458\x03\x02\x02\x02\u045A\x8B" +
		"\x03\x02\x02\x02\u045B\u045C\x07{\x02\x02\u045C\u045D\x05\x84C\x02\u045D" +
		"\u045E\x07\xBF\x02\x02\u045E\u0462\x03\x02\x02\x02\u045F\u0462\x07\x81" +
		"\x02\x02\u0460\u0462\x05\u01DE\xF0\x02\u0461\u045B\x03\x02\x02\x02\u0461" +
		"\u045F\x03\x02\x02\x02\u0461\u0460\x03\x02\x02\x02\u0462\x8D\x03\x02\x02" +
		"\x02\u0463\u0464\x05\x90I\x02\u0464\x8F\x03\x02\x02\x02\u0465\u046A\x05" +
		"\x92J\x02\u0466\u0467\x07\x94\x02\x02\u0467\u0469\x05\x92J\x02\u0468\u0466" +
		"\x03\x02\x02\x02\u0469\u046C\x03\x02\x02\x02\u046A\u0468\x03\x02\x02\x02" +
		"\u046A\u046B\x03\x02\x02\x02\u046B\x91\x03\x02\x02\x02\u046C\u046A\x03" +
		"\x02\x02\x02\u046D\u0472\x05\x94K\x02\u046E\u046F\x07\xF1\x02\x02\u046F" +
		"\u0471\x05\x94K\x02\u0470\u046E\x03\x02\x02\x02\u0471\u0474\x03\x02\x02" +
		"\x02\u0472\u0470\x03\x02\x02\x02\u0472\u0473\x03\x02\x02\x02\u0473\x93" +
		"\x03\x02\x02\x02\u0474\u0472\x03\x02\x02\x02\u0475\u047A\x05\x96L\x02" +
		"\u0476\u0477\x07\x12\x02\x02\u0477\u0479\x05\x96L\x02\u0478\u0476\x03" +
		"\x02\x02\x02\u0479\u047C\x03\x02\x02\x02\u047A\u0478\x03\x02\x02\x02\u047A" +
		"\u047B\x03\x02\x02\x02\u047B\x95\x03\x02\x02\x02\u047C\u047A\x03\x02\x02" +
		"\x02\u047D\u047E\x07\x8B\x02\x02\u047E\u0481\x05\x96L\x02\u047F\u0481" +
		"\x05\x98M\x02\u0480\u047D\x03\x02\x02\x02\u0480\u047F\x03\x02\x02\x02" +
		"\u0481\x97\x03\x02\x02\x02\u0482\u0493\x05\x9AN\x02\u0483\u0484\x07O\x02" +
		"\x02\u0484\u0492\x05\x9AN\x02\u0485\u0486\x07\x82\x02\x02\u0486\u0492" +
		"\x05\x9AN\x02\u0487\u0488\x07\x83\x02\x02\u0488\u0492\x05\x9AN\x02\u0489" +
		"\u048A\x07w\x02\x02\u048A\u0492\x05\x9AN\x02\u048B\u048C\x07_\x02\x02" +
		"\u048C\u0492\x05\x9AN\x02\u048D\u048E\x07|\x02\x02\u048E\u0492\x05\x9A" +
		"N\x02\u048F\u0490\x07c\x02\x02\u0490\u0492\x05\x9AN\x02\u0491\u0483\x03" +
		"\x02\x02\x02\u0491\u0485\x03\x02\x02\x02\u0491\u0487\x03\x02\x02\x02\u0491" +
		"\u0489\x03\x02\x02\x02\u0491\u048B\x03\x02\x02\x02\u0491\u048D\x03\x02" +
		"\x02\x02\u0491\u048F\x03\x02\x02\x02\u0492\u0495\x03\x02\x02\x02\u0493" +
		"\u0491\x03\x02\x02\x02\u0493\u0494\x03\x02\x02\x02\u0494\x99\x03\x02\x02" +
		"\x02\u0495\u0493\x03\x02\x02\x02\u0496\u0498\x05\x9EP\x02\u0497\u0499" +
		"\x05\x9CO\x02\u0498\u0497\x03\x02\x02\x02\u0498\u0499\x03\x02\x02\x02" +
		"\u0499\x9B\x03\x02\x02\x02\u049A\u049B\x07\xB0\x02\x02\u049B\u04AD\x05" +
		"\x9EP\x02\u049C\u049D\x07\xD2\x02\x02\u049D\u049E\x07\xEF\x02\x02\u049E" +
		"\u04AD\x05\x9EP\x02\u049F\u04A0\x07N\x02\x02\u04A0\u04A1\x07\xEF\x02\x02" +
		"\u04A1\u04AD\x05\x9EP\x02\u04A2\u04A3\x07+\x02\x02\u04A3\u04AD\x05\x9E" +
		"P\x02\u04A4\u04A5\x07i\x02\x02\u04A5\u04AD\x05\x9EP\x02\u04A6\u04AA\x07" +
		"n\x02\x02\u04A7\u04AB\x07\x8D\x02\x02\u04A8\u04A9\x07\x8B\x02\x02\u04A9" +
		"\u04AB\x07\x8D\x02\x02\u04AA\u04A7\x03\x02\x02\x02\u04AA\u04A8\x03\x02" +
		"\x02\x02\u04AB\u04AD\x03\x02\x02\x02\u04AC\u049A\x03\x02\x02\x02\u04AC" +
		"\u049C\x03\x02\x02\x02\u04AC\u049F\x03\x02\x02\x02\u04AC\u04A2\x03\x02" +
		"\x02\x02\u04AC\u04A4\x03\x02\x02\x02\u04AC\u04A6\x03\x02\x02\x02\u04AD" +
		"\x9D\x03\x02\x02\x02\u04AE\u04B5\x05\xA0Q\x02\u04AF\u04B0\x07\x9B\x02" +
		"\x02\u04B0\u04B4\x05\xA0Q\x02\u04B1\u04B2\x07\x80\x02\x02\u04B2\u04B4" +
		"\x05\xA0Q\x02\u04B3\u04AF\x03\x02\x02\x02\u04B3\u04B1\x03\x02\x02\x02" +
		"\u04B4\u04B7\x03\x02\x02\x02\u04B5\u04B3\x03\x02\x02\x02\u04B5\u04B6\x03" +
		"\x02\x02\x02\u04B6\x9F\x03\x02\x02\x02\u04B7\u04B5\x03\x02\x02\x02\u04B8" +
		"\u04C1\x05\xA2R\x02\u04B9\u04BA\x07\xDA\x02\x02\u04BA\u04C0\x05\xA2R\x02" +
		"\u04BB\u04BC\x07@\x02\x02\u04BC\u04C0\x05\xA2R\x02\u04BD\u04BE\x07\x81" +
		"\x02\x02\u04BE\u04C0\x05\xA2R\x02\u04BF\u04B9\x03\x02\x02\x02\u04BF\u04BB" +
		"\x03\x02\x02\x02\u04BF\u04BD\x03\x02\x02\x02\u04C0\u04C3\x03\x02\x02\x02" +
		"\u04C1\u04BF\x03\x02\x02\x02\u04C1\u04C2\x03\x02\x02\x02\u04C2\xA1\x03" +
		"\x02\x02\x02\u04C3\u04C1\x03\x02\x02\x02\u04C4\u04C9\x05\xA4S\x02\u04C5" +
		"\u04C6\x07\x9F\x02\x02\u04C6\u04C8\x05\xA4S\x02\u04C7\u04C5\x03\x02\x02" +
		"\x02\u04C8\u04CB\x03\x02\x02\x02\u04C9\u04C7\x03\x02\x02\x02\u04C9\u04CA" +
		"\x03\x02\x02\x02\u04CA\xA3\x03\x02\x02\x02\u04CB\u04C9\x03\x02\x02\x02" +
		"\u04CC\u04D2\x05\xA6T\x02\u04CD\u04CE\x07\x9B\x02\x02\u04CE\u04D2\x05" +
		"\xA6T\x02\u04CF\u04D0\x07\x80\x02\x02\u04D0\u04D2\x05\xA6T\x02\u04D1\u04CC" +
		"\x03\x02\x02\x02\u04D1\u04CD\x03\x02\x02\x02\u04D1\u04CF\x03\x02\x02\x02" +
		"\u04D2\xA5\x03\x02\x02\x02\u04D3\u04D7\x05\xAEX\x02\u04D4\u04D6\x05\xA8" +
		"U\x02\u04D5\u04D4\x03\x02\x02\x02\u04D6\u04D9\x03\x02\x02\x02\u04D7\u04D5" +
		"\x03\x02\x02\x02\u04D7\u04D8\x03\x02\x02\x02\u04D8\xA7\x03\x02\x02\x02" +
		"\u04D9\u04D7\x03\x02\x02\x02\u04DA\u04EA";
	private static readonly _serializedATNSegment3: string =
		"\x05\xAAV\x02\u04DB\u04EA\x05l7\x02\u04DC\u04DD\x07u\x02\x02\u04DD\u04DE" +
		"\x05\x8EH\x02\u04DE\u04DF\x07\xAA\x02\x02\u04DF\u04EA\x03\x02\x02\x02" +
		"\u04E0\u04E2\x07u\x02\x02\u04E1\u04E3\x05\x8EH\x02\u04E2\u04E1\x03\x02" +
		"\x02\x02\u04E2\u04E3\x03\x02\x02\x02\u04E3\u04E4\x03\x02\x02\x02\u04E4" +
		"\u04E6\x07B\x02\x02\u04E5\u04E7\x05\x8EH\x02\u04E6\u04E5\x03\x02\x02\x02" +
		"\u04E6\u04E7\x03\x02\x02\x02\u04E7\u04E8\x03\x02\x02\x02\u04E8\u04EA\x07" +
		"\xAA\x02\x02\u04E9\u04DA\x03\x02\x02\x02\u04E9\u04DB\x03\x02\x02\x02\u04E9" +
		"\u04DC\x03\x02\x02\x02\u04E9\u04E0\x03\x02\x02\x02\u04EA\xA9\x03\x02\x02" +
		"\x02\u04EB\u04EC\x07A\x02\x02\u04EC\u04ED\x05\xDAn\x02\u04ED\xAB\x03\x02" +
		"\x02\x02\u04EE\u04F0\x05\xAEX\x02\u04EF\u04F1\x05\xAAV\x02\u04F0\u04EF" +
		"\x03\x02\x02\x02\u04F1\u04F2\x03\x02\x02\x02\u04F2\u04F0\x03\x02\x02\x02" +
		"\u04F2\u04F3\x03\x02\x02\x02\u04F3\xAD\x03\x02\x02\x02\u04F4\u050E\x05" +
		"\xB0Y\x02\u04F5\u050E\x05\xDCo\x02\u04F6\u050E\x05\xB2Z\x02\u04F7\u04F8" +
		"\x07.\x02\x02\u04F8\u04F9\x07{\x02\x02\u04F9\u04FA\x07\xDA\x02\x02\u04FA" +
		"\u050E\x07\xBF\x02\x02\u04FB\u050E\x05\xCCg\x02\u04FC\u050E\x05\xCEh\x02" +
		"\u04FD\u050E\x05\xC8e\x02\u04FE\u050E\x05\xB4[\x02\u04FF\u050E\x05\xB6" +
		"\\\x02\u0500\u050E\x05\xBA^\x02\u0501\u050E\x05\xBC_\x02\u0502\u050E\x05" +
		"\xBE`\x02\u0503\u050E\x05\xC0a\x02\u0504\u050E\x05\xC2b\x02\u0505\u050E" +
		"\x05\xC4c\x02\u0506\u050E\x05\xC6d\x02\u0507\u0508\x07{\x02\x02\u0508" +
		"\u0509\x05\x8EH\x02\u0509\u050A\x07\xBF\x02\x02\u050A\u050E\x03\x02\x02" +
		"\x02\u050B\u050E\x05\xDEp\x02\u050C\u050E\x05\xE8u\x02\u050D\u04F4\x03" +
		"\x02\x02\x02\u050D\u04F5\x03\x02\x02\x02\u050D\u04F6\x03\x02\x02\x02\u050D" +
		"\u04F7\x03\x02\x02\x02\u050D\u04FB\x03\x02\x02\x02\u050D\u04FC\x03\x02" +
		"\x02\x02\u050D\u04FD\x03\x02\x02\x02\u050D\u04FE\x03\x02\x02\x02\u050D" +
		"\u04FF\x03\x02\x02\x02\u050D\u0500\x03\x02\x02\x02\u050D\u0501\x03\x02" +
		"\x02\x02\u050D\u0502\x03\x02\x02\x02\u050D\u0503\x03\x02\x02\x02\u050D" +
		"\u0504\x03\x02\x02\x02\u050D\u0505\x03\x02\x02\x02\u050D\u0506\x03\x02" +
		"\x02\x02\u050D\u0507\x03\x02\x02\x02\u050D\u050B\x03\x02\x02\x02\u050D" +
		"\u050C\x03\x02\x02\x02\u050E\xAF\x03\x02\x02\x02\u050F\u0519\x05\xD2j" +
		"\x02\u0510\u0519\x05\xD0i\x02\u0511\u0519\x05\xD8m\x02\u0512\u0519\x05" +
		"\xD6l\x02\u0513\u0519\x07\xE0\x02\x02\u0514\u0519\x07W\x02\x02\u0515\u0519" +
		"\t\x07\x02\x02\u0516\u0519\x07\x86\x02\x02\u0517\u0519\x07\x8D\x02\x02" +
		"\u0518\u050F\x03\x02\x02\x02\u0518\u0510\x03\x02\x02\x02\u0518\u0511\x03" +
		"\x02\x02\x02\u0518\u0512\x03\x02\x02\x02\u0518\u0513\x03\x02\x02\x02\u0518" +
		"\u0514\x03\x02\x02\x02\u0518\u0515\x03\x02\x02\x02\u0518\u0516\x03\x02" +
		"\x02\x02\u0518\u0517\x03\x02\x02\x02\u0519\xB1\x03\x02\x02\x02\u051A\u051F" +
		"\x07!\x02\x02\u051B\u051C\x05\x8EH\x02\u051C\u051D\x07\xED\x02\x02\u051D" +
		"\u0520\x03\x02\x02\x02\u051E\u0520\x07\xED\x02\x02\u051F\u051B\x03\x02" +
		"\x02\x02\u051F\u051E\x03\x02\x02\x02\u0520\u0521\x03\x02\x02\x02\u0521" +
		"\u0522\x05\x8EH\x02\u0522\u0523\x07\xD9\x02\x02\u0523\u052B\x05\x8EH\x02" +
		"\u0524\u0525\x07\xED\x02\x02\u0525\u0526\x05\x8EH\x02\u0526\u0527\x07" +
		"\xD9\x02\x02\u0527\u0528\x05\x8EH\x02\u0528\u052A\x03\x02\x02\x02\u0529" +
		"\u0524\x03\x02\x02\x02\u052A\u052D\x03\x02\x02\x02\u052B\u0529\x03\x02" +
		"\x02\x02\u052B\u052C\x03\x02\x02\x02\u052C\u0530\x03\x02\x02\x02\u052D" +
		"\u052B\x03\x02\x02\x02\u052E\u052F\x07K\x02\x02\u052F\u0531\x05\x8EH\x02" +
		"\u0530\u052E\x03\x02\x02\x02\u0530\u0531\x03\x02\x02\x02\u0531\u0532\x03" +
		"\x02\x02\x02\u0532\u0533\x07M\x02\x02\u0533\xB3\x03\x02\x02\x02\u0534" +
		"\u0535\x07u\x02\x02\u0535\u0536\x05\xE8u\x02\u0536\u0537\x07i\x02\x02" +
		"\u0537\u053A\x05\x8EH\x02\u0538\u0539\x07\xEE\x02\x02\u0539\u053B\x05" +
		"\x8EH\x02\u053A\u0538\x03\x02\x02\x02\u053A\u053B\x03\x02\x02\x02\u053B" +
		"\u053E\x03\x02\x02\x02\u053C\u053D\x07\x19\x02\x02\u053D\u053F\x05\x8E" +
		"H\x02\u053E\u053C\x03\x02\x02\x02\u053E\u053F\x03\x02\x02\x02\u053F\u0540" +
		"\x03\x02\x02\x02\u0540\u0541\x07\xAA\x02\x02\u0541\xB5\x03\x02\x02\x02" +
		"\u0542\u0546\x07u\x02\x02\u0543\u0544\x05\xE8u\x02\u0544\u0545\x07O\x02" +
		"\x02\u0545\u0547\x03\x02\x02\x02\u0546\u0543\x03\x02\x02\x02\u0546\u0547" +
		"\x03\x02\x02\x02\u0547\u0548\x03\x02\x02\x02\u0548\u054B\x05d3\x02\u0549" +
		"\u054A\x07\xEE\x02\x02\u054A\u054C\x05\x8EH\x02\u054B\u0549\x03\x02\x02" +
		"\x02\u054B\u054C\x03\x02\x02\x02\u054C\u054D\x03\x02\x02\x02\u054D\u054E" +
		"\x07\x19\x02\x02\u054E\u054F\x05\x8EH\x02\u054F\u0550\x07\xAA\x02\x02" +
		"\u0550\xB7\x03\x02\x02\x02\u0551\u0555\x07u\x02\x02\u0552\u0553\x05\xE8" +
		"u\x02\u0553\u0554\x07O\x02\x02\u0554\u0556\x03\x02\x02\x02\u0555\u0552" +
		"\x03\x02\x02\x02\u0555\u0556\x03\x02\x02\x02\u0556\u0557\x03\x02\x02\x02" +
		"\u0557\u0558\x05b2\x02\u0558\u0559\t\b\x02\x02\u0559\xB9\x03\x02\x02\x02" +
		"\u055A\u055B\x07\xAE\x02\x02\u055B\u055C\x07{\x02\x02\u055C\u055D\x05" +
		"\xE8u\x02\u055D\u055E\x07O\x02\x02\u055E\u055F\x05\x8EH\x02\u055F\u0560" +
		"\x07$\x02\x02\u0560\u0561\x05\xE8u\x02\u0561\u0562\x07i\x02\x02\u0562" +
		"\u0563\x05\x8EH\x02\u0563\u0564\x07\x19\x02\x02\u0564\u0565\x05\x8EH\x02" +
		"\u0565\u0566\x07\xBF\x02\x02\u0566\xBB\x03\x02\x02\x02\u0567\u0568\x07" +
		"\x10\x02\x02\u0568\u0569\x07{\x02\x02\u0569\u056A\x05\xE8u\x02\u056A\u056B" +
		"\x07i\x02\x02\u056B\u056E\x05\x8EH\x02\u056C\u056D\x07\xEE\x02\x02\u056D" +
		"\u056F\x05\x8EH\x02\u056E\u056C\x03\x02\x02\x02\u056E\u056F\x03\x02\x02" +
		"\x02\u056F\u0570\x03\x02\x02\x02\u0570\u0571\x07\xBF\x02\x02\u0571\xBD" +
		"\x03\x02\x02\x02\u0572\u0573\x07\x13\x02\x02\u0573\u0574\x07{\x02\x02" +
		"\u0574\u0575\x05\xE8u\x02\u0575\u0576\x07i\x02\x02\u0576\u0579\x05\x8E" +
		"H\x02\u0577\u0578\x07\xEE\x02\x02\u0578\u057A\x05\x8EH\x02\u0579\u0577" +
		"\x03\x02\x02\x02\u0579\u057A\x03\x02\x02\x02\u057A\u057B\x03\x02\x02\x02" +
		"\u057B\u057C\x07\xBF\x02\x02\u057C\xBF\x03\x02\x02\x02\u057D\u057E\x07" +
		"\x8A\x02\x02\u057E\u057F\x07{\x02\x02\u057F\u0580\x05\xE8u\x02\u0580\u0581" +
		"\x07i\x02\x02\u0581\u0584\x05\x8EH\x02\u0582\u0583\x07\xEE\x02\x02\u0583" +
		"\u0585\x05\x8EH\x02\u0584\u0582\x03\x02\x02\x02\u0584\u0585\x03\x02\x02" +
		"\x02\u0585\u0586\x03\x02\x02\x02\u0586\u0587\x07\xBF\x02\x02\u0587\xC1" +
		"\x03\x02\x02\x02\u0588\u0589\x07\xCF\x02\x02\u0589\u058A\x07{\x02\x02" +
		"\u058A\u058B\x05\xE8u\x02\u058B\u058C\x07i\x02\x02\u058C\u058F\x05\x8E" +
		"H\x02\u058D\u058E\x07\xEE\x02\x02\u058E\u0590\x05\x8EH\x02\u058F\u058D" +
		"\x03\x02\x02\x02\u058F\u0590\x03\x02\x02\x02\u0590\u0591\x03\x02\x02\x02" +
		"\u0591\u0592\x07\xBF\x02\x02\u0592\xC3\x03\x02\x02\x02\u0593\u0594\x05" +
		"d3\x02\u0594\xC5\x03\x02\x02\x02\u0595\u0596\x05^0\x02\u0596\xC7\x03\x02" +
		"\x02\x02\u0597\u0598\x05\xE8u\x02\u0598\u059A\x07v\x02\x02\u0599\u059B" +
		"\x05\xCAf\x02\u059A\u0599\x03\x02\x02\x02\u059A\u059B\x03\x02\x02\x02" +
		"\u059B\u05A0\x03\x02\x02\x02\u059C\u059D\x07$\x02\x02\u059D\u059F\x05" +
		"\xCAf\x02\u059E\u059C\x03\x02\x02\x02\u059F\u05A2\x03\x02\x02\x02\u05A0" +
		"\u059E\x03\x02\x02\x02\u05A0\u05A1\x03\x02\x02\x02\u05A1\u05A3\x03\x02" +
		"\x02\x02\u05A2\u05A0\x03\x02\x02\x02\u05A3\u05A4\x07\xAB\x02\x02\u05A4" +
		"\xC9\x03\x02\x02\x02\u05A5\u05A6\x05\xDAn\x02\u05A6\u05A7\x07#\x02\x02" +
		"\u05A7\u05A8\x05\x8EH\x02\u05A8\u05AF\x03\x02\x02\x02\u05A9\u05AA\x07" +
		"A\x02\x02\u05AA\u05AF\x05\xDAn\x02\u05AB\u05AF\x05\xE8u\x02\u05AC\u05AD" +
		"\x07A\x02\x02\u05AD\u05AF\x07\xDA\x02\x02\u05AE\u05A5\x03\x02\x02\x02" +
		"\u05AE\u05A9\x03\x02\x02\x02\u05AE\u05AB\x03\x02\x02\x02\u05AE\u05AC\x03" +
		"\x02\x02\x02\u05AF\xCB\x03\x02\x02\x02\u05B0\u05B1\x07T\x02\x02\u05B1" +
		"\u05B7\x07v\x02\x02\u05B2\u05B8\x05\f\x07\x02\u05B3\u05B5\x05V,\x02\u05B4" +
		"\u05B6\x05&\x14\x02\u05B5\u05B4\x03\x02\x02\x02\u05B5\u05B6\x03\x02\x02" +
		"\x02\u05B6\u05B8\x03\x02\x02\x02\u05B7\u05B2\x03\x02\x02\x02\u05B7\u05B3" +
		"\x03\x02\x02\x02\u05B8\u05B9\x03\x02\x02\x02\u05B9\u05BA\x07\xAB\x02\x02" +
		"\u05BA\xCD\x03\x02\x02\x02\u05BB\u05BC\x07.\x02\x02\u05BC\u05C2\x07v\x02" +
		"\x02\u05BD\u05C3\x05\f\x07\x02\u05BE\u05C0\x05V,\x02\u05BF\u05C1\x05&" +
		"\x14\x02\u05C0\u05BF\x03\x02\x02\x02\u05C0\u05C1\x03\x02\x02\x02\u05C1" +
		"\u05C3\x03\x02\x02\x02\u05C2\u05BD\x03\x02\x02\x02\u05C2\u05BE\x03\x02" +
		"\x02\x02\u05C3\u05C4\x03\x02\x02\x02\u05C4\u05C5\x07\xAB\x02\x02\u05C5" +
		"\xCF\x03\x02\x02\x02\u05C6\u05C7\x05\u01D4\xEB\x02\u05C7\xD1\x03\x02\x02" +
		"\x02\u05C8\u05CA\x07\x80\x02\x02\u05C9\u05C8\x03\x02\x02\x02\u05C9\u05CA" +
		"\x03\x02\x02\x02\u05CA\u05CB\x03\x02\x02\x02\u05CB\u05CC\t\t\x02\x02\u05CC" +
		"\xD3\x03\x02\x02\x02\u05CD\u05CF\x07\x80\x02\x02\u05CE\u05CD\x03\x02\x02" +
		"\x02\u05CE\u05CF\x03\x02\x02\x02\u05CF\u05D0\x03\x02\x02\x02\u05D0\u05D1" +
		"\x07\x06\x02\x02\u05D1\xD5\x03\x02\x02\x02\u05D2\u05D4\x07u\x02\x02\u05D3" +
		"\u05D5\x05\x8EH\x02\u05D4\u05D3\x03\x02\x02\x02\u05D4\u05D5\x03\x02\x02" +
		"\x02\u05D5\u05DA\x03\x02\x02\x02\u05D6\u05D7\x07$\x02\x02\u05D7\u05D9" +
		"\x05\x8EH\x02\u05D8\u05D6\x03\x02\x02\x02\u05D9\u05DC\x03\x02\x02\x02" +
		"\u05DA\u05D8\x03\x02\x02\x02\u05DA\u05DB\x03\x02\x02\x02\u05DB\u05DD\x03" +
		"\x02\x02\x02\u05DC\u05DA\x03\x02\x02\x02\u05DD\u05DE\x07\xAA\x02\x02\u05DE" +
		"\xD7\x03\x02\x02\x02\u05DF\u05E4\x07v\x02\x02\u05E0\u05E1\x05\xDAn\x02" +
		"\u05E1\u05E2\x07#\x02\x02\u05E2\u05E3\x05\x8EH\x02\u05E3\u05E5\x03\x02" +
		"\x02\x02\u05E4\u05E0\x03\x02\x02\x02\u05E4\u05E5\x03\x02\x02\x02\u05E5" +
		"\u05ED\x03\x02\x02\x02\u05E6\u05E7\x07$\x02\x02\u05E7\u05E8\x05\xDAn\x02" +
		"\u05E8\u05E9\x07#\x02\x02\u05E9\u05EA\x05\x8EH\x02\u05EA\u05EC\x03\x02" +
		"\x02\x02\u05EB\u05E6\x03\x02\x02\x02\u05EC\u05EF\x03\x02\x02\x02\u05ED" +
		"\u05EB\x03\x02\x02\x02\u05ED\u05EE\x03\x02\x02\x02\u05EE\u05F0\x03\x02" +
		"\x02\x02\u05EF\u05ED\x03\x02\x02\x02\u05F0\u05F1\x07\xAB\x02\x02\u05F1" +
		"\xD9\x03\x02\x02\x02\u05F2\u05F3\x05\u01DE\xF0\x02\u05F3\xDB\x03\x02\x02" +
		"\x02\u05F4\u05F7\x07>\x02\x02\u05F5\u05F8\x05\xE8u\x02\u05F6\u05F8\x07" +
		"\x06\x02\x02\u05F7\u05F5\x03\x02\x02\x02\u05F7\u05F6\x03\x02\x02\x02\u05F8" +
		"\xDD\x03\x02\x02\x02\u05F9\u05FA\x05\xE0q\x02\u05FA\u05FC\x07{\x02\x02" +
		"\u05FB\u05FD\x07?\x02\x02\u05FC\u05FB\x03\x02\x02\x02\u05FC\u05FD\x03" +
		"\x02\x02\x02\u05FD\u05FF\x03\x02\x02\x02\u05FE\u0600\x05\xE2r\x02\u05FF" +
		"\u05FE\x03\x02\x02\x02\u05FF\u0600\x03\x02\x02\x02\u0600\u0605\x03\x02" +
		"\x02\x02\u0601\u0602\x07$\x02\x02\u0602\u0604\x05\xE2r\x02\u0603\u0601" +
		"\x03\x02\x02\x02\u0604\u0607\x03\x02\x02\x02\u0605\u0603\x03\x02\x02\x02" +
		"\u0605\u0606\x03\x02\x02\x02\u0606\u0608\x03\x02\x02\x02\u0607\u0605\x03" +
		"\x02\x02\x02\u0608\u0609\x07\xBF\x02\x02\u0609\xDF\x03\x02\x02\x02\u060A" +
		"\u060B\x05\xE4s\x02\u060B\u060C\x05\u01DE\xF0\x02\u060C\xE1\x03\x02\x02" +
		"\x02\u060D\u060E\x05\x8EH\x02\u060E\xE3\x03\x02\x02\x02\u060F\u0610\x05" +
		"\u01DE\xF0\x02\u0610\u0611\x07A\x02\x02\u0611\u0613\x03\x02\x02\x02\u0612" +
		"\u060F\x03\x02\x02\x02\u0613\u0616\x03\x02\x02\x02\u0614\u0612\x03\x02" +
		"\x02\x02\u0614\u0615\x03\x02\x02\x02\u0615\xE5\x03\x02\x02\x02\u0616\u0614" +
		"\x03\x02\x02\x02\u0617\u061C\x05\u01DE\xF0\x02\u0618\u0619\x07$\x02\x02" +
		"\u0619\u061B\x05\u01DE\xF0\x02\u061A\u0618\x03\x02\x02\x02\u061B\u061E" +
		"\x03\x02\x02\x02\u061C\u061A\x03\x02\x02\x02\u061C\u061D\x03\x02\x02\x02" +
		"\u061D\xE7\x03\x02\x02\x02\u061E\u061C\x03\x02\x02\x02\u061F\u0620\x05" +
		"\u01DE\xF0\x02\u0620\xE9\x03\x02\x02\x02\u0621\u0626\x05\u01DE\xF0\x02" +
		"\u0622\u0623\x07$\x02\x02\u0623\u0625\x05\u01DE\xF0\x02\u0624\u0622\x03" +
		"\x02\x02\x02\u0625\u0628\x03\x02\x02\x02\u0626\u0624\x03\x02\x02\x02\u0626" +
		"\u0627\x03\x02\x02\x02\u0627\xEB\x03\x02\x02\x02\u0628\u0626\x03\x02\x02" +
		"\x02\u0629\u062C\x07/\x02\x02\u062A\u062B\x07\x94\x02\x02\u062B\u062D" +
		"\x07\xB5\x02\x02\u062C\u062A\x03\x02\x02\x02\u062C\u062D\x03\x02\x02\x02" +
		"\u062D\u0635\x03\x02\x02\x02\u062E\u0636\x05\u0148\xA5\x02\u062F\u0636" +
		"\x05\u0154\xAB\x02\u0630\u0636\x05\u01A4\xD3\x02\u0631\u0636\x05\u0120" +
		"\x91\x02\u0632\u0636\x05\u0124\x93\x02\u0633\u0636\x05\u01BA\xDE\x02\u0634" +
		"\u0636\x05\u01A8\xD5\x02\u0635\u062E\x03\x02\x02\x02\u0635\u062F\x03\x02" +
		"\x02\x02\u0635\u0630\x03\x02\x02\x02\u0635\u0631\x03\x02\x02\x02\u0635" +
		"\u0632\x03\x02\x02\x02\u0635\u0633\x03\x02\x02\x02\u0635\u0634\x03\x02" +
		"\x02\x02\u0636\xED\x03\x02\x02\x02\u0637\u063B\x05\xF0y\x02\u0638\u063B" +
		"\x05\xF6|\x02\u0639\u063B\x05\xF8}\x02\u063A\u0637\x03\x02\x02\x02\u063A" +
		"\u0638\x03\x02\x02\x02\u063A\u0639\x03\x02\x02\x02\u063B\xEF\x03\x02\x02" +
		"\x02\u063C\u0647\x05\xF2z\x02\u063D\u0647\x05\xF4{\x02\u063E\u0647\x05" +
		"\u0132\x9A\x02\u063F\u0647\x05\u017A\xBE\x02\u0640\u0647\x05\u0136\x9C" +
		"\x02\u0641\u0647\x05\u0134\x9B\x02\u0642\u0647\x05\u01AE\xD8\x02\u0643" +
		"\u0647\x05\u01B0\xD9\x02\u0644\u0647\x05\u0138\x9D\x02\u0645\u0647\x05" +
		"\u0142\xA2\x02\u0646\u063C\x03\x02\x02\x02\u0646\u063D\x03\x02\x02\x02" +
		"\u0646\u063E\x03\x02\x02\x02\u0646\u063F\x03\x02\x02\x02\u0646\u0640\x03" +
		"\x02\x02\x02\u0646\u0641\x03\x02\x02\x02\u0646\u0642\x03\x02\x02\x02\u0646" +
		"\u0643\x03\x02\x02\x02\u0646\u0644\x03\x02\x02\x02\u0646\u0645\x03\x02" +
		"\x02\x02\u0647\xF1\x03\x02\x02\x02\u0648\u0650\x07D\x02\x02\u0649\u0651" +
		"\x05\u014A\xA6\x02\u064A\u0651\x05\u0156\xAC\x02\u064B\u0651\x05\u01AA" +
		"\xD6\x02\u064C\u0651\x05\u0122\x92\x02\u064D\u0651\x05\u012E\x98\x02\u064E" +
		"\u0651\x05\u01BC\xDF\x02\u064F\u0651\x05\u013E\xA0\x02\u0650\u0649\x03" +
		"\x02\x02\x02\u0650\u064A\x03\x02\x02\x02\u0650\u064B\x03\x02\x02\x02\u0650" +
		"\u064C\x03\x02\x02\x02\u0650\u064D\x03\x02\x02\x02\u0650\u064E\x03\x02" +
		"\x02\x02\u0650\u064F\x03\x02\x02\x02\u0651\xF3\x03\x02\x02\x02\u0652\u0658" +
		"\x07\x11\x02\x02\u0653\u0659\x05\u01AC\xD7\x02\u0654\u0659\x05\u01BE\xE0" +
		"\x02\u0655\u0659\x05\u015A\xAE\x02\u0656\u0659\x05\u015C\xAF\x02\u0657" +
		"\u0659\x05\u013A\x9E\x02\u0658\u0653\x03\x02\x02\x02\u0658\u0654\x03\x02" +
		"\x02\x02\u0658\u0655\x03\x02\x02\x02\u0658\u0656\x03\x02\x02\x02\u0658" +
		"\u0657\x03\x02\x02\x02\u0659\xF5\x03\x02\x02\x02\u065A\u069D\x07\xCE\x02" +
		"\x02\u065B\u065C\x07\x10\x02\x02\u065C\u069E\x05\xFA~\x02\u065D\u065E" +
		"\x07\x9E\x02\x02\u065E\u065F\t\n\x02\x02\u065F\u069E\x05\u014E\xA8\x02" +
		"\u0660\u0661\x07\x1D\x02\x02\u0661\u069E\x05\u0108\x85\x02\u0662\u0663" +
		"\x07\xA9\x02\x02\u0663\u069E\x05\u010A\x86\x02\u0664\u0665\x07\\\x02\x02" +
		"\u0665\u069E\x05\u010A\x86\x02\u0666\u0667\x07\xD8\x02\x02\u0667\u069E" +
		"\x05\u010A\x86\x02\u0668\u0669\x07\x9D\x02\x02\u0669\u069E\x05\u010A\x86" +
		"\x02\u066A\u066B\x07z\x02\x02\u066B\u069E\x05\u010A\x86\x02\u066C\u066D" +
		"\x07\xE4\x02\x02\u066D\u069E\x05\u010C\x87\x02\u066E\u066F\x07\xE5\x02" +
		"\x02\u066F\u069E\x05\u0110\x89\x02\u0670\u0671\x07p\x02\x02\u0671\u069E" +
		"\x05\u0110\x89\x02\u0672\u0673\x07\x88\x02\x02\u0673\u069E\x05\xFC\x7F" +
		"\x02\u0674\u0675\x07\xA7\x02\x02\u0675\u069E\x05\u0102\x82\x02\u0676\u0677" +
		"\x07S\x02\x02\u0677\u069E\x05\u0110\x89\x02\u0678\u0679\x07T\x02\x02\u0679" +
		"\u069E\x05\u010E\x88\x02\u067A\u067B\x07R\x02\x02\u067B\u069E\x05\u010C" +
		"\x87\x02\u067C\u067D\x07\xB2\x02\x02\u067D\u069E\x05\xFE\x80\x02\u067E" +
		"\u067F\x07\xB1\x02\x02\u067F\u069E\x05\u0100\x81\x02\u0680\u0681\x07\x1E" +
		"\x02\x02\u0681\u0682\x07i\x02\x02\u0682\u069E\x05\u0114\x8B\x02\u0683" +
		"\u069E\x05\u0108\x85\x02\u0684\u069E\x05\u01B4\xDB\x02\u0685\u069E\x05" +
		"\u016A\xB6\x02\u0686\u069E\x05\u010C\x87\x02\u0687\u069E\x05\u0112\x8A" +
		"\x02\u0688\u069E\x05\u011E\x90\x02\u0689\u069E\x05\u0114\x8B\x02\u068A" +
		"\u069E\x05\u0116\x8C\x02\u068B\u069E\x05\u01C0\xE1\x02\u068C\u069E\x05" +
		"\u0140\xA1\x02\u068D\u069E\x05\u016C\xB7\x02\u068E\u0692\t\n\x02\x02\u068F" +
		"\u0693\x05\u016E\xB8\x02\u0690\u0693\x05\u014E\xA8\x02\u0691\u0693\x05" +
		"\u016E\xB8\x02\u0692\u068F\x03\x02\x02\x02\u0692\u0690\x03\x02\x02\x02" +
		"\u0692\u0691\x03\x02\x02\x02\u0693\u069E\x03\x02\x02\x02\u0694\u0695\x07" +
		"\xE8\x02\x02\u0695\u0696\x078\x02\x02\u0696\u069E\x05\u0114\x8B\x02\u0697" +
		"\u069B\t\v\x02\x02\u0698\u069C\x05\u0170\xB9\x02\u0699\u069C\x05\u0168" +
		"\xB5\x02\u069A\u069C\x05\u0170\xB9\x02\u069B\u0698\x03\x02\x02\x02\u069B" +
		"\u0699\x03\x02\x02\x02\u069B\u069A\x03\x02\x02\x02\u069C\u069E\x03\x02" +
		"\x02\x02\u069D\u065B\x03\x02\x02\x02\u069D\u065D\x03\x02\x02\x02\u069D" +
		"\u0660\x03\x02\x02\x02\u069D\u0662\x03\x02\x02\x02\u069D\u0664\x03\x02" +
		"\x02\x02\u069D\u0666\x03\x02\x02\x02\u069D\u0668\x03\x02\x02\x02\u069D" +
		"\u066A\x03\x02\x02\x02\u069D\u066C\x03\x02\x02\x02\u069D\u066E\x03\x02" +
		"\x02\x02\u069D\u0670\x03\x02\x02\x02\u069D\u0672\x03\x02\x02\x02\u069D" +
		"\u0674\x03\x02\x02\x02\u069D\u0676\x03\x02\x02\x02\u069D\u0678\x03\x02" +
		"\x02\x02\u069D\u067A\x03\x02\x02\x02\u069D\u067C\x03\x02\x02\x02\u069D" +
		"\u067E\x03\x02\x02\x02\u069D\u0680\x03\x02\x02\x02\u069D\u0683\x03\x02" +
		"\x02\x02\u069D\u0684\x03\x02\x02\x02\u069D\u0685\x03\x02\x02\x02\u069D" +
		"\u0686\x03\x02\x02\x02\u069D\u0687\x03\x02\x02\x02\u069D\u0688\x03\x02" +
		"\x02\x02\u069D\u0689\x03\x02\x02\x02\u069D\u068A\x03\x02\x02\x02\u069D" +
		"\u068B\x03\x02\x02\x02\u069D\u068C\x03\x02\x02\x02\u069D\u068D\x03\x02" +
		"\x02\x02\u069D\u068E\x03\x02\x02\x02\u069D\u0694\x03\x02\x02\x02\u069D" +
		"\u0697\x03\x02\x02\x02\u069E\xF7\x03\x02\x02\x02\u069F\u06A0\x07\xD7\x02" +
		"\x02\u06A0\u06A1\x05\u0118\x8D\x02\u06A1\xF9\x03\x02\x02\x02\u06A2\u06A3" +
		"\t\n\x02\x02\u06A3\u06A9\x05\u014E\xA8\x02\u06A4\u06A9\x05\u0108\x85\x02" +
		"\u06A5\u06A9\x05\u010C\x87\x02\u06A6\u06A9\x05\u0114\x8B\x02\u06A7\u06A9" +
		"\x05\u016C\xB7\x02\u06A8\u06A2\x03\x02\x02\x02\u06A8\u06A4\x03\x02\x02" +
		"\x02\u06A8\u06A5\x03\x02\x02\x02\u06A8\u06A6\x03\x02\x02\x02\u06A8\u06A7" +
		"\x03\x02\x02\x02\u06A9\xFB\x03\x02\x02\x02\u06AA\u06AB\t\f\x02\x02\u06AB" +
		"\u06B7\x05\u0110\x89\x02\u06AC\u06AD\x07p\x02\x02\u06AD\u06B7\x05\u010C" +
		"\x87\x02\u06AE\u06AF\x07\xA7\x02\x02\u06AF\u06B7\x05\u0102\x82\x02\u06B0" +
		"\u06B1\x07S\x02\x02\u06B1\u06B7\x05\u0110\x89\x02\u06B2\u06B3\x07T\x02" +
		"\x02\u06B3\u06B7\x05\u010E\x88\x02\u06B4\u06B5\x07R\x02\x02\u06B5\u06B7" +
		"\x05\u010C\x87\x02\u06B6\u06AA\x03\x02\x02\x02\u06B6\u06AC\x03\x02\x02" +
		"\x02\u06B6\u06AE\x03\x02\x02\x02\u06B6\u06B0\x03\x02\x02\x02\u06B6\u06B2" +
		"\x03\x02\x02\x02\u06B6\u06B4\x03\x02\x02\x02\u06B7\xFD\x03\x02\x02\x02" +
		"\u06B8\u06B9\t\f\x02\x02\u06B9\u06C5\x05\u0110\x89\x02\u06BA\u06BB\x07" +
		"p\x02\x02\u06BB\u06C5\x05\u0110\x89\x02\u06BC\u06BD\x07\xA7\x02\x02\u06BD" +
		"\u06C5\x05\u0102\x82\x02\u06BE\u06BF\x07S\x02\x02\u06BF\u06C5\x05\u0110" +
		"\x89\x02\u06C0\u06C1\x07T\x02\x02\u06C1\u06C5\x05\u010E\x88\x02\u06C2" +
		"\u06C3\x07R\x02\x02\u06C3\u06C5\x05\u010C\x87\x02\u06C4\u06B8\x03\x02" +
		"\x02\x02\u06C4\u06BA\x03\x02\x02\x02\u06C4\u06BC\x03\x02\x02\x02\u06C4" +
		"\u06BE\x03\x02\x02\x02\u06C4\u06C0\x03\x02\x02\x02\u06C4\u06C2\x03\x02" +
		"\x02\x02\u06C5\xFF\x03\x02\x02\x02\u06C6\u06C7\t\f\x02\x02\u06C7\u06D1" +
		"\x05\u0110\x89\x02\u06C8\u06C9\x07p\x02\x02\u06C9\u06D1\x05\u0110\x89" +
		"\x02\u06CA\u06CB\x07\xA7\x02\x02\u06CB\u06D1\x05\u0102\x82\x02\u06CC\u06CD" +
		"\x07S\x02\x02\u06CD\u06D1\x05\u0110\x89\x02\u06CE\u06CF\x07R\x02\x02\u06CF" +
		"\u06D1\x05\u0110\x89\x02\u06D0\u06C6\x03\x02\x02\x02\u06D0\u06C8\x03\x02" +
		"\x02\x02\u06D0\u06CA\x03\x02\x02\x02\u06D0\u06CC\x03\x02\x02\x02\u06D0" +
		"\u06CE\x03\x02\x02\x02\u06D1\u0101\x03\x02\x02\x02\u06D2\u06D3\t\r\x02" +
		"\x02\u06D3\u06D4\x05\u0110\x89\x02\u06D4\u0103\x03\x02\x02\x02\u06D5\u06D8" +
		"\x05\xE8u\x02\u06D6\u06D7\x07\x14\x02\x02\u06D7\u06D9\x05\xE8u\x02\u06D8" +
		"\u06D6\x03\x02\x02\x02\u06D8\u06D9\x03\x02\x02\x02\u06D9\u0105\x03\x02" +
		"\x02\x02\u06DA\u06E4\x07\xF2\x02\x02\u06DB\u06E5\x07\xDA\x02\x02\u06DC" +
		"\u06E1\x05\u0104\x83\x02\u06DD\u06DE\x07$\x02\x02\u06DE\u06E0\x05\u0104" +
		"\x83\x02\u06DF\u06DD\x03\x02\x02\x02\u06E0\u06E3\x03\x02\x02\x02\u06E1" +
		"\u06DF\x03\x02\x02\x02\u06E1\u06E2\x03\x02\x02\x02\u06E2\u06E5\x03\x02" +
		"\x02\x02\u06E3\u06E1\x03\x02\x02\x02\u06E4\u06DB\x03\x02\x02\x02\u06E4" +
		"\u06DC\x03\x02\x02\x02\u06E5\u06F0\x03\x02\x02\x02\u06E6\u06E7\x07\x95" +
		"\x02\x02\u06E7\u06E8\x07\x1F\x02\x02\u06E8\u06ED\x05 \x11\x02\u06E9\u06EA" +
		"\x07$\x02\x02\u06EA\u06EC\x05 \x11\x02\u06EB\u06E9\x03\x02\x02\x02\u06EC" +
		"\u06EF\x03\x02\x02\x02\u06ED\u06EB\x03\x02\x02\x02\u06ED\u06EE\x03\x02" +
		"\x02\x02\u06EE\u06F1\x03\x02\x02\x02\u06EF\u06ED\x03\x02\x02\x02\u06F0" +
		"\u06E6\x03\x02\x02\x02\u06F0\u06F1\x03\x02\x02\x02\u06F1\u06F4\x03\x02" +
		"\x02\x02\u06F2\u06F3\x07\xD0\x02\x02\u06F3\u06F5\x05\xD4k\x02\u06F4\u06F2" +
		"\x03\x02\x02\x02\u06F4\u06F5\x03\x02\x02\x02\u06F5\u06F8\x03\x02\x02\x02" +
		"\u06F6\u06F7\x07x\x02\x02\u06F7\u06F9\x05\xD4k\x02\u06F8\u06F6\x03\x02" +
		"\x02\x02\u06F8\u06F9\x03\x02\x02\x02\u06F9\u06FB\x03\x02\x02\x02\u06FA" +
		"\u06FC\x05&\x14\x02\u06FB\u06FA\x03\x02\x02\x02\u06FB\u06FC\x03\x02\x02" +
		"\x02\u06FC\u0107\x03\x02\x02\x02\u06FD\u0707\t\x0E\x02\x02\u06FE\u0700" +
		"\t\x0F\x02\x02\u06FF\u0701\x07\x96\x02\x02\u0700\u06FF\x03\x02\x02\x02" +
		"\u0700\u0701\x03\x02\x02\x02\u0701\u0708\x03\x02\x02\x02\u0702\u0704\x05" +
		"\u0106\x84\x02\u0703\u0705\x05\x18\r\x02\u0704\u0703\x03\x02\x02\x02\u0704" +
		"\u0705\x03\x02\x02\x02\u0705\u0708\x03\x02\x02\x02\u0706\u0708\x05&\x14" +
		"\x02\u0707\u06FE\x03\x02\x02\x02\u0707\u0702\x03\x02\x02\x02\u0707\u0706" +
		"\x03\x02\x02\x02\u0707\u0708\x03\x02\x02\x02\u0708\u0109\x03\x02\x02\x02" +
		"\u0709\u070F\t\x0E\x02\x02\u070A\u070C\x05\u0106\x84\x02\u070B\u070D\x05" +
		"\x18\r\x02\u070C\u070B\x03\x02\x02\x02\u070C\u070D\x03\x02\x02\x02\u070D" +
		"\u0710\x03\x02\x02\x02\u070E\u0710\x05&\x14\x02\u070F\u070A\x03\x02\x02" +
		"\x02\u070F\u070E\x03\x02\x02\x02\u070F\u0710\x03\x02\x02\x02\u0710\u010B" +
		"\x03\x02\x02\x02\u0711\u071B\t\x10\x02\x02\u0712\u0714\t\x0F\x02\x02\u0713" +
		"\u0715\x07\x96\x02\x02\u0714\u0713\x03\x02\x02\x02\u0714\u0715\x03\x02" +
		"\x02\x02\u0715\u071C\x03\x02\x02\x02\u0716\u0718\x05\u0106\x84\x02\u0717" +
		"\u0719\x05\x18\r\x02\u0718\u0717\x03\x02\x02\x02\u0718\u0719\x03\x02\x02" +
		"\x02\u0719\u071C\x03\x02\x02\x02\u071A\u071C\x05&\x14\x02\u071B\u0712" +
		"\x03\x02\x02\x02\u071B\u0716\x03\x02\x02\x02\u071B\u071A\x03\x02\x02\x02" +
		"\u071B\u071C\x03\x02\x02\x02\u071C\u010D\x03\x02\x02\x02\u071D\u0722\t" +
		"\x10\x02\x02\u071E\u0720\t\x0F\x02\x02\u071F\u0721\x07\x96\x02\x02\u0720" +
		"\u071F\x03\x02\x02\x02\u0720\u0721\x03\x02\x02\x02\u0721\u0723\x03\x02" +
		"\x02\x02\u0722\u071E\x03\x02\x02\x02\u0722\u0723\x03\x02\x02\x02\u0723" +
		"\u010F\x03\x02\x02\x02\u0724\u072A\t\x10\x02\x02\u0725\u0727\x05\u0106" +
		"\x84\x02\u0726\u0728\x05\x18\r\x02\u0727\u0726\x03\x02\x02\x02\u0727\u0728" +
		"\x03\x02\x02\x02\u0728\u072B\x03\x02\x02\x02\u0729\u072B\x05&\x14\x02" +
		"\u072A\u0725\x03\x02\x02\x02\u072A\u0729\x03\x02\x02\x02\u072A\u072B\x03" +
		"\x02\x02\x02\u072B\u0111\x03\x02\x02\x02\u072C\u0736\t\x11\x02\x02\u072D" +
		"\u0734\x07P\x02\x02\u072E\u0732\x07\x1F\x02\x02\u072F\u0730\x071\x02\x02" +
		"\u0730\u0733\x07\xE8\x02\x02\u0731\u0733\x05\u01DE\xF0\x02\u0732\u072F" +
		"\x03\x02\x02\x02\u0732\u0731\x03\x02\x02\x02\u0733\u0735\x03\x02\x02\x02" +
		"\u0734\u072E\x03\x02\x02\x02\u0734\u0735\x03\x02\x02\x02\u0735\u0737\x03" +
		"\x02\x02\x02\u0736\u072D\x03\x02\x02\x02\u0736\u0737\x03\x02\x02\x02\u0737" +
		"\u073D\x03\x02\x02\x02\u0738\u073A\x05\u0106\x84\x02\u0739\u073B\x05\x18" +
		"\r\x02\u073A\u0739\x03\x02\x02\x02\u073A\u073B\x03\x02\x02\x02\u073B\u073E" +
		"\x03\x02\x02\x02\u073C\u073E\x05&\x14\x02\u073D\u0738\x03\x02\x02\x02" +
		"\u073D\u073C\x03\x02\x02\x02\u073D\u073E\x03\x02\x02\x02\u073E\u0113\x03" +
		"\x02\x02\x02\u073F\u0749\t\x12\x02\x02\u0740\u0747\x07P\x02\x02\u0741" +
		"\u0745\x07\x1F\x02\x02\u0742\u0743\x071\x02\x02\u0743\u0746\x07\xE8\x02" +
		"\x02\u0744\u0746\x05\u01DE\xF0\x02\u0745\u0742\x03\x02\x02\x02\u0745\u0744" +
		"\x03\x02\x02\x02\u0746\u0748\x03\x02\x02\x02\u0747\u0741\x03\x02\x02\x02" +
		"\u0747\u0748\x03\x02\x02\x02\u0748\u074A\x03\x02\x02\x02\u0749\u0740\x03" +
		"\x02\x02\x02\u0749\u074A\x03\x02\x02\x02\u074A\u0750\x03\x02\x02\x02\u074B" +
		"\u074D\x05\u0106\x84\x02\u074C\u074E\x05\x18\r\x02\u074D\u074C\x03\x02" +
		"\x02\x02\u074D\u074E\x03\x02\x02\x02\u074E\u0751\x03\x02\x02\x02\u074F" +
		"\u0751\x05&\x14\x02\u0750\u074B\x03\x02\x02\x02\u0750\u074F\x03\x02\x02" +
		"\x02\u0750\u0751\x03\x02\x02\x02\u0751\u0115\x03\x02\x02\x02\u0752\u0767" +
		"\t\x13\x02\x02\u0753\u0768\x05\u011A\x8E\x02\u0754\u075A\x05\u011C\x8F" +
		"\x02\u0755\u0757\x05\u0106\x84\x02\u0756\u0758\x05\x18\r\x02\u0757\u0756" +
		"\x03\x02\x02\x02\u0757\u0758\x03\x02\x02\x02\u0758\u075B\x03\x02\x02\x02" +
		"\u0759\u075B\x05&\x14\x02\u075A\u0755\x03\x02\x02\x02\u075A\u0759\x03" +
		"\x02\x02\x02\u075B\u0763\x03\x02\x02\x02\u075C\u075E\x05\u0106\x84\x02" +
		"\u075D\u075F\x05\x18\r\x02\u075E\u075D\x03\x02\x02\x02\u075E\u075F\x03" +
		"\x02";
	private static readonly _serializedATNSegment4: string =
		"\x02\x02\u075F\u0763\x03\x02\x02\x02\u0760\u0763\x05&\x14\x02\u0761\u0763" +
		"\x05\u011C\x8F\x02\u0762\u0754\x03\x02\x02\x02\u0762\u075C\x03\x02\x02" +
		"\x02\u0762\u0760\x03\x02\x02\x02\u0762\u0761\x03\x02\x02\x02\u0763\u0765" +
		"\x03\x02\x02\x02\u0764\u0766\x05\u011A\x8E\x02\u0765\u0764\x03\x02\x02" +
		"\x02\u0765\u0766\x03\x02\x02\x02\u0766\u0768\x03\x02\x02\x02\u0767\u0753" +
		"\x03\x02\x02\x02\u0767\u0762\x03\x02\x02\x02\u0767\u0768\x03\x02\x02\x02" +
		"\u0768\u0117\x03\x02\x02\x02\u0769\u077E\t\x13\x02\x02\u076A\u077F\x05" +
		"\u011A\x8E\x02\u076B\u0771\x05\u011C\x8F\x02\u076C\u076E\x05\u0106\x84" +
		"\x02\u076D\u076F\x05\x18\r\x02\u076E\u076D\x03\x02\x02\x02\u076E\u076F" +
		"\x03\x02\x02\x02\u076F\u0772\x03\x02\x02\x02\u0770\u0772\x05&\x14\x02" +
		"\u0771\u076C\x03\x02\x02\x02\u0771\u0770\x03\x02\x02\x02\u0772\u077A\x03" +
		"\x02\x02\x02\u0773\u0775\x05\u0106\x84\x02\u0774\u0776\x05\x18\r\x02\u0775" +
		"\u0774\x03\x02\x02\x02\u0775\u0776\x03\x02\x02\x02\u0776\u077A\x03\x02" +
		"\x02\x02\u0777\u077A\x05&\x14\x02\u0778\u077A\x05\u011C\x8F\x02\u0779" +
		"\u076B\x03\x02\x02\x02\u0779\u0773\x03\x02\x02\x02\u0779\u0777\x03\x02" +
		"\x02\x02\u0779\u0778\x03\x02\x02\x02\u077A\u077C\x03\x02\x02\x02\u077B" +
		"\u077D\x05\u011A\x8E\x02\u077C\u077B\x03\x02\x02\x02\u077C\u077D\x03\x02" +
		"\x02\x02\u077D\u077F\x03\x02\x02\x02\u077E\u076A\x03\x02\x02\x02\u077E" +
		"\u0779\x03\x02\x02\x02\u077E\u077F\x03\x02\x02\x02\u077F\u0119\x03\x02" +
		"\x02\x02\u0780\u0781\x07\xD7\x02\x02\u0781\u0785\x05\u0118\x8D\x02\u0782" +
		"\u0783\x07\xCE\x02\x02\u0783\u0785\x05\u0116\x8C\x02\u0784\u0780\x03\x02" +
		"\x02\x02\u0784\u0782\x03\x02\x02\x02\u0785\u011B\x03\x02\x02\x02\u0786" +
		"\u0789\x05\u01D2\xEA\x02\u0787\u0789\x05\x8EH\x02\u0788\u0786\x03\x02" +
		"\x02\x02\u0788\u0787\x03\x02\x02\x02\u0789\u011D\x03\x02\x02\x02\u078A" +
		"\u0799\t\x14\x02\x02\u078B\u0791\x05\u011C\x8F\x02\u078C\u078E\x05\u0106" +
		"\x84\x02\u078D\u078F\x05\x18\r\x02\u078E\u078D\x03\x02\x02\x02\u078E\u078F" +
		"\x03\x02\x02\x02\u078F\u0792\x03\x02\x02\x02\u0790\u0792\x05&\x14\x02" +
		"\u0791\u078C\x03\x02\x02\x02\u0791\u0790\x03\x02\x02\x02\u0792\u079A\x03" +
		"\x02\x02\x02\u0793\u0795\x05\u0106\x84\x02\u0794\u0796\x05\x18\r\x02\u0795" +
		"\u0794\x03\x02\x02\x02\u0795\u0796\x03\x02\x02\x02\u0796\u079A\x03\x02" +
		"\x02\x02\u0797\u079A\x05&\x14\x02\u0798\u079A\x05\u011C\x8F\x02\u0799" +
		"\u078B\x03\x02\x02\x02\u0799\u0793\x03\x02\x02\x02\u0799\u0797\x03\x02" +
		"\x02\x02\u0799\u0798\x03\x02\x02\x02\u0799\u079A\x03\x02\x02\x02\u079A" +
		"\u011F\x03\x02\x02\x02\u079B\u07AF\x07)\x02\x02\u079C\u079D\x07\x8F\x02" +
		"\x02\u079D\u07B0\x07{\x02\x02\u079E\u079F\x07Y\x02\x02\u079F\u07B0\x07" +
		"{\x02\x02\u07A0\u07A1\x07f\x02\x02\u07A1\u07A2\x07\x8B\x02\x02\u07A2\u07A3" +
		"\x07T\x02\x02\u07A3\u07A4\t\x15\x02\x02\u07A4\u07B0\x07{\x02\x02\u07A5" +
		"\u07A7\x05\u01DE\xF0\x02\u07A6\u07A5\x03\x02\x02\x02\u07A6\u07A7\x03\x02" +
		"\x02\x02\u07A7\u07AB\x03\x02\x02\x02\u07A8\u07A9\x07f\x02\x02\u07A9\u07AA" +
		"\x07\x8B\x02\x02\u07AA\u07AC\x07T\x02\x02\u07AB\u07A8\x03\x02\x02\x02" +
		"\u07AB\u07AC\x03\x02\x02\x02\u07AC\u07AD\x03\x02\x02\x02\u07AD\u07AE\t" +
		"\x15\x02\x02\u07AE\u07B0\x07{\x02\x02\u07AF\u079C\x03\x02\x02\x02\u07AF" +
		"\u079E\x03\x02\x02\x02\u07AF\u07A0\x03\x02\x02\x02\u07AF\u07A6\x03\x02" +
		"\x02\x02\u07B0\u07C5\x03\x02\x02\x02\u07B1\u07B2\x05\xE8u\x02\u07B2\u07B3" +
		"\x05n8\x02\u07B3\u07B4\x07\xBF\x02\x02\u07B4\u07C6\x03\x02\x02\x02\u07B5" +
		"\u07B7\x07\xBF\x02\x02\u07B6\u07B8\x05v<\x02\u07B7\u07B6\x03\x02\x02\x02" +
		"\u07B7\u07B8\x03\x02\x02\x02\u07B8\u07B9\x03\x02\x02\x02\u07B9\u07BA\x05" +
		"x=\x02\u07BA\u07BB\x07u\x02\x02\u07BB\u07BC\x05\xE8u\x02\u07BC\u07BD\x05" +
		"n8\x02\u07BD\u07BE\x07\xAA\x02\x02\u07BE\u07C0\x05x=\x02\u07BF\u07C1\x05" +
		"z>\x02\u07C0\u07BF\x03\x02\x02\x02\u07C0\u07C1\x03\x02\x02\x02\u07C1\u07C2" +
		"\x03\x02\x02\x02\u07C2\u07C3\x07{\x02\x02\u07C3\u07C4\x07\xBF\x02\x02" +
		"\u07C4\u07C6\x03\x02\x02\x02\u07C5\u07B1\x03\x02\x02\x02\u07C5\u07B5\x03" +
		"\x02\x02\x02\u07C6\u07D7\x03\x02\x02\x02\u07C7\u07C8\x07\x16\x02\x02\u07C8" +
		"\u07C9\x07T\x02\x02\u07C9\u07D8\x05\u0130\x99\x02\u07CA\u07CB\t\x16\x02" +
		"\x02\u07CB\u07CC\x05\u0130\x99\x02\u07CC\u07D5\x07n\x02\x02\u07CD\u07D6" +
		"\x07\xE4\x02\x02\u07CE\u07D6\x07p\x02\x02\u07CF\u07D0\x07\x88\x02\x02" +
		"\u07D0\u07D6\t\x17\x02\x02\u07D1\u07D2\t\x18\x02\x02\u07D2\u07D6\t\x17" +
		"\x02\x02\u07D3\u07D4\x07\x8B\x02\x02\u07D4\u07D6\x07\x8D\x02\x02\u07D5" +
		"\u07CD\x03\x02\x02\x02\u07D5\u07CE\x03\x02\x02\x02\u07D5\u07CF\x03\x02" +
		"\x02\x02\u07D5\u07D1\x03\x02\x02\x02\u07D5\u07D3\x03\x02\x02\x02\u07D6" +
		"\u07D8\x03\x02\x02\x02\u07D7\u07C7\x03\x02\x02\x02\u07D7\u07CA\x03\x02" +
		"\x02\x02\u07D8\u07DB\x03\x02\x02\x02\u07D9\u07DA\x07\x92\x02\x02\u07DA" +
		"\u07DC\x05\u01D8\xED\x02\u07DB\u07D9\x03\x02\x02\x02\u07DB\u07DC\x03\x02" +
		"\x02\x02\u07DC\u0121\x03\x02\x02\x02\u07DD\u0809\x07)\x02\x02\u07DE\u07DF" +
		"\x07\x8F\x02\x02\u07DF\u07F4\x07{\x02\x02\u07E0\u07E1\x05\xE8u\x02\u07E1" +
		"\u07E2\x05n8\x02\u07E2\u07E3\x07\xBF\x02\x02\u07E3\u07F5\x03\x02\x02\x02" +
		"\u07E4\u07E6\x07\xBF\x02\x02\u07E5\u07E7\x05v<\x02\u07E6\u07E5\x03\x02" +
		"\x02\x02\u07E6\u07E7\x03\x02\x02\x02\u07E7\u07E8\x03\x02\x02\x02\u07E8" +
		"\u07E9\x05x=\x02\u07E9\u07EA\x07u\x02\x02\u07EA\u07EB\x05\xE8u\x02\u07EB" +
		"\u07EC\x05n8\x02\u07EC\u07ED\x07\xAA\x02\x02\u07ED\u07EF\x05x=\x02\u07EE" +
		"\u07F0\x05z>\x02\u07EF\u07EE\x03\x02\x02\x02\u07EF\u07F0\x03\x02\x02\x02" +
		"\u07F0\u07F1\x03\x02\x02\x02\u07F1\u07F2\x07{\x02\x02\u07F2\u07F3\x07" +
		"\xBF\x02\x02\u07F3\u07F5\x03\x02\x02\x02\u07F4\u07E0\x03\x02\x02\x02\u07F4" +
		"\u07E4\x03\x02\x02\x02\u07F5\u07F6\x03\x02\x02\x02\u07F6\u0802\x07\x16" +
		"\x02\x02\u07F7\u07F8\x07T\x02\x02\u07F8\u0803\x05\u0130\x99\x02\u07F9" +
		"\u07FA\x05\u0130\x99\x02\u07FA\u0800\x07n\x02\x02\u07FB\u0801\x07\xE4" +
		"\x02\x02\u07FC\u07FD\x07\x88\x02\x02\u07FD\u0801\x07p\x02\x02\u07FE\u07FF" +
		"\x07\x8B\x02\x02\u07FF\u0801\x07\x8D\x02\x02\u0800\u07FB\x03\x02\x02\x02" +
		"\u0800\u07FC\x03\x02\x02\x02\u0800\u07FE\x03\x02\x02\x02\u0801\u0803\x03" +
		"\x02\x02\x02\u0802\u07F7\x03\x02\x02\x02\u0802\u07F9\x03\x02\x02\x02\u0803" +
		"\u080A\x03\x02\x02\x02\u0804\u0807\x05\u01DE\xF0\x02\u0805\u0806\x07f" +
		"\x02\x02\u0806\u0808\x07T\x02\x02\u0807\u0805\x03\x02\x02\x02\u0807\u0808" +
		"\x03\x02\x02\x02\u0808\u080A\x03\x02\x02\x02\u0809\u07DE\x03\x02\x02\x02" +
		"\u0809\u0804\x03\x02\x02\x02\u080A\u0123\x03\x02\x02\x02\u080B\u080C\x07" +
		"\x1D\x02\x02\u080C\u080D\x07j\x02\x02\u080D\u0824\x05\u0128\x95\x02\u080E" +
		"\u080F\x07\xA9\x02\x02\u080F\u0810\x07j\x02\x02\u0810\u0824\x05\u0128" +
		"\x95\x02\u0811\u0812\x07\\\x02\x02\u0812\u0813\x07j\x02\x02\u0813\u0824" +
		"\x05\u012A\x96\x02\u0814\u0815\x07\xD8\x02\x02\u0815\u0816\x07j\x02\x02" +
		"\u0816\u0824\x05\u0128\x95\x02\u0817\u0818\x07\x9D\x02\x02\u0818\u0819" +
		"\x07j\x02\x02\u0819\u0824\x05\u0128\x95\x02\u081A\u081B\x07z\x02\x02\u081B" +
		"\u081C\x07j\x02\x02\u081C\u0824\x05\u012C\x97\x02\u081D\u0821\x07j\x02" +
		"\x02\u081E\u081F\x07\x8F\x02\x02\u081F\u0822\x05\u0126\x94\x02\u0820\u0822" +
		"\x05\u0128\x95\x02\u0821\u081E\x03\x02\x02\x02\u0821\u0820\x03\x02\x02" +
		"\x02\u0822\u0824\x03\x02\x02\x02\u0823\u080B\x03\x02\x02\x02\u0823\u080E" +
		"\x03\x02\x02\x02\u0823\u0811\x03\x02\x02\x02\u0823\u0814\x03\x02\x02\x02" +
		"\u0823\u0817\x03\x02\x02\x02\u0823\u081A\x03\x02\x02\x02\u0823\u081D\x03" +
		"\x02\x02\x02\u0824\u0125\x03\x02\x02\x02\u0825\u0826\x05n8\x02\u0826\u0827" +
		"\x07{\x02\x02\u0827\u0828\x05\u01DC\xEF\x02\u0828\u0829\x07\xBF\x02\x02" +
		"\u0829\u0127\x03\x02\x02\x02\u082A\u082B\x07Y\x02\x02\u082B\u083B\x07" +
		"{\x02\x02\u082C\u082D\x07f\x02\x02\u082D\u082E\x07\x8B\x02\x02\u082E\u082F" +
		"\x07T\x02\x02\u082F\u0830\x07Y\x02\x02\u0830\u083B\x07{\x02\x02\u0831" +
		"\u0835\x05\u01DE\xF0\x02\u0832\u0833\x07f\x02\x02\u0833\u0834\x07\x8B" +
		"\x02\x02\u0834\u0836\x07T\x02\x02\u0835\u0832\x03\x02\x02\x02\u0835\u0836" +
		"\x03\x02\x02\x02\u0836\u0837\x03\x02\x02\x02\u0837\u0838\x07Y\x02\x02" +
		"\u0838\u0839\x07{\x02\x02\u0839\u083B\x03\x02\x02\x02\u083A\u082A\x03" +
		"\x02\x02\x02\u083A\u082C\x03\x02\x02\x02\u083A\u0831\x03\x02\x02\x02\u083B" +
		"\u0850\x03\x02\x02\x02\u083C\u083D\x05\xE8u\x02\u083D\u083E\x05n8\x02" +
		"\u083E\u083F\x07\xBF\x02\x02\u083F\u0851\x03\x02\x02\x02\u0840\u0842\x07" +
		"\xBF\x02\x02\u0841\u0843\x05v<\x02\u0842\u0841\x03\x02\x02\x02\u0842\u0843" +
		"\x03\x02\x02\x02\u0843\u0844\x03\x02\x02\x02\u0844\u0845\x05x=\x02\u0845" +
		"\u0846\x07u\x02\x02\u0846\u0847\x05\xE8u\x02\u0847\u0848\x05n8\x02\u0848" +
		"\u0849\x07\xAA\x02\x02\u0849\u084B\x05x=\x02\u084A\u084C\x05z>\x02\u084B" +
		"\u084A\x03\x02\x02\x02\u084B\u084C\x03\x02\x02\x02\u084C\u084D\x03\x02" +
		"\x02\x02\u084D\u084E\x07{\x02\x02\u084E\u084F\x07\xBF\x02\x02\u084F\u0851" +
		"\x03\x02\x02\x02\u0850\u083C\x03\x02\x02\x02\u0850\u0840\x03\x02\x02\x02" +
		"\u0851\u0852\x03\x02\x02\x02\u0852\u0853\x07\x8F\x02\x02\u0853\u0856\x05" +
		"\u0130\x99\x02\u0854\u0855\x07\x92\x02\x02\u0855\u0857\x05\u01D8\xED\x02" +
		"\u0856\u0854\x03\x02\x02\x02\u0856\u0857\x03\x02\x02\x02\u0857\u0858\x03" +
		"\x02\x02\x02\u0858\u0859\x05\u0124\x93\x02\u0859\u0129\x03\x02\x02\x02" +
		"\u085A\u085B\x07Y\x02\x02\u085B\u086B\x07{\x02\x02\u085C\u085D\x07f\x02" +
		"\x02\u085D\u085E\x07\x8B\x02\x02\u085E\u085F\x07T\x02\x02\u085F\u0860" +
		"\x07Y\x02\x02\u0860\u086B\x07{\x02\x02\u0861\u0865\x05\u01DE\xF0\x02\u0862" +
		"\u0863\x07f\x02\x02\u0863\u0864\x07\x8B\x02\x02\u0864\u0866\x07T\x02\x02" +
		"\u0865\u0862\x03\x02\x02\x02\u0865\u0866\x03\x02\x02\x02\u0866\u0867\x03" +
		"\x02\x02\x02\u0867\u0868\x07Y\x02\x02\u0868\u0869\x07{\x02\x02\u0869\u086B" +
		"\x03\x02\x02\x02\u086A\u085A\x03\x02\x02\x02\u086A\u085C\x03\x02\x02\x02" +
		"\u086A\u0861\x03\x02\x02\x02\u086B\u0880\x03\x02\x02\x02\u086C\u086D\x05" +
		"\xE8u\x02\u086D\u086E\x05p9\x02\u086E\u086F\x07\xBF\x02\x02\u086F\u0881" +
		"\x03\x02\x02\x02\u0870\u0872\x07\xBF\x02\x02\u0871\u0873\x05v<\x02\u0872" +
		"\u0871\x03\x02\x02\x02\u0872\u0873\x03\x02\x02\x02\u0873\u0874\x03\x02" +
		"\x02\x02\u0874\u0875\x05x=\x02\u0875\u0876\x07u\x02\x02\u0876\u0877\x05" +
		"\xE8u\x02\u0877\u0878\x05p9\x02\u0878\u0879\x07\xAA\x02\x02\u0879\u087B" +
		"\x05x=\x02\u087A\u087C\x05z>\x02\u087B\u087A\x03\x02\x02\x02\u087B\u087C" +
		"\x03\x02\x02\x02\u087C\u087D\x03\x02\x02\x02\u087D\u087E\x07{\x02\x02" +
		"\u087E\u087F\x07\xBF\x02\x02\u087F\u0881\x03\x02\x02\x02\u0880\u086C\x03" +
		"\x02\x02\x02\u0880\u0870\x03\x02\x02\x02\u0881\u0882\x03\x02\x02\x02\u0882" +
		"\u0883\x07\x8F\x02\x02\u0883\u0884\x07G\x02\x02\u0884\u0885\x07u\x02\x02" +
		"\u0885\u0886\x05\xE8u\x02\u0886\u088D\x05\xAAV\x02\u0887\u0888\x07$\x02" +
		"\x02\u0888\u0889\x05\xE8u\x02\u0889\u088A\x05\xAAV\x02\u088A\u088C\x03" +
		"\x02\x02\x02\u088B\u0887\x03\x02\x02\x02\u088C\u088F\x03\x02\x02\x02\u088D" +
		"\u088B\x03\x02\x02\x02\u088D\u088E\x03\x02\x02\x02\u088E\u0890\x03\x02" +
		"\x02\x02\u088F\u088D\x03\x02\x02\x02\u0890\u0893\x07\xAA\x02\x02\u0891" +
		"\u0892\x07\x92\x02\x02\u0892\u0894\x05\u01D8\xED\x02\u0893\u0891\x03\x02" +
		"\x02\x02\u0893\u0894\x03\x02\x02\x02\u0894\u0895\x03\x02\x02\x02\u0895" +
		"\u0896\x05\u012A\x96\x02\u0896\u012B\x03\x02\x02\x02\u0897\u0898\x07Y" +
		"\x02\x02\u0898\u08A8\x07{\x02\x02\u0899\u089A\x07f\x02\x02\u089A\u089B" +
		"\x07\x8B\x02\x02\u089B\u089C\x07T\x02\x02\u089C\u089D\x07Y\x02\x02\u089D" +
		"\u08A8\x07{\x02\x02\u089E\u08A2\x05\u01DE\xF0\x02\u089F\u08A0\x07f\x02" +
		"\x02\u08A0\u08A1\x07\x8B\x02\x02\u08A1\u08A3\x07T\x02\x02\u08A2\u089F" +
		"\x03\x02\x02\x02\u08A2\u08A3\x03\x02\x02\x02\u08A3\u08A4\x03\x02\x02\x02" +
		"\u08A4\u08A5\x07Y\x02\x02\u08A5\u08A6\x07{\x02\x02\u08A6\u08A8\x03\x02" +
		"\x02\x02\u08A7\u0897\x03\x02\x02\x02\u08A7\u0899\x03\x02\x02\x02\u08A7" +
		"\u089E\x03\x02\x02\x02\u08A8\u08C0\x03\x02\x02\x02\u08A9\u08AA\x05\xE8" +
		"u\x02\u08AA\u08AB\x07\xBF\x02\x02\u08AB\u08AC\x07\x8F\x02\x02\u08AC\u08AD" +
		"\x07G\x02\x02\u08AD\u08C1\x03\x02\x02\x02\u08AE\u08B0\x07\xBF\x02\x02" +
		"\u08AF\u08B1\x05v<\x02\u08B0\u08AF\x03\x02\x02\x02\u08B0\u08B1\x03\x02" +
		"\x02\x02\u08B1\u08B2\x03\x02\x02\x02\u08B2\u08B3\x05x=\x02\u08B3\u08B4" +
		"\x07u\x02\x02\u08B4\u08B5\x05\xE8u\x02\u08B5\u08B6\x07\xAA\x02\x02\u08B6" +
		"\u08B8\x05x=\x02\u08B7\u08B9\x05z>\x02\u08B8\u08B7\x03\x02\x02\x02\u08B8" +
		"\u08B9\x03\x02\x02\x02\u08B9\u08BA\x03\x02\x02\x02\u08BA\u08BB\x07{\x02" +
		"\x02\u08BB\u08BC\x07\xBF\x02\x02\u08BC\u08BE\x07\x8F\x02\x02\u08BD\u08BF" +
		"\x07G\x02\x02\u08BE\u08BD\x03\x02\x02\x02\u08BE\u08BF\x03\x02\x02\x02" +
		"\u08BF\u08C1\x03\x02\x02\x02\u08C0\u08A9\x03\x02\x02\x02\u08C0\u08AE\x03" +
		"\x02\x02\x02\u08C1\u08C2\x03\x02\x02\x02\u08C2\u08C3\x05\u01DE\xF0\x02" +
		"\u08C3\u08C4\x07{\x02\x02\u08C4\u08C5\x05\xE8u\x02\u08C5\u08C8\x07\xBF" +
		"\x02\x02\u08C6\u08C7\x07\x92\x02\x02\u08C7\u08C9\x05\u01D8\xED\x02\u08C8" +
		"\u08C6\x03\x02\x02\x02\u08C8\u08C9\x03\x02\x02\x02\u08C9\u08CA\x03\x02" +
		"\x02\x02\u08CA\u08CB\x05\u012C\x97\x02\u08CB\u012D\x03\x02\x02\x02\u08CC" +
		"\u08D8\x07j\x02\x02\u08CD\u08CE\x07\x8F\x02\x02\u08CE\u08CF\x05n8\x02" +
		"\u08CF\u08D0\x07{\x02\x02\u08D0\u08D1\x05\u01DC\xEF\x02\u08D1\u08D2\x07" +
		"\xBF\x02\x02\u08D2\u08D9\x03\x02\x02\x02\u08D3\u08D6\x05\u01DE\xF0\x02" +
		"\u08D4\u08D5\x07f\x02\x02\u08D5\u08D7\x07T\x02\x02\u08D6\u08D4\x03\x02" +
		"\x02\x02\u08D6\u08D7\x03\x02\x02\x02\u08D7\u08D9\x03\x02\x02\x02\u08D8" +
		"\u08CD\x03\x02\x02\x02\u08D8\u08D3\x03\x02\x02\x02\u08D9\u012F\x03\x02" +
		"\x02\x02\u08DA\u08DB\x05\xE8u\x02\u08DB\u08DC\x05\xAAV\x02\u08DC\u08EC" +
		"\x03\x02\x02\x02\u08DD\u08DE\x07{\x02\x02\u08DE\u08DF\x05\xE8u\x02\u08DF" +
		"\u08E6\x05\xAAV\x02\u08E0\u08E1\x07$\x02\x02\u08E1\u08E2\x05\xE8u\x02" +
		"\u08E2\u08E3\x05\xAAV\x02\u08E3\u08E5\x03\x02\x02\x02\u08E4\u08E0\x03" +
		"\x02\x02\x02\u08E5\u08E8\x03\x02\x02\x02\u08E6\u08E4\x03\x02\x02\x02\u08E6" +
		"\u08E7\x03\x02\x02\x02\u08E7\u08E9\x03\x02\x02\x02\u08E8\u08E6\x03\x02" +
		"\x02\x02\u08E9\u08EA\x07\xBF\x02\x02\u08EA\u08EC\x03\x02\x02\x02\u08EB" +
		"\u08DA\x03\x02\x02\x02\u08EB\u08DD\x03\x02\x02\x02\u08EC\u0131\x03\x02" +
		"\x02\x02\u08ED\u08F1\x07\xAF\x02\x02\u08EE\u08F2\x05\u014C\xA7\x02\u08EF" +
		"\u08F2\x05\u0158\xAD\x02\u08F0\u08F2\x05\u013C\x9F\x02\u08F1\u08EE\x03" +
		"\x02\x02\x02\u08F1\u08EF\x03\x02\x02\x02\u08F1\u08F0\x03\x02\x02\x02\u08F2" +
		"\u0133\x03\x02\x02\x02\u08F3\u0904\x07`\x02\x02\u08F4\u08F8\x07h\x02\x02" +
		"\u08F5\u08F9\x05\u0178\xBD\x02\u08F6\u08F7\x07\xBB\x02\x02\u08F7\u08F9" +
		"\x05\u0172\xBA\x02\u08F8\u08F5\x03\x02\x02\x02\u08F8\u08F6\x03\x02\x02" +
		"\x02\u08F9\u0905\x03\x02\x02\x02\u08FA\u0903\x05\u0178\xBD\x02\u08FB\u08FE" +
		"\x07\xBB\x02\x02\u08FC\u08FF\x05\u0172\xBA\x02\u08FD\u08FF\x05\u0150\xA9" +
		"\x02\u08FE\u08FC\x03\x02\x02\x02\u08FE\u08FD\x03\x02\x02\x02\u08FF\u0903" +
		"\x03\x02\x02\x02\u0900\u0901\x07\xBC\x02\x02\u0901\u0903\x05\u0150\xA9" +
		"\x02\u0902\u08FA\x03\x02\x02\x02\u0902\u08FB\x03\x02\x02\x02\u0902\u0900" +
		"\x03\x02\x02\x02\u0903\u0905\x03\x02\x02\x02\u0904\u08F4\x03\x02\x02\x02" +
		"\u0904\u0902\x03\x02\x02\x02\u0905\u0135\x03\x02\x02\x02\u0906\u0926\x07" +
		"\xBA\x02\x02\u0907\u0909\x07:\x02\x02\u0908\u090A\x07h\x02\x02\u0909\u0908" +
		"\x03\x02\x02\x02\u0909\u090A\x03\x02\x02\x02\u090A\u090E\x03\x02\x02\x02" +
		"\u090B\u090F\x05\u017C\xBF\x02\u090C\u090D\x07\xBB\x02\x02\u090D\u090F" +
		"\x05\u0174\xBB\x02\u090E\u090B\x03\x02\x02\x02\u090E\u090C\x03\x02\x02" +
		"\x02\u090F\u0927\x03\x02\x02\x02\u0910\u0912\x07`\x02\x02\u0911\u0913" +
		"\x07h\x02\x02\u0912\u0911\x03\x02\x02\x02\u0912\u0913\x03\x02\x02\x02" +
		"\u0913\u0917\x03\x02\x02\x02\u0914\u0918\x05\u017C\xBF\x02\u0915\u0916" +
		"\x07\xBB\x02\x02\u0916\u0918\x05\u0174\xBB\x02\u0917\u0914\x03\x02\x02" +
		"\x02\u0917\u0915\x03\x02\x02\x02\u0918\u0927\x03\x02\x02\x02\u0919\u091D" +
		"\x07h\x02\x02\u091A\u091E\x05\u017C\xBF\x02\u091B\u091C\x07\xBB\x02\x02" +
		"\u091C\u091E\x05\u0174\xBB\x02\u091D\u091A\x03\x02\x02\x02\u091D\u091B" +
		"\x03\x02\x02\x02\u091E\u0927\x03\x02\x02\x02\u091F\u0925\x05\u017C\xBF" +
		"\x02\u0920\u0921\x07\xBB\x02\x02\u0921\u0925\x05\u0174\xBB\x02\u0922\u0923" +
		"\t\n\x02\x02\u0923\u0925\x05\u0152\xAA\x02\u0924\u091F\x03\x02\x02\x02" +
		"\u0924\u0920\x03\x02\x02\x02\u0924\u0922\x03\x02\x02\x02\u0925\u0927\x03" +
		"\x02\x02\x02\u0926\u0907\x03\x02\x02\x02\u0926\u0910\x03\x02\x02\x02\u0926" +
		"\u0919\x03\x02\x02\x02\u0926\u0924\x03\x02\x02\x02\u0927\u0137\x03\x02" +
		"\x02\x02\u0928\u0929\x07H\x02\x02\u0929\u092A\x07\xC8\x02\x02\u092A\u092C" +
		"\x05\u01D6\xEC\x02\u092B\u092D\x05\u01A6\xD4\x02\u092C\u092B\x03\x02\x02" +
		"\x02\u092C\u092D\x03\x02\x02\x02\u092D\u0139\x03\x02\x02\x02\u092E\u092F" +
		"\x07\xC8\x02\x02\u092F\u0930\x05\u01D6\xEC\x02\u0930\u0931\x07\xCA\x02" +
		"\x02\u0931\u0932\x05\u01A6\xD4\x02\u0932\u013B\x03\x02\x02\x02\u0933\u0934" +
		"\x07\xC8\x02\x02\u0934\u0935\x05\u01D6\xEC\x02\u0935\u0936\x07\xDB\x02" +
		"\x02\u0936\u0937\x05\u01D6\xEC\x02\u0937\u013D\x03\x02\x02\x02\u0938\u0939" +
		"\x07\xC8\x02\x02\u0939\u093A\x05\u01D6\xEC\x02\u093A\u013F\x03\x02\x02" +
		"\x02\u093B\u0941\t\x19\x02\x02\u093C\u093E\x05\u0106\x84\x02\u093D\u093F" +
		"\x05\x18\r\x02\u093E\u093D\x03\x02\x02\x02\u093E\u093F\x03\x02\x02\x02" +
		"\u093F\u0942\x03\x02\x02\x02\u0940\u0942\x05&\x14\x02\u0941\u093C\x03" +
		"\x02\x02\x02\u0941\u0940\x03\x02\x02\x02\u0941\u0942\x03\x02\x02\x02\u0942" +
		"\u0141\x03\x02\x02\x02\u0943\u0945\x07E\x02\x02\u0944\u0943\x03\x02\x02" +
		"\x02\u0944\u0945\x03\x02\x02\x02\u0945\u0948\x03\x02\x02\x02\u0946\u0949" +
		"\x05\u0144\xA3\x02\u0947\u0949\x05\u0146\xA4\x02\u0948\u0946\x03\x02\x02" +
		"\x02\u0948\u0947\x03\x02\x02\x02\u0949\u0143\x03\x02\x02\x02\u094A\u094B" +
		"\x076\x02\x02\u094B\u094C\t\x1A\x02\x02\u094C\u094D\x07[\x02\x02\u094D" +
		"\u094E\t\x19\x02\x02\u094E\u0953\x05\u01D6\xEC\x02\u094F\u0950\x07$\x02" +
		"\x02\u0950\u0952\x05\u01D6\xEC\x02\u0951\u094F\x03\x02\x02\x02\u0952\u0955" +
		"\x03\x02\x02\x02\u0953\u0951\x03\x02\x02\x02\u0953\u0954\x03\x02\x02\x02" +
		"\u0954\u0145\x03\x02\x02\x02\u0955\u0953\x03\x02\x02\x02\u0956\u0957\x07" +
		"\xAD\x02\x02\u0957\u0958\t\x1A\x02\x02\u0958\u0147\x03\x02\x02\x02\u0959" +
		"\u095A\x07\xBB\x02\x02\u095A\u095E\x05\u01C8\xE5\x02\u095B\u095C\x07f" +
		"\x02\x02\u095C\u095D\x07\x8B\x02\x02\u095D\u095F\x07T\x02\x02\u095E\u095B" +
		"\x03\x02\x02\x02\u095E\u095F\x03\x02\x02\x02\u095F\u0964\x03\x02\x02\x02" +
		"\u0960\u0961\x07\x14\x02\x02\u0961\u0962\x07,\x02\x02\u0962\u0963\x07" +
		"\x8E\x02\x02\u0963\u0965\x05\u01C8\xE5\x02\u0964\u0960\x03\x02\x02\x02" +
		"\u0964\u0965\x03\x02\x02\x02\u0965\u0149\x03\x02\x02\x02\u0966\u0967\x07" +
		"\xBB\x02\x02\u0967\u096A\x05\u01C8\xE5\x02\u0968\u0969\x07f\x02\x02\u0969" +
		"\u096B\x07T\x02\x02\u096A\u0968\x03\x02\x02\x02\u096A\u096B\x03\x02\x02" +
		"\x02\u096B\u014B\x03\x02\x02\x02\u096C\u096D\x07\xBB\x02\x02\u096D\u0970" +
		"\x05\u01C8\xE5\x02\u096E\u096F\x07f\x02\x02\u096F\u0971\x07T\x02\x02\u0970" +
		"\u096E\x03\x02\x02\x02\u0970\u0971\x03\x02\x02\x02\u0971\u0972\x03\x02" +
		"\x02\x02\u0972\u0973\x07\xDB\x02\x02\u0973\u0974\x05\u01C8\xE5\x02\u0974" +
		"\u014D\x03\x02\x02\x02\u0975\u0976\x07\xEF\x02\x02\u0976\u0978\t\v\x02" +
		"\x02\u0977\u0975\x03\x02\x02\x02\u0977\u0978\x03\x02\x02\x02\u0978\u097E" +
		"\x03\x02\x02\x02\u0979\u097B\x05\u0106\x84\x02\u097A\u097C\x05\x18\r\x02" +
		"\u097B\u097A\x03\x02\x02\x02\u097B\u097C\x03\x02\x02\x02\u097C\u097F\x03" +
		"\x02\x02\x02\u097D\u097F\x05&\x14\x02\u097E\u0979\x03\x02\x02\x02\u097E" +
		"\u097D\x03\x02\x02\x02\u097E\u097F\x03\x02\x02\x02\u097F\u014F\x03\x02" +
		"\x02\x02\u0980\u0981\x05\u01C6\xE4\x02\u0981\u0982\x07\xDB\x02\x02\u0982" +
		"\u0983\x05\u01C6\xE4\x02\u0983\u0151\x03\x02\x02\x02\u0984\u0985\x05\u01C6" +
		"\xE4\x02\u0985\u0986\x07[\x02\x02\u0986\u0987\x05\u01C6\xE4\x02\u0987" +
		"\u0153\x03\x02\x02\x02\u0988\u0989\x07\xE8\x02\x02\u0989\u098D\x05\u01C8" +
		"\xE5\x02\u098A\u098B\x07f\x02\x02\u098B\u098C\x07\x8B\x02\x02\u098C\u098E" +
		"\x07T\x02\x02\u098D\u098A\x03\x02\x02\x02\u098D\u098E\x03\x02\x02\x02" +
		"\u098E\u098F\x03\x02\x02\x02\u098F\u0991\x07\xCA\x02\x02\u0990\u0992\t" +
		"\x1B\x02\x02\u0991\u0990\x03\x02\x02\x02\u0991\u0992\x03\x02\x02\x02\u0992" +
		"\u0993\x03\x02\x02\x02\u0993\u0994\x07\x97\x02\x02\u0994\u0996\x05\u0160" +
		"\xB1\x02\u0995\u0997\x05\u0162\xB2\x02\u0996\u0995\x03\x02\x02\x02\u0996" +
		"\u0997\x03\x02\x02\x02\u0997\u09A1\x03\x02\x02\x02\u0998\u099D\x07\xCA" +
		"\x02\x02\u0999\u099A\x07\x97\x02\x02\u099A\u099E\x05\u0162\xB2\x02\u099B" +
		"\u099E\x05\u0164\xB3\x02\u099C\u099E\x05\u0166\xB4\x02\u099D\u0999\x03" +
		"\x02\x02\x02\u099D\u099B\x03\x02\x02\x02\u099D\u099C\x03\x02\x02\x02\u099E" +
		"\u09A0\x03\x02\x02\x02\u099F\u0998\x03\x02\x02\x02\u09A0\u09A3\x03\x02" +
		"\x02\x02\u09A1\u099F\x03\x02\x02\x02\u09A1\u09A2\x03\x02\x02\x02\u09A2" +
		"\u0155\x03\x02\x02\x02\u09A3\u09A1\x03\x02\x02\x02\u09A4\u09A5\x07\xE8" +
		"\x02\x02\u09A5\u09A8\x05\u01C8\xE5\x02\u09A6\u09A7\x07f\x02\x02\u09A7" +
		"\u09A9\x07T\x02\x02\u09A8\u09A6\x03\x02\x02\x02\u09A8\u09A9\x03\x02\x02" +
		"\x02\u09A9\u0157\x03\x02\x02\x02\u09AA\u09AB\x07\xE8\x02\x02\u09AB\u09AE" +
		"\x05\u01C8\xE5\x02\u09AC\u09AD\x07f\x02\x02\u09AD\u09AF\x07T\x02\x02\u09AE" +
		"\u09AC\x03\x02\x02\x02\u09AE\u09AF\x03\x02\x02\x02\u09AF\u09B0\x03\x02" +
		"\x02\x02\u09B0\u09B1\x07\xDB\x02\x02\u09B1\u09B2\x05\u01C8\xE5\x02\u09B2" +
		"\u0159\x03\x02\x02\x02\u09B3\u09B4\x071\x02\x02\u09B4\u09B5\x07\xE8\x02" +
		"\x02\u09B5\u09B6\x07\xCA\x02\x02\u09B6\u09B7\x07\x97\x02\x02\u09B7\u09B8" +
		"\x07[\x02\x02\u09B8\u09B9\x05\u0160\xB1\x02\u09B9\u09BA\x07\xDB\x02\x02" +
		"\u09BA\u09BB\x05\u0160\xB1\x02\u09BB\u015B\x03\x02\x02\x02\u09BC\u09BD" +
		"\x07\xE8\x02\x02\u09BD\u09C0\x05\u01C8\xE5\x02\u09BE\u09BF\x07f\x02\x02" +
		"\u09BF\u09C1\x07T\x02\x02\u09C0\u09BE\x03\x02\x02\x02\u09C0\u09C1\x03" +
		"\x02\x02\x02\u09C1\u09E2\x03\x02\x02\x02\u09C2\u09D9\x07\xCA\x02\x02\u09C3" +
		"\u09C4\x07\x9A\x02\x02\u09C4\u09C5\x07\x97\x02\x02\u09C5\u09C7\x05\u015E" +
		"\xB0\x02\u09C6\u09C8\x05\u0162\xB2\x02\u09C7\u09C6\x03\x02\x02\x02\u09C7" +
		"\u09C8\x03\x02\x02\x02\u09C8\u09DA\x03\x02\x02\x02\u09C9\u09CA\x07L\x02" +
		"\x02\u09CA\u09CB\x07\x97\x02\x02\u09CB\u09CD\x05\u015E\xB0\x02\u09CC\u09CE" +
		"\x05\u0162\xB2\x02\u09CD\u09CC\x03\x02\x02\x02\u09CD\u09CE\x03\x02\x02" +
		"\x02\u09CE\u09DA\x03\x02\x02\x02\u09CF\u09D5\x07\x97\x02\x02\u09D0\u09D6" +
		"\x05\u0162\xB2\x02\u09D1\u09D3\x05\u015E\xB0\x02\u09D2\u09D4\x05\u0162" +
		"\xB2\x02\u09D3\u09D2\x03\x02\x02\x02\u09D3\u09D4\x03\x02\x02\x02\u09D4" +
		"\u09D6\x03\x02\x02\x02\u09D5\u09D0\x03\x02\x02\x02\u09D5\u09D1\x03\x02" +
		"\x02\x02\u09D6\u09DA\x03\x02\x02\x02\u09D7\u09DA\x05\u0164\xB3\x02\u09D8" +
		"\u09DA\x05\u0166\xB4\x02\u09D9\u09C3\x03\x02\x02\x02\u09D9\u09C9\x03\x02" +
		"\x02\x02\u09D9\u09CF\x03\x02\x02\x02\u09D9\u09D7\x03\x02\x02\x02\u09D9" +
		"\u09D8\x03\x02\x02\x02\u09DA\u09DC\x03\x02\x02\x02\u09DB\u09C2\x03\x02" +
		"\x02\x02\u09DC\u09DD\x03\x02\x02\x02\u09DD\u09DB\x03\x02\x02\x02\u09DD" +
		"\u09DE\x03\x02\x02\x02\u09DE\u09E3\x03\x02\x02\x02\u09DF\u09E0\x07\xB4" +
		"\x02\x02\u09E0\u09E1\x07e\x02\x02\u09E1\u09E3\x073\x02\x02\u09E2\u09DB" +
		"\x03\x02\x02\x02\u09E2\u09DF\x03\x02\x02\x02\u09E3\u015D\x03\x02\x02\x02" +
		"\u09E4\u09E5\x05\u0160\xB1\x02\u09E5\u015F\x03\x02\x02\x02\u09E6\u09E9" +
		"\x05\u01D4\xEB\x02\u09E7\u09E9\x05\xDCo\x02\u09E8\u09E6\x03\x02\x02\x02" +
		"\u09E8\u09E7\x03\x02\x02\x02\u09E9\u0161\x03\x02\x02\x02\u09EA\u09EC\x07" +
		"\"\x02\x02\u09EB\u09ED\x07\x8B\x02\x02\u09EC\u09EB\x03\x02\x02\x02\u09EC" +
		"\u09ED\x03\x02\x02\x02\u09ED\u09EE\x03\x02\x02\x02\u09EE\u09EF\x07\xB8" +
		"\x02\x02\u09EF\u0163\x03\x02\x02\x02\u09F0\u09F1\x07\xD3\x02\x02\u09F1" +
		"\u09F2\t\x1C\x02\x02\u09F2\u0165\x03\x02\x02\x02\u09F3\u09F4\x07e\x02" +
		"\x02\u09F4\u09F5\x073\x02\x02\u09F5\u09F6\x05\u01C4\xE3\x02\u09F6\u0167" +
		"\x03\x02\x02\x02\u09F7\u09F9\x05\u0106\x84\x02\u09F8\u09FA\x05\x18\r\x02" +
		"\u09F9\u09F8\x03\x02\x02\x02\u09F9\u09FA\x03\x02\x02\x02\u09FA\u09FD\x03" +
		"\x02\x02\x02\u09FB\u09FD\x05&\x14\x02\u09FC\u09F7\x03\x02\x02\x02\u09FC" +
		"\u09FB\x03\x02\x02\x02\u09FC\u09FD\x03\x02\x02\x02\u09FD\u0169\x03\x02" +
		"\x02\x02\u09FE\u09FF\x071\x02\x02\u09FF\u0A05\x07\xE8\x02\x02\u0A00\u0A02" +
		"\x05\u0106\x84\x02\u0A01\u0A03\x05\x18\r\x02\u0A02\u0A01\x03\x02\x02\x02" +
		"\u0A02\u0A03\x03\x02\x02\x02\u0A03\u0A06\x03\x02\x02\x02\u0A04\u0A06\x05" +
		"&\x14\x02\u0A05\u0A00\x03\x02\x02\x02\u0A05\u0A04\x03\x02\x02\x02\u0A05" +
		"\u0A06\x03\x02\x02\x02\u0A06\u016B\x03\x02\x02\x02\u0A07\u0A0D\t\x1D\x02" +
		"\x02\u0A08\u0A0A\x07\x14\x02\x02\u0A09\u0A0B\x07\xBA\x02\x02\u0A0A\u0A09" +
		"\x03\x02\x02\x02\u0A0A\u0A0B\x03\x02\x02\x02\u0A0B\u0A0C\x03\x02\x02\x02" +
		"\u0A0C\u0A0E\t\x1E\x02\x02\u0A0D\u0A08\x03\x02\x02\x02\u0A0D\u0A0E\x03" +
		"\x02\x02\x02\u0A0E\u0A14\x03\x02\x02\x02\u0A0F\u0A11\x05\u0106\x84\x02" +
		"\u0A10\u0A12\x05\x18\r\x02\u0A11\u0A10\x03\x02\x02\x02\u0A11\u0A12\x03" +
		"\x02\x02\x02";
	private static readonly _serializedATNSegment5: string =
		"\u0A12\u0A15\x03\x02\x02\x02\u0A13\u0A15\x05&\x14\x02\u0A14\u0A0F\x03" +
		"\x02\x02\x02\u0A14\u0A13\x03\x02\x02\x02\u0A14\u0A15\x03\x02\x02\x02\u0A15" +
		"\u016D\x03\x02\x02\x02\u0A16\u0A17\x05\u01C6\xE4\x02\u0A17\u0A1D\t\x1D" +
		"\x02\x02\u0A18\u0A1A\x07\x14\x02\x02\u0A19\u0A1B\x07\xBA\x02\x02\u0A1A" +
		"\u0A19\x03\x02\x02\x02\u0A1A\u0A1B\x03\x02\x02\x02\u0A1B\u0A1C\x03\x02" +
		"\x02\x02\u0A1C\u0A1E\t\x1E\x02\x02\u0A1D\u0A18\x03\x02\x02\x02\u0A1D\u0A1E" +
		"\x03\x02\x02\x02\u0A1E\u0A24\x03\x02\x02\x02\u0A1F\u0A21\x05\u0106\x84" +
		"\x02\u0A20\u0A22\x05\x18\r\x02\u0A21\u0A20\x03\x02\x02\x02\u0A21\u0A22" +
		"\x03\x02\x02\x02\u0A22\u0A25\x03\x02\x02\x02\u0A23\u0A25\x05&\x14\x02" +
		"\u0A24\u0A1F\x03\x02\x02\x02\u0A24\u0A23\x03\x02\x02\x02\u0A24\u0A25\x03" +
		"\x02\x02\x02\u0A25\u016F\x03\x02\x02\x02\u0A26\u0A27\x05\u01C6\xE4\x02" +
		"\u0A27\u0A28\t\x1D\x02\x02\u0A28\u0A2E\x03\x02\x02\x02\u0A29\u0A2E\t\x1D" +
		"\x02\x02\u0A2A\u0A2B\x05\u01C6\xE4\x02\u0A2B\u0A2C\t\x1D\x02\x02\u0A2C" +
		"\u0A2E\x03\x02\x02\x02\u0A2D\u0A26\x03\x02\x02\x02\u0A2D\u0A29\x03\x02" +
		"\x02\x02\u0A2D\u0A2A\x03\x02\x02\x02\u0A2E\u0A34\x03\x02\x02\x02\u0A2F" +
		"\u0A31\x07\x14\x02\x02\u0A30\u0A32\x07\xBA\x02\x02\u0A31\u0A30\x03\x02" +
		"\x02\x02\u0A31\u0A32\x03\x02\x02\x02\u0A32\u0A33\x03\x02\x02\x02\u0A33" +
		"\u0A35\t\x1E\x02\x02\u0A34\u0A2F\x03\x02\x02\x02\u0A34\u0A35\x03\x02\x02" +
		"\x02\u0A35\u0A3B\x03\x02\x02\x02\u0A36\u0A38\x05\u0106\x84\x02\u0A37\u0A39" +
		"\x05\x18\r\x02\u0A38\u0A37\x03\x02\x02\x02\u0A38\u0A39\x03\x02\x02\x02" +
		"\u0A39\u0A3C\x03\x02\x02\x02\u0A3A\u0A3C\x05&\x14\x02\u0A3B\u0A36\x03" +
		"\x02\x02\x02\u0A3B\u0A3A\x03\x02\x02\x02\u0A3B\u0A3C\x03\x02\x02\x02\u0A3C" +
		"\u0171\x03\x02\x02\x02\u0A3D\u0A3E\x05\u0176\xBC\x02\u0A3E\u0A3F\x07\xDB" +
		"\x02\x02\u0A3F\u0A40\x05\u01C6\xE4\x02\u0A40\u0A41\x05\u0178\xBD\x02\u0A41" +
		"\u0173\x03\x02\x02\x02\u0A42\u0A43\x05\u0176\xBC\x02\u0A43\u0A44\x07[" +
		"\x02\x02\u0A44\u0A45\x05\u01C6\xE4\x02\u0A45\u0175\x03\x02\x02\x02\u0A46" +
		"\u0A47\x07}\x02\x02\u0A47\u0A48\x07\x8F\x02\x02\u0A48\u0A49\x075\x02\x02" +
		"\u0A49\u0A4A\x05\u0190\xC9\x02\u0A4A\u0177\x03\x02\x02\x02\u0A4B\u0A4C" +
		"\x05\u017E\xC0\x02\u0A4C\u0A4D\x07\xDB\x02\x02\u0A4D\u0A4E\x05\u01C6\xE4" +
		"\x02\u0A4E\u0A4F\x05\u0178\xBD\x02\u0A4F\u0179\x03\x02\x02\x02\u0A50\u0A52" +
		"\x07:\x02\x02\u0A51\u0A53\x07h\x02\x02\u0A52\u0A51\x03\x02\x02\x02\u0A52" +
		"\u0A53\x03\x02\x02\x02\u0A53\u0A57\x03\x02\x02\x02\u0A54\u0A58\x05\u017E" +
		"\xC0\x02\u0A55\u0A56\x07\xBB\x02\x02\u0A56\u0A58\x05\u0176\xBC\x02\u0A57" +
		"\u0A54\x03\x02\x02\x02\u0A57\u0A55\x03\x02\x02\x02\u0A58\u0A59\x03\x02" +
		"\x02\x02\u0A59\u0A5A\x07\xDB\x02\x02\u0A5A\u0A5B\x05\u01C6\xE4\x02\u0A5B" +
		"\u017B\x03\x02\x02\x02\u0A5C\u0A5D\x05\u017E\xC0\x02\u0A5D\u0A5E\x07[" +
		"\x02\x02\u0A5E\u0A5F\x05\u01C6\xE4\x02\u0A5F\u017D\x03\x02\x02\x02\u0A60" +
		"\u0A6C\x05\u0180\xC1\x02\u0A61\u0A6C\x05\u0182\xC2\x02\u0A62\u0A6C\x05" +
		"\u0184\xC3\x02\u0A63\u0A6C\x05\u0186\xC4\x02\u0A64\u0A6C\x05\u0188\xC5" +
		"\x02\u0A65\u0A6C\x05\u018A\xC6\x02\u0A66\u0A6C\x05\u018E\xC8\x02\u0A67" +
		"\u0A6C\x05\u0190\xC9\x02\u0A68\u0A6C\x05\u018C\xC7\x02\u0A69\u0A6C\x05" +
		"\u019C\xCF\x02\u0A6A\u0A6C\x05\u019A\xCE\x02\u0A6B\u0A60\x03\x02\x02\x02" +
		"\u0A6B\u0A61\x03\x02\x02\x02\u0A6B\u0A62\x03\x02\x02\x02\u0A6B\u0A63\x03" +
		"\x02\x02\x02\u0A6B\u0A64\x03\x02\x02\x02\u0A6B\u0A65\x03\x02\x02\x02\u0A6B" +
		"\u0A66\x03\x02\x02\x02\u0A6B\u0A67\x03\x02\x02\x02\u0A6B\u0A68\x03\x02" +
		"\x02\x02\u0A6B\u0A69\x03\x02\x02\x02\u0A6B\u0A6A\x03\x02\x02\x02\u0A6C" +
		"\u017F\x03\x02\x02\x02\u0A6D\u0A72\x07\x10\x02\x02\u0A6E\u0A70\t\x1F\x02" +
		"\x02\u0A6F\u0A6E\x03\x02\x02\x02\u0A6F\u0A70\x03\x02\x02\x02\u0A70\u0A71" +
		"\x03\x02\x02\x02\u0A71\u0A73\x07\xA3\x02\x02\u0A72\u0A6F\x03\x02\x02\x02" +
		"\u0A72\u0A73\x03\x02\x02\x02\u0A73\u0A74\x03\x02\x02\x02\u0A74\u0A8E\x07" +
		"\x8F\x02\x02\u0A75\u0A79\x077\x02\x02\u0A76\u0A7A\x07a\x02\x02\u0A77\u0A78" +
		"\x073\x02\x02\u0A78\u0A7A\x05\u018E\xC8\x02\u0A79\u0A76\x03\x02\x02\x02" +
		"\u0A79\u0A77\x03\x02\x02\x02\u0A7A\u0A8F\x03\x02\x02\x02\u0A7B\u0A7F\x07" +
		"e\x02\x02\u0A7C\u0A80\x07a\x02\x02\u0A7D\u0A7E\x073\x02\x02\u0A7E\u0A80" +
		"\x05\u018E\xC8\x02\u0A7F\u0A7C\x03\x02\x02\x02\u0A7F\u0A7D\x03\x02\x02" +
		"\x02\u0A80\u0A8F\x03\x02\x02\x02\u0A81\u0A82\x075\x02\x02\u0A82\u0A8F" +
		"\x05\u0190\xC9\x02\u0A83\u0A86\t \x02\x02\u0A84\u0A87\x07\xDA\x02\x02" +
		"\u0A85\u0A87\x05\u01C2\xE2\x02\u0A86\u0A84\x03\x02\x02\x02\u0A86\u0A85" +
		"\x03\x02\x02\x02\u0A87\u0A8F\x03\x02\x02\x02\u0A88\u0A8B\t\x1A\x02\x02" +
		"\u0A89\u0A8C\x07\xDA\x02\x02\u0A8A\u0A8C\x05\u01C2\xE2\x02\u0A8B\u0A89" +
		"\x03\x02\x02\x02\u0A8B\u0A8A\x03\x02\x02\x02\u0A8C\u0A8D\x03\x02\x02\x02" +
		"\u0A8D\u0A8F\x05\u018E\xC8\x02\u0A8E\u0A75\x03\x02\x02\x02\u0A8E\u0A7B" +
		"\x03\x02\x02\x02\u0A8E\u0A81\x03\x02\x02\x02\u0A8E\u0A83\x03\x02\x02\x02" +
		"\u0A8E\u0A88\x03\x02\x02\x02\u0A8F\u0181\x03\x02\x02\x02\u0A90\u0AB7\x07" +
		"/\x02\x02\u0A91\u0AA3\t\x0E\x02\x02\u0A92\u0AA3\t\x10\x02\x02\u0A93\u0AA0" +
		"\x07\x87\x02\x02\u0A94\u0A96\x07\x88\x02\x02\u0A95\u0A94\x03\x02\x02\x02" +
		"\u0A95\u0A96\x03\x02\x02\x02\u0A96\u0A97\x03\x02\x02\x02\u0A97\u0AA1\t" +
		"!\x02\x02\u0A98\u0A9A\x07\xB2\x02\x02\u0A99\u0A98\x03\x02\x02\x02\u0A99" +
		"\u0A9A\x03\x02\x02\x02\u0A9A\u0A9B\x03\x02\x02\x02\u0A9B\u0AA1\t\"\x02" +
		"\x02\u0A9C\u0A9E\x07\xA7\x02\x02\u0A9D\u0A9C\x03\x02\x02\x02\u0A9D\u0A9E" +
		"\x03\x02\x02\x02\u0A9E\u0A9F\x03\x02\x02\x02\u0A9F\u0AA1\t#\x02\x02\u0AA0" +
		"\u0A95\x03\x02\x02\x02\u0AA0\u0A99\x03\x02\x02\x02\u0AA0\u0A9D\x03\x02" +
		"\x02\x02\u0AA1\u0AA3\x03\x02\x02\x02\u0AA2\u0A91\x03\x02\x02\x02\u0AA2" +
		"\u0A92\x03\x02\x02\x02\u0AA2\u0A93\x03\x02\x02\x02\u0AA3\u0AA4\x03\x02" +
		"\x02\x02\u0AA4\u0AA5\x07\x8F\x02\x02\u0AA5\u0AA6\x05\u01B6\xDC\x02\u0AA6" +
		"\u0AA7\x05\u018E\xC8\x02\u0AA7\u0AB8\x03\x02\x02\x02\u0AA8\u0AAF\x073" +
		"\x02\x02\u0AA9\u0AAF\x07\r\x02\x02\u0AAA\u0AAF\x07\xBB\x02\x02\u0AAB\u0AAF" +
		"\x07\xE8\x02\x02\u0AAC\u0AAD\x07(\x02\x02\u0AAD\u0AAF\x073\x02\x02\u0AAE" +
		"\u0AA8\x03\x02\x02\x02\u0AAE\u0AA9\x03\x02\x02\x02\u0AAE\u0AAA\x03\x02" +
		"\x02\x02\u0AAE\u0AAB\x03\x02\x02\x02\u0AAE\u0AAC\x03\x02\x02\x02\u0AAF" +
		"\u0AB0\x03\x02\x02\x02\u0AB0\u0AB1\x07\x8F\x02\x02\u0AB1\u0AB2\x075\x02" +
		"\x02\u0AB2\u0AB8\x05\u0190\xC9\x02\u0AB3\u0AB4\x07\x8F\x02\x02\u0AB4\u0AB5" +
		"\x05\u01B8\xDD\x02\u0AB5\u0AB6\x05\u01A2\xD2\x02\u0AB6\u0AB8\x03\x02\x02" +
		"\x02\u0AB7\u0AA2\x03\x02\x02\x02\u0AB7\u0AAE\x03\x02\x02\x02\u0AB7\u0AB3" +
		"\x03\x02\x02\x02\u0AB8\u0183\x03\x02\x02\x02\u0AB9\u0ACD\x07D\x02\x02" +
		"\u0ABA\u0ABD\t\x0E\x02\x02\u0ABB\u0ABD\t\x10\x02\x02\u0ABC\u0ABA\x03\x02" +
		"\x02\x02\u0ABC\u0ABB\x03\x02\x02\x02\u0ABD\u0ABE\x03\x02\x02\x02\u0ABE" +
		"\u0ABF\x07\x8F\x02\x02\u0ABF\u0AC0\x05\u01B6\xDC\x02\u0AC0\u0AC1\x05\u018E" +
		"\xC8\x02\u0AC1\u0ACE\x03\x02\x02\x02\u0AC2\u0AC9\x073\x02\x02\u0AC3\u0AC9" +
		"\x07\r\x02\x02\u0AC4\u0AC9\x07\xBB\x02\x02\u0AC5\u0AC9\x07\xE8\x02\x02" +
		"\u0AC6\u0AC7\x07(\x02\x02\u0AC7\u0AC9\x073\x02\x02\u0AC8\u0AC2\x03\x02" +
		"\x02\x02\u0AC8\u0AC3\x03\x02\x02\x02\u0AC8\u0AC4\x03\x02\x02\x02\u0AC8" +
		"\u0AC5\x03\x02\x02\x02\u0AC8\u0AC6\x03\x02\x02\x02\u0AC9\u0ACA\x03\x02" +
		"\x02\x02\u0ACA\u0ACB\x07\x8F\x02\x02\u0ACB\u0ACC\x075\x02\x02\u0ACC\u0ACE" +
		"\x05\u0190\xC9\x02\u0ACD\u0ABC\x03\x02\x02\x02\u0ACD\u0AC8\x03\x02\x02" +
		"\x02\u0ACE\u0185\x03\x02\x02\x02\u0ACF\u0AED\x07\xCE\x02\x02\u0AD0\u0ADC" +
		"\t\x0E\x02\x02\u0AD1\u0ADC\t\x10\x02\x02\u0AD2\u0AD9\t\x13\x02\x02\u0AD3" +
		"\u0AD6\x07{\x02\x02\u0AD4\u0AD7\x07\xDA\x02\x02\u0AD5\u0AD7\x05\u01C6" +
		"\xE4\x02\u0AD6\u0AD4\x03\x02\x02\x02\u0AD6\u0AD5\x03\x02\x02\x02\u0AD7" +
		"\u0AD8\x03\x02\x02\x02\u0AD8\u0ADA\x07\xBF\x02\x02\u0AD9\u0AD3\x03\x02" +
		"\x02\x02\u0AD9\u0ADA\x03\x02\x02\x02\u0ADA\u0ADC\x03\x02\x02\x02\u0ADB" +
		"\u0AD0\x03\x02\x02\x02\u0ADB\u0AD1\x03\x02\x02\x02\u0ADB\u0AD2\x03\x02" +
		"\x02\x02\u0ADC\u0ADD\x03\x02\x02\x02\u0ADD\u0ADE\x07\x8F\x02\x02\u0ADE" +
		"\u0ADF\x05\u01B6\xDC\x02\u0ADF\u0AE0\x05\u018E\xC8\x02\u0AE0\u0AEE\x03" +
		"\x02\x02\x02\u0AE1\u0AE9\x07\r\x02\x02\u0AE2\u0AE9\x07\xA2\x02\x02\u0AE3" +
		"\u0AE9\x07\xBB\x02\x02\u0AE4\u0AE9\x07\xE8\x02\x02\u0AE5\u0AE9\t\x19\x02" +
		"\x02\u0AE6\u0AE7\t\x14\x02\x02\u0AE7\u0AE9\x05\u0196\xCC\x02\u0AE8\u0AE1" +
		"\x03\x02\x02\x02\u0AE8\u0AE2\x03\x02\x02\x02\u0AE8\u0AE3\x03\x02\x02\x02" +
		"\u0AE8\u0AE4\x03\x02\x02\x02\u0AE8\u0AE5\x03\x02\x02\x02\u0AE8\u0AE6\x03" +
		"\x02\x02\x02\u0AE9\u0AEA\x03\x02\x02\x02\u0AEA\u0AEB\x07\x8F\x02\x02\u0AEB" +
		"\u0AEC\x075\x02\x02\u0AEC\u0AEE\x05\u0190\xC9\x02\u0AED\u0ADB\x03\x02" +
		"\x02\x02\u0AED\u0AE8\x03\x02\x02\x02\u0AEE\u0187\x03\x02\x02\x02\u0AEF" +
		"\u0B0B\x07\xCA\x02\x02\u0AF0\u0AFA\t$\x02\x02\u0AF1\u0AF5\x07\xE8\x02" +
		"\x02\u0AF2\u0AF6\x07\xD3\x02\x02\u0AF3\u0AF4\x07e\x02\x02\u0AF4\u0AF6" +
		"\x073\x02\x02\u0AF5\u0AF2\x03\x02\x02\x02\u0AF5\u0AF3\x03\x02\x02\x02" +
		"\u0AF6\u0AFA\x03\x02\x02\x02\u0AF7\u0AF8\x073\x02\x02\u0AF8\u0AFA\x07" +
		"\t\x02\x02\u0AF9\u0AF0\x03\x02\x02\x02\u0AF9\u0AF1\x03\x02\x02\x02\u0AF9" +
		"\u0AF7\x03\x02\x02\x02\u0AFA\u0AFB\x03\x02\x02\x02\u0AFB\u0AFC\x07\x8F" +
		"\x02\x02\u0AFC\u0AFD\x075\x02\x02\u0AFD\u0B0C\x05\u0190\xC9\x02\u0AFE" +
		"\u0AFF\x07q\x02\x02\u0AFF\u0B00\x05\u019E\xD0\x02\u0B00\u0B01\x07\x8F" +
		"\x02\x02\u0B01\u0B02\x05\u01B8\xDD\x02\u0B02\u0B0A\x03\x02\x02\x02\u0B03" +
		"\u0B04\x07\xA7\x02\x02\u0B04\u0B05\x05\u01A0\xD1\x02\u0B05\u0B06\x07\x8F" +
		"\x02\x02\u0B06\u0B07\x05\u01B8\xDD\x02\u0B07\u0B08\x05\u01A2\xD2\x02\u0B08" +
		"\u0B0A\x03\x02\x02\x02\u0B09\u0AFE\x03\x02\x02\x02\u0B09\u0B03\x03\x02" +
		"\x02\x02\u0B0A\u0B0C\x03\x02\x02\x02\u0B0B\u0AF9\x03\x02\x02\x02\u0B0B" +
		"\u0B09\x03\x02\x02\x02\u0B0C\u0189\x03\x02\x02\x02\u0B0D\u0B17\x07\xB4" +
		"\x02\x02\u0B0E\u0B0F\t%\x02\x02\u0B0F\u0B10\x07\x8F\x02\x02\u0B10\u0B11" +
		"\x075\x02\x02\u0B11\u0B18\x05\u0190\xC9\x02\u0B12\u0B13\x07q\x02\x02\u0B13" +
		"\u0B14\x05\u019E\xD0\x02\u0B14\u0B15\x07\x8F\x02\x02\u0B15\u0B16\x05\u01B8" +
		"\xDD\x02\u0B16\u0B18\x03\x02\x02\x02\u0B17\u0B0E\x03\x02\x02\x02\u0B17" +
		"\u0B12\x03\x02\x02\x02\u0B18\u018B\x03\x02\x02\x02\u0B19\u0B1A\x07\xF0" +
		"\x02\x02\u0B1A\u0B1B\x07\x8F\x02\x02\u0B1B\u0B1C\x05\u01B8\xDD\x02\u0B1C" +
		"\u018D\x03\x02\x02\x02\u0B1D\u0B43\x07\t\x02\x02\u0B1E\u0B43\x07\xD1\x02" +
		"\x02\u0B1F\u0B43\x07\xD4\x02\x02\u0B20\u0B22\t\x0E\x02\x02\u0B21\u0B23" +
		"\x07}\x02\x02\u0B22\u0B21\x03\x02\x02\x02\u0B22\u0B23\x03\x02\x02\x02" +
		"\u0B23\u0B43\x03\x02\x02\x02\u0B24\u0B26\t\x10\x02\x02\u0B25\u0B27\x07" +
		"}\x02\x02\u0B26\u0B25\x03\x02\x02\x02\u0B26\u0B27\x03\x02\x02\x02\u0B27" +
		"\u0B43\x03\x02\x02\x02\u0B28\u0B2A\x07\xDD\x02\x02\u0B29\u0B2B\x07}\x02" +
		"\x02\u0B2A\u0B29\x03\x02\x02\x02\u0B2A\u0B2B\x03\x02\x02\x02\u0B2B\u0B32" +
		"\x03\x02\x02\x02\u0B2C\u0B2F\x07{\x02\x02\u0B2D\u0B30\x07\xDA\x02\x02" +
		"\u0B2E\u0B30\x05\u01C6\xE4\x02\u0B2F\u0B2D\x03\x02\x02\x02\u0B2F\u0B2E" +
		"\x03\x02\x02\x02\u0B30\u0B31\x03\x02\x02\x02\u0B31\u0B33\x07\xBF\x02\x02" +
		"\u0B32\u0B2C\x03\x02\x02\x02\u0B32\u0B33\x03\x02\x02\x02\u0B33\u0B43\x03" +
		"\x02\x02\x02\u0B34\u0B35\x07\xD7\x02\x02\u0B35\u0B3C\t\x13\x02\x02\u0B36" +
		"\u0B39\x07{\x02\x02\u0B37\u0B3A\x07\xDA\x02\x02\u0B38\u0B3A\x05\u01C6" +
		"\xE4\x02\u0B39\u0B37\x03\x02\x02\x02\u0B39\u0B38\x03\x02\x02\x02\u0B3A" +
		"\u0B3B\x03\x02\x02\x02\u0B3B\u0B3D\x07\xBF\x02\x02\u0B3C\u0B36\x03\x02" +
		"\x02\x02\u0B3C\u0B3D\x03\x02\x02\x02\u0B3D\u0B43\x03\x02\x02\x02\u0B3E" +
		"\u0B40\x07\x84\x02\x02\u0B3F\u0B41\x07}\x02\x02\u0B40\u0B3F\x03\x02\x02" +
		"\x02\u0B40\u0B41\x03\x02\x02\x02\u0B41\u0B43\x03\x02\x02\x02\u0B42\u0B1D" +
		"\x03\x02\x02\x02\u0B42\u0B1E\x03\x02\x02\x02\u0B42\u0B1F\x03\x02\x02\x02" +
		"\u0B42\u0B20\x03\x02\x02\x02\u0B42\u0B24\x03\x02\x02\x02\u0B42\u0B28\x03" +
		"\x02\x02\x02\u0B42\u0B34\x03\x02\x02\x02\u0B42\u0B3E\x03\x02\x02\x02\u0B43" +
		"\u0B44\x03\x02\x02\x02\u0B44\u0B45\x07\x8F\x02\x02\u0B45\u0B46\x05\u01B6" +
		"\xDC\x02\u0B46\u0B47\x05\u018E\xC8\x02\u0B47\u018F\x03\x02\x02\x02\u0B48" +
		"\u0B49\x07\x11\x02\x02\u0B49\u0B81\t&\x02\x02\u0B4A\u0B4B\x07\x17\x02" +
		"\x02\u0B4B\u0B81\t%\x02\x02\u0B4C\u0B4D\x07(\x02\x02\u0B4D\u0B4E\x073" +
		"\x02\x02\u0B4E\u0B81\x07}\x02\x02\u0B4F\u0B50\x073\x02\x02\u0B50\u0B81" +
		"\x07}\x02\x02\u0B51\u0B52\x07\r\x02\x02\u0B52\u0B81\x07}\x02\x02\u0B53" +
		"\u0B6D\x07Q\x02\x02\u0B54\u0B55\t\'\x02\x02\u0B55\u0B6E\x07\xA5\x02\x02" +
		"\u0B56\u0B61\x07\x1A\x02\x02\u0B57\u0B58\t\x11\x02\x02\u0B58\u0B62\x05" +
		"\u0194\xCB\x02\u0B59\u0B5B\x07\xE8\x02\x02\u0B5A\u0B5C\x078\x02\x02\u0B5B" +
		"\u0B5A\x03\x02\x02\x02\u0B5B\u0B5C\x03\x02\x02\x02\u0B5C\u0B5E\x03\x02" +
		"\x02\x02\u0B5D\u0B59\x03\x02\x02\x02\u0B5D\u0B5E\x03\x02\x02\x02\u0B5E" +
		"\u0B5F\x03\x02\x02\x02\u0B5F\u0B60\t\x12\x02\x02\u0B60\u0B62\x05\u0192" +
		"\xCA\x02\u0B61\u0B57\x03\x02\x02\x02\u0B61\u0B5D\x03\x02\x02\x02\u0B62" +
		"\u0B6E\x03\x02\x02\x02\u0B63\u0B64\t\x11\x02\x02\u0B64\u0B6E\x05\u0194" +
		"\xCB\x02\u0B65\u0B67\x07\xE8\x02\x02\u0B66\u0B68\x078\x02\x02\u0B67\u0B66" +
		"\x03\x02\x02\x02\u0B67\u0B68\x03\x02\x02\x02\u0B68\u0B6A\x03\x02\x02\x02" +
		"\u0B69\u0B65\x03\x02\x02\x02\u0B69\u0B6A\x03\x02\x02\x02\u0B6A\u0B6B\x03" +
		"\x02\x02\x02\u0B6B\u0B6C\t\x12\x02\x02\u0B6C\u0B6E\x05\u0192\xCA\x02\u0B6D" +
		"\u0B54\x03\x02\x02\x02\u0B6D\u0B56\x03\x02\x02\x02\u0B6D\u0B63\x03\x02" +
		"\x02\x02\u0B6D\u0B69\x03\x02\x02\x02\u0B6E\u0B81\x03\x02\x02\x02\u0B6F" +
		"\u0B70\x07\xA2\x02\x02\u0B70\u0B81\x07}\x02\x02\u0B71\u0B72\x07\xAF\x02" +
		"\x02\u0B72\u0B81\t(\x02\x02\u0B73\u0B74\x07\xC8\x02\x02\u0B74\u0B81\x07" +
		"}\x02\x02\u0B75\u0B76\x07\xE8\x02\x02\u0B76\u0B81\x07}\x02\x02\u0B77\u0B7E" +
		"\x07g\x02\x02\u0B78\u0B7B\x07{\x02\x02\u0B79\u0B7C\x07\xDA\x02\x02\u0B7A" +
		"\u0B7C\x05\u01C6\xE4\x02\u0B7B\u0B79\x03\x02\x02\x02\u0B7B\u0B7A\x03\x02" +
		"\x02\x02\u0B7C\u0B7D\x03\x02\x02\x02\u0B7D\u0B7F\x07\xBF\x02\x02\u0B7E" +
		"\u0B78\x03\x02\x02\x02\u0B7E\u0B7F\x03\x02\x02\x02\u0B7F\u0B81\x03\x02" +
		"\x02\x02\u0B80\u0B48\x03\x02\x02\x02\u0B80\u0B4A\x03\x02\x02\x02\u0B80" +
		"\u0B4C\x03\x02\x02\x02\u0B80\u0B4F\x03\x02\x02\x02\u0B80\u0B51\x03\x02" +
		"\x02\x02\u0B80\u0B53\x03\x02\x02\x02\u0B80\u0B6F\x03\x02\x02\x02\u0B80" +
		"\u0B71\x03\x02\x02\x02\u0B80\u0B73\x03\x02\x02\x02\u0B80\u0B75\x03\x02" +
		"\x02\x02\u0B80\u0B77\x03\x02\x02\x02\u0B81\u0B82\x03\x02\x02\x02\u0B82" +
		"\u0B83\x07\x8F\x02\x02\u0B83\u0B84\x075\x02\x02\u0B84\u0B85\x05\u0190" +
		"\xC9\x02\u0B85\u0191\x03\x02\x02\x02\u0B86\u0B87\x05\u0198\xCD\x02\u0B87" +
		"\u0193\x03\x02\x02\x02\u0B88\u0B89\x05\u0198\xCD\x02\u0B89\u0195\x03\x02" +
		"\x02\x02\u0B8A\u0B8C\x05\u0198\xCD\x02\u0B8B\u0B8A\x03\x02\x02\x02\u0B8C" +
		"\u0B8D\x03\x02\x02\x02\u0B8D\u0B8B\x03\x02\x02\x02\u0B8D\u0B8E\x03\x02" +
		"\x02\x02\u0B8E\u0197\x03\x02\x02\x02\u0B8F\u0B94\x05\u01CA\xE6\x02\u0B90" +
		"\u0B91\x07$\x02\x02\u0B91\u0B93\x05\u01CA\xE6\x02\u0B92\u0B90\x03\x02" +
		"\x02\x02\u0B93\u0B96\x03\x02\x02\x02\u0B94\u0B92\x03\x02\x02\x02\u0B94" +
		"\u0B95\x03\x02\x02\x02\u0B95\u0199\x03\x02\x02\x02\u0B96\u0B94\x03\x02" +
		"\x02\x02\u0B97\u0B9D\x07\xDF\x02\x02\u0B98\u0B99\x07\xAC\x02\x02\u0B99" +
		"\u0B9D\x05\u01A0\xD1\x02\u0B9A\u0B9B\x07~\x02\x02\u0B9B\u0B9D\x05\u01A0" +
		"\xD1\x02\u0B9C\u0B97\x03\x02\x02\x02\u0B9C\u0B98\x03\x02\x02\x02\u0B9C" +
		"\u0B9A\x03\x02\x02\x02\u0B9D\u0B9E\x03\x02\x02\x02\u0B9E\u0B9F\x07\x8F" +
		"\x02\x02\u0B9F\u0BA0\x05\u01B8\xDD\x02\u0BA0\u0BA4\x05\u01A2\xD2\x02\u0BA1" +
		"\u0BA2\x07{\x02\x02\u0BA2\u0BA3\x07\xDA\x02\x02\u0BA3\u0BA5\x07\xBF\x02" +
		"\x02\u0BA4\u0BA1\x03\x02\x02\x02\u0BA4\u0BA5\x03\x02\x02\x02\u0BA5\u019B" +
		"\x03\x02\x02\x02\u0BA6\u0BAA\x079\x02\x02\u0BA7\u0BA8\x07\x7F\x02\x02" +
		"\u0BA8\u0BAA\x05\u01A0\xD1\x02\u0BA9\u0BA6\x03\x02\x02\x02\u0BA9\u0BA7" +
		"\x03\x02\x02\x02\u0BAA\u0BAB\x03\x02\x02\x02\u0BAB\u0BAC\x07\x8F\x02\x02" +
		"\u0BAC\u0BAD\x05\u01B8\xDD\x02\u0BAD\u0BAE\x05\u01A2\xD2\x02\u0BAE\u019D" +
		"\x03\x02\x02\x02\u0BAF\u0BB2\x07\xDA\x02\x02\u0BB0\u0BB2\x05\xEAv\x02" +
		"\u0BB1\u0BAF\x03\x02\x02\x02\u0BB1\u0BB0\x03\x02\x02\x02\u0BB2\u019F\x03" +
		"\x02\x02\x02\u0BB3\u0BB6\x07v\x02\x02\u0BB4\u0BB7\x07\xDA\x02\x02\u0BB5" +
		"\u0BB7\x05\xEAv\x02\u0BB6\u0BB4\x03\x02\x02\x02\u0BB6\u0BB5\x03\x02\x02" +
		"\x02\u0BB7\u0BB8\x03\x02\x02\x02\u0BB8\u0BB9\x07\xAB\x02\x02\u0BB9\u01A1" +
		"\x03\x02\x02\x02\u0BBA\u0BC4\t)\x02\x02\u0BBB\u0BC5\x07\xDA\x02\x02\u0BBC" +
		"\u0BC1\x05\u01DE\xF0\x02\u0BBD\u0BBE\x07$\x02\x02\u0BBE\u0BC0\x05\u01DE" +
		"\xF0\x02\u0BBF\u0BBD\x03\x02\x02\x02\u0BC0\u0BC3\x03\x02\x02\x02\u0BC1" +
		"\u0BBF\x03\x02\x02\x02\u0BC1\u0BC2\x03\x02\x02\x02\u0BC2\u0BC5\x03\x02" +
		"\x02\x02\u0BC3\u0BC1\x03\x02\x02\x02\u0BC4\u0BBB\x03\x02\x02\x02\u0BC4" +
		"\u0BBC\x03\x02\x02\x02\u0BC5\u0BDF\x03\x02\x02\x02\u0BC6\u0BD0\t*\x02" +
		"\x02\u0BC7\u0BD1\x07\xDA\x02\x02\u0BC8\u0BCD\x05\u01DE\xF0\x02\u0BC9\u0BCA" +
		"\x07$\x02\x02\u0BCA\u0BCC\x05\u01DE\xF0\x02\u0BCB\u0BC9\x03\x02\x02\x02" +
		"\u0BCC\u0BCF\x03\x02\x02\x02\u0BCD\u0BCB\x03\x02\x02\x02\u0BCD\u0BCE\x03" +
		"\x02\x02\x02\u0BCE\u0BD1\x03\x02\x02\x02\u0BCF\u0BCD\x03\x02\x02\x02\u0BD0" +
		"\u0BC7\x03\x02\x02\x02\u0BD0\u0BC8\x03\x02\x02\x02\u0BD1\u0BDF\x03\x02" +
		"\x02\x02\u0BD2\u0BDC\t+\x02\x02\u0BD3\u0BDD\x07\xDA\x02\x02\u0BD4\u0BD9" +
		"\x05\u01DE\xF0\x02\u0BD5\u0BD6\x07$\x02\x02\u0BD6\u0BD8\x05\u01DE\xF0" +
		"\x02\u0BD7\u0BD5\x03\x02\x02\x02\u0BD8\u0BDB\x03\x02\x02\x02\u0BD9\u0BD7" +
		"\x03\x02\x02\x02\u0BD9\u0BDA\x03\x02\x02\x02\u0BDA\u0BDD\x03\x02\x02\x02" +
		"\u0BDB\u0BD9\x03\x02\x02\x02\u0BDC\u0BD3\x03\x02\x02\x02\u0BDC\u0BD4\x03" +
		"\x02\x02\x02\u0BDD\u0BDF\x03\x02\x02\x02\u0BDE\u0BBA\x03\x02\x02\x02\u0BDE" +
		"\u0BC6\x03\x02\x02\x02\u0BDE\u0BD2\x03\x02\x02\x02\u0BDE\u0BDF\x03\x02" +
		"\x02\x02\u0BDF\u01A3\x03\x02\x02\x02\u0BE0\u0BE1\x073\x02\x02\u0BE1\u0BE5" +
		"\x05\u01C4\xE3\x02\u0BE2\u0BE3\x07f\x02\x02\u0BE3\u0BE4\x07\x8B\x02\x02" +
		"\u0BE4\u0BE6\x07T\x02\x02\u0BE5\u0BE2\x03\x02\x02\x02\u0BE5\u0BE6\x03" +
		"\x02\x02\x02\u0BE6\u0BF1\x03\x02\x02\x02\u0BE7\u0BED\x07\xDC\x02\x02\u0BE8" +
		"\u0BEB\x07\x06\x02\x02\u0BE9\u0BEC\t,\x02\x02\u0BEA\u0BEC\t-\x02\x02\u0BEB" +
		"\u0BE9\x03\x02\x02\x02\u0BEB\u0BEA\x03\x02\x02\x02\u0BEC\u0BEE\x03\x02" +
		"\x02\x02\u0BED\u0BE8\x03\x02\x02\x02\u0BEE\u0BEF\x03\x02\x02\x02\u0BEF" +
		"\u0BED\x03\x02\x02\x02\u0BEF\u0BF0\x03\x02\x02\x02\u0BF0\u0BF2\x03\x02" +
		"\x02\x02\u0BF1\u0BE7\x03\x02\x02\x02\u0BF1\u0BF2\x03\x02\x02\x02\u0BF2" +
		"\u0BF4\x03\x02\x02\x02\u0BF3\u0BF5\x05\u01A6\xD4\x02\u0BF4\u0BF3\x03\x02" +
		"\x02\x02\u0BF4\u0BF5\x03\x02\x02\x02\u0BF5\u0BF7\x03\x02\x02\x02\u0BF6" +
		"\u0BF8\x05\u01B2\xDA\x02\u0BF7\u0BF6\x03\x02\x02\x02\u0BF7\u0BF8\x03\x02" +
		"\x02\x02\u0BF8\u01A5\x03\x02\x02\x02\u0BF9\u0BFA\x07\x92\x02\x02\u0BFA" +
		"\u0BFB\x05\u01D8\xED\x02\u0BFB\u01A7\x03\x02\x02\x02\u0BFC\u0BFD\x07(" +
		"\x02\x02\u0BFD\u0BFE\x073\x02\x02\u0BFE\u0C02\x05\u01C4\xE3\x02\u0BFF" +
		"\u0C00\x07f\x02\x02\u0C00\u0C01\x07\x8B\x02\x02\u0C01\u0C03\x07T\x02\x02" +
		"\u0C02\u0BFF\x03\x02\x02\x02\u0C02\u0C03\x03\x02\x02\x02\u0C03\u0C05\x03" +
		"\x02\x02\x02\u0C04\u0C06\x05\u01A6\xD4\x02\u0C05\u0C04\x03\x02\x02\x02" +
		"\u0C05\u0C06\x03\x02\x02\x02\u0C06\u0C08\x03\x02\x02\x02\u0C07\u0C09\x05" +
		"\u01B2\xDA\x02\u0C08\u0C07\x03\x02\x02\x02\u0C08\u0C09\x03\x02\x02\x02" +
		"\u0C09\u01A9\x03\x02\x02\x02\u0C0A\u0C0C\x07(\x02\x02\u0C0B\u0C0A\x03" +
		"\x02\x02\x02\u0C0B\u0C0C\x03\x02\x02\x02\u0C0C\u0C0D\x03\x02\x02\x02\u0C0D" +
		"\u0C0E\x073\x02\x02\u0C0E\u0C11\x05\u01C4\xE3\x02\u0C0F\u0C10\x07f\x02" +
		"\x02\u0C10\u0C12\x07T\x02\x02\u0C11\u0C0F\x03\x02\x02\x02\u0C11\u0C12" +
		"\x03\x02\x02\x02\u0C12\u0C15\x03\x02\x02\x02\u0C13\u0C14\t.\x02\x02\u0C14" +
		"\u0C16\x072\x02\x02\u0C15\u0C13\x03\x02\x02\x02\u0C15\u0C16\x03\x02\x02" +
		"\x02\u0C16\u0C18\x03\x02\x02\x02\u0C17\u0C19\x05\u01B2\xDA\x02\u0C18\u0C17" +
		"\x03\x02\x02\x02\u0C18\u0C19\x03\x02\x02\x02\u0C19\u01AB\x03\x02\x02\x02" +
		"\u0C1A\u0C1B\x073\x02\x02\u0C1B\u0C1E\x05\u01C4\xE3\x02\u0C1C\u0C1D\x07" +
		"f\x02\x02\u0C1D\u0C1F\x07T\x02\x02\u0C1E\u0C1C\x03\x02\x02\x02\u0C1E\u0C1F" +
		"\x03\x02\x02\x02\u0C1F\u0C3F\x03\x02\x02\x02\u0C20\u0C32\x07\xCA\x02\x02" +
		"\u0C21\u0C22\x07\t\x02\x02\u0C22\u0C23\x07\xAC\x02\x02\u0C23\u0C33\t/" +
		"\x02\x02\u0C24\u0C2A\x07\xDC\x02\x02\u0C25\u0C28\x07\x06\x02\x02\u0C26" +
		"\u0C29\t,\x02\x02\u0C27\u0C29\t-\x02\x02\u0C28\u0C26\x03\x02\x02\x02\u0C28" +
		"\u0C27\x03\x02\x02\x02\u0C29\u0C2B\x03\x02\x02\x02\u0C2A\u0C25\x03\x02" +
		"\x02\x02\u0C2B\u0C2C\x03\x02\x02\x02\u0C2C\u0C2A\x03\x02\x02\x02\u0C2C" +
		"\u0C2D\x03\x02\x02\x02\u0C2D\u0C33\x03\x02\x02\x02\u0C2E\u0C2F\x07\x93" +
		"\x02\x02\u0C2F\u0C30\x05\u01DE\xF0\x02\u0C30\u0C31\x05\x8EH\x02\u0C31" +
		"\u0C33\x03\x02\x02\x02\u0C32\u0C21\x03\x02\x02\x02\u0C32\u0C24\x03\x02" +
		"\x02\x02\u0C32\u0C2E\x03\x02\x02\x02\u0C33\u0C35\x03\x02\x02\x02\u0C34" +
		"\u0C20\x03\x02\x02\x02\u0C35\u0C36\x03\x02\x02\x02\u0C36\u0C34\x03\x02" +
		"\x02\x02\u0C36\u0C37\x03\x02\x02\x02\u0C37\u0C40\x03\x02\x02\x02\u0C38" +
		"\u0C39\x07\xB4\x02\x02\u0C39\u0C3A\x07\x93\x02\x02\u0C3A\u0C3C\x05\u01DE" +
		"\xF0\x02\u0C3B\u0C38\x03\x02\x02\x02\u0C3C\u0C3D\x03\x02\x02\x02\u0C3D" +
		"\u0C3B\x03\x02\x02\x02\u0C3D\u0C3E\x03\x02\x02\x02\u0C3E\u0C40\x03\x02" +
		"\x02\x02\u0C3F\u0C34\x03\x02\x02\x02\u0C3F\u0C3B\x03\x02\x02\x02\u0C40" +
		"\u01AD\x03\x02\x02\x02\u0C41\u0C42\x07\xD1\x02\x02\u0C42\u0C43\x073\x02" +
		"\x02\u0C43\u0C45\x05\u01C4\xE3\x02\u0C44\u0C46\x05\u01B2\xDA\x02\u0C45" +
		"\u0C44\x03\x02\x02\x02\u0C45\u0C46\x03\x02\x02\x02\u0C46\u01AF\x03\x02" +
		"\x02\x02\u0C47\u0C48\x07\xD4\x02\x02\u0C48\u0C49\x073\x02\x02\u0C49\u0C4B" +
		"\x05\u01C4\xE3\x02\u0C4A\u0C4C\x05\u01B2\xDA\x02\u0C4B\u0C4A\x03\x02\x02" +
		"\x02\u0C4B\u0C4C\x03\x02\x02\x02\u0C4C\u01B1\x03\x02\x02\x02\u0C4D\u0C52" +
		"\x07\xEC\x02\x02\u0C4E\u0C50\x07\x06\x02\x02\u0C4F\u0C51\t0\x02\x02\u0C50" +
		"\u0C4F\x03\x02\x02\x02\u0C50\u0C51\x03\x02\x02\x02\u0C51\u0C53\x03\x02" +
		"\x02\x02\u0C52\u0C4E\x03\x02\x02\x02\u0C52\u0C53\x03\x02\x02\x02\u0C53" +
		"\u0C56\x03\x02\x02\x02\u0C54\u0C56\x07\x8C\x02\x02\u0C55\u0C4D\x03\x02" +
		"\x02\x02\u0C55\u0C54\x03\x02\x02\x02\u0C56\u01B3\x03\x02\x02\x02\u0C57" +
		"\u0C66\t\x1A\x02\x02\u0C58\u0C5E\x05\u01C4\xE3\x02\u0C59\u0C5B\x05\u0106" +
		"\x84\x02\u0C5A\u0C5C\x05\x18\r\x02\u0C5B\u0C5A\x03\x02\x02\x02\u0C5B\u0C5C" +
		"\x03\x02\x02\x02\u0C5C\u0C5F\x03\x02\x02\x02\u0C5D\u0C5F\x05&\x14\x02" +
		"\u0C5E\u0C59\x03\x02\x02\x02\u0C5E\u0C5D\x03\x02\x02\x02\u0C5F\u0C67\x03" +
		"\x02\x02\x02\u0C60\u0C62\x05\u0106\x84\x02\u0C61\u0C63\x05\x18\r\x02\u0C62" +
		"\u0C61\x03\x02\x02\x02\u0C62\u0C63\x03\x02\x02\x02\u0C63\u0C67\x03\x02" +
		"\x02\x02\u0C64\u0C67\x05&\x14\x02\u0C65\u0C67\x05\u01C4\xE3\x02\u0C66" +
		"\u0C58\x03\x02\x02\x02\u0C66\u0C60\x03\x02\x02\x02\u0C66\u0C64\x03\x02" +
		"\x02\x02\u0C66\u0C65\x03\x02\x02\x02\u0C66\u0C67\x03\x02\x02\x02\u0C67" +
		"\u0C76\x03\x02\x02\x02\u0C68\u0C69\x077\x02\x02\u0C69\u0C6D\x073\x02\x02" +
		"\u0C6A\u0C6B\x07e\x02\x02\u0C6B\u0C6D\x073\x02\x02\u0C6C\u0C68\x03\x02" +
		"\x02\x02\u0C6C\u0C6A\x03\x02\x02\x02\u0C6D\u0C73\x03\x02\x02\x02\u0C6E" +
		"\u0C70\x05\u0106\x84\x02\u0C6F\u0C71\x05\x18\r\x02\u0C70\u0C6F\x03\x02" +
		"\x02\x02\u0C70\u0C71\x03\x02\x02\x02\u0C71\u0C74\x03\x02\x02\x02\u0C72" +
		"\u0C74\x05&\x14\x02\u0C73\u0C6E\x03\x02\x02\x02\u0C73\u0C72\x03\x02\x02" +
		"\x02\u0C73\u0C74\x03\x02\x02\x02\u0C74\u0C76\x03\x02\x02\x02\u0C75\u0C57" +
		"\x03\x02\x02\x02\u0C75\u0C6C\x03\x02\x02\x02\u0C76\u01B5\x03\x02\x02\x02" +
		"\u0C77\u0C7A\t\x1A\x02\x02\u0C78\u0C7B\x07\xDA\x02\x02\u0C79\u0C7B\x05" +
		"\u01C2\xE2\x02\u0C7A\u0C78\x03\x02\x02\x02\u0C7A\u0C79\x03\x02\x02\x02" +
		"\u0C7B\u0C81\x03\x02\x02\x02\u0C7C\u0C7D\x077\x02\x02\u0C7D\u0C81\x07" +
		"3\x02\x02\u0C7E\u0C7F\x07e\x02\x02\u0C7F\u0C81\x073\x02\x02\u0C80\u0C77" +
		"\x03\x02\x02\x02\u0C80\u0C7C\x03\x02\x02\x02\u0C80\u0C7E\x03\x02\x02\x02" +
		"\u0C81\u01B7\x03\x02\x02\x02\u0C82\u0C85\t \x02\x02\u0C83\u0C86\x07\xDA" +
		"\x02\x02\u0C84\u0C86\x05\u01C2\xE2\x02\u0C85\u0C83\x03\x02\x02\x02\u0C85" +
		"\u0C84\x03\x02\x02\x02\u0C86\u0C8C\x03\x02\x02\x02\u0C87\u0C88\x077\x02" +
		"\x02\u0C88\u0C8C\x07a\x02\x02\u0C89\u0C8A\x07e\x02\x02\u0C8A\u0C8C\x07" +
		"a\x02\x02\u0C8B\u0C82\x03\x02\x02\x02\u0C8B\u0C87\x03\x02\x02\x02\u0C8B" +
		"\u0C89\x03\x02\x02\x02\u0C8C\u01B9\x03\x02\x02\x02\u0C8D\u0C8E\x07\r\x02" +
		"\x02\u0C8E\u0C92\x05\u01C4\xE3\x02\u0C8F\u0C90\x07f\x02\x02\u0C90\u0C91" +
		"\x07\x8B\x02\x02\u0C91\u0C93\x07T\x02\x02\u0C92\u0C8F\x03\x02\x02\x02" +
		"\u0C92\u0C93\x03\x02\x02\x02\u0C93\u0C94\x03\x02\x02\x02\u0C94\u0C95\x07" +
		"Y\x02\x02\u0C95\u0C96\x073\x02\x02\u0C96\u0CA1\x05\u01C4\xE3\x02\u0C97" +
		"\u0C98\x07\x18\x02\x02\u0C98\u0C99\x05\u01D6\xEC\x02\u0C99\u0C9A\x07\xE8" +
		"\x02\x02\u0C9A\u0C9B\x05\u01C8\xE5\x02\u0C9B\u0C9C\x07\x97\x02\x02\u0C9C" +
		"\u0C9F\x05\u0160\xB1\x02\u0C9D\u0C9E\x07C\x02\x02\u0C9E\u0CA0\x05\u01D8" +
		"\xED\x02\u0C9F\u0C9D\x03\x02\x02\x02\u0C9F\u0CA0\x03\x02\x02\x02\u0CA0" +
		"\u0CA2\x03\x02\x02\x02\u0CA1\u0C97\x03\x02\x02\x02\u0CA1\u0CA2\x03\x02" +
		"\x02\x02\u0CA2\u0CA5\x03\x02\x02\x02\u0CA3\u0CA4\x07\xA6\x02\x02\u0CA4" +
		"\u0CA6\x05\u01D8\xED\x02\u0CA5\u0CA3\x03\x02\x02\x02\u0CA5\u0CA6\x03\x02" +
		"\x02\x02\u0CA6\u01BB\x03\x02\x02\x02\u0CA7\u0CA8\x07\r\x02\x02\u0CA8\u0CAB";
	private static readonly _serializedATNSegment6: string =
		"\x05\u01C4\xE3\x02\u0CA9\u0CAA\x07f\x02\x02\u0CAA\u0CAC\x07T\x02\x02\u0CAB" +
		"\u0CA9\x03\x02\x02\x02\u0CAB\u0CAC\x03\x02\x02\x02\u0CAC\u0CAD\x03\x02" +
		"\x02\x02\u0CAD\u0CAE\x07Y\x02\x02\u0CAE\u0CAF\x073\x02\x02\u0CAF\u01BD" +
		"\x03\x02\x02\x02\u0CB0\u0CB1\x07\r\x02\x02\u0CB1\u0CB4\x05\u01C4\xE3\x02" +
		"\u0CB2\u0CB3\x07f\x02\x02\u0CB3\u0CB5\x07T\x02\x02\u0CB4\u0CB2\x03\x02" +
		"\x02\x02\u0CB4\u0CB5\x03\x02\x02\x02\u0CB5\u0CB6\x03\x02\x02\x02\u0CB6" +
		"\u0CB7\x07\xCA\x02\x02\u0CB7\u0CC6\x073\x02\x02\u0CB8\u0CB9\x07\xD6\x02" +
		"\x02\u0CB9\u0CBC\x05\u01C4\xE3\x02\u0CBA\u0CBB\x07\x18\x02\x02\u0CBB\u0CBD" +
		"\x05\u01D6\xEC\x02\u0CBC\u0CBA\x03\x02\x02\x02\u0CBC\u0CBD\x03\x02\x02" +
		"\x02\u0CBD\u0CC7\x03\x02\x02\x02\u0CBE\u0CBF\x07\xE8\x02\x02\u0CBF\u0CC7" +
		"\x05\u01C8\xE5\x02\u0CC0\u0CC1\x07\x97\x02\x02\u0CC1\u0CC7\x05\u0160\xB1" +
		"\x02\u0CC2\u0CC3\x07C\x02\x02\u0CC3\u0CC7\x05\u01D8\xED\x02\u0CC4\u0CC5" +
		"\x07\xA6\x02\x02\u0CC5\u0CC7\x05\u01D8\xED\x02\u0CC6\u0CB8\x03\x02\x02" +
		"\x02\u0CC6\u0CBE\x03\x02\x02\x02\u0CC6\u0CC0\x03\x02\x02\x02\u0CC6\u0CC2" +
		"\x03\x02\x02\x02\u0CC6\u0CC4\x03\x02\x02\x02\u0CC7\u0CC8\x03\x02\x02\x02" +
		"\u0CC8\u0CC6\x03\x02\x02\x02\u0CC8\u0CC9\x03\x02\x02\x02\u0CC9\u01BF\x03" +
		"\x02\x02\x02\u0CCA\u0CCC\t1\x02\x02\u0CCB\u0CCD\x05\u01C4\xE3\x02\u0CCC" +
		"\u0CCB\x03\x02\x02\x02\u0CCC\u0CCD\x03\x02\x02\x02\u0CCD\u0CCE\x03\x02" +
		"\x02\x02\u0CCE\u0CCF\x07Y\x02\x02\u0CCF\u0CD5\t\x1A\x02\x02\u0CD0\u0CD2" +
		"\x05\u0106\x84\x02\u0CD1\u0CD3\x05\x18\r\x02\u0CD2\u0CD1\x03\x02\x02\x02" +
		"\u0CD2\u0CD3\x03\x02\x02\x02\u0CD3\u0CD6\x03\x02\x02\x02\u0CD4\u0CD6\x05" +
		"&\x14\x02\u0CD5\u0CD0\x03\x02\x02\x02\u0CD5\u0CD4\x03\x02\x02\x02\u0CD5" +
		"\u0CD6\x03\x02\x02\x02\u0CD6\u01C1\x03\x02\x02\x02\u0CD7\u0CDC\x05\u01C4" +
		"\xE3\x02\u0CD8\u0CD9\x07$\x02\x02\u0CD9\u0CDB\x05\u01C4\xE3\x02\u0CDA" +
		"\u0CD8\x03\x02\x02\x02\u0CDB\u0CDE\x03\x02\x02\x02\u0CDC\u0CDA\x03\x02" +
		"\x02\x02\u0CDC\u0CDD\x03\x02\x02\x02\u0CDD\u01C3\x03\x02\x02\x02\u0CDE" +
		"\u0CDC\x03\x02\x02\x02\u0CDF\u0CE4\x05\u01DE\xF0\x02\u0CE0\u0CE1\x07A" +
		"\x02\x02\u0CE1\u0CE3\x05\u01DE\xF0\x02\u0CE2\u0CE0\x03\x02\x02\x02\u0CE3" +
		"\u0CE6\x03\x02\x02\x02\u0CE4\u0CE2\x03\x02\x02\x02\u0CE4\u0CE5\x03\x02" +
		"\x02\x02\u0CE5\u0CE9\x03\x02\x02\x02\u0CE6\u0CE4\x03\x02\x02\x02\u0CE7" +
		"\u0CE9\x05\xDCo\x02\u0CE8\u0CDF\x03\x02\x02\x02\u0CE8\u0CE7\x03\x02\x02" +
		"\x02\u0CE9\u01C5\x03\x02\x02\x02\u0CEA\u0CEF\x05\u01C8\xE5\x02\u0CEB\u0CEC" +
		"\x07$\x02\x02\u0CEC\u0CEE\x05\u01C8\xE5\x02\u0CED\u0CEB\x03\x02\x02\x02" +
		"\u0CEE\u0CF1\x03\x02\x02\x02\u0CEF\u0CED\x03\x02\x02\x02\u0CEF\u0CF0\x03" +
		"\x02\x02\x02\u0CF0\u01C7\x03\x02\x02\x02\u0CF1\u0CEF\x03\x02\x02\x02\u0CF2" +
		"\u0CF5\x05\u01DE\xF0\x02\u0CF3\u0CF5\x05\xDCo\x02\u0CF4\u0CF2\x03\x02" +
		"\x02\x02\u0CF4\u0CF3\x03\x02\x02\x02\u0CF5\u01C9\x03\x02\x02\x02\u0CF6" +
		"\u0CFC\x05\u01E0\xF1\x02\u0CF7\u0CF8\x05\u01E0\xF1\x02\u0CF8\u0CF9\x05" +
		"\u01CC\xE7\x02\u0CF9\u0CFC\x03\x02\x02\x02\u0CFA\u0CFC\x05\u01CC\xE7\x02" +
		"\u0CFB\u0CF6\x03\x02\x02\x02\u0CFB\u0CF7\x03\x02\x02\x02\u0CFB\u0CFA\x03" +
		"\x02\x02\x02\u0CFC\u01CB\x03\x02\x02\x02\u0CFD\u0D02\x05\u01CE\xE8\x02" +
		"\u0CFE\u0CFF\x05\u01CE\xE8\x02\u0CFF\u0D00\x05\u01CC\xE7\x02\u0D00\u0D02" +
		"\x03\x02\x02\x02\u0D01\u0CFD\x03\x02\x02\x02\u0D01\u0CFE\x03\x02\x02\x02" +
		"\u0D02\u01CD\x03\x02\x02\x02\u0D03\u0D04\x07A\x02\x02\u0D04\u0D0A\x05" +
		"\u01E0\xF1\x02\u0D05\u0D0A\x07\xA8\x02\x02\u0D06\u0D0A\x07\xDA\x02\x02" +
		"\u0D07\u0D0A\x07A\x02\x02\u0D08\u0D0A\x05\u01E2\xF2\x02\u0D09\u0D03\x03" +
		"\x02\x02\x02\u0D09\u0D05\x03\x02\x02\x02\u0D09\u0D06\x03\x02\x02\x02\u0D09" +
		"\u0D07\x03\x02\x02\x02\u0D09\u0D08\x03\x02\x02\x02\u0D0A\u01CF\x03\x02" +
		"\x02\x02\u0D0B\u0D0C\x05\u01D4\xEB\x02\u0D0C\u01D1\x03\x02\x02\x02\u0D0D" +
		"\u0D12\x05\u01D0\xE9\x02\u0D0E\u0D0F\x07$\x02\x02\u0D0F\u0D11\x05\u01D0" +
		"\xE9\x02\u0D10\u0D0E\x03\x02\x02\x02\u0D11\u0D14\x03\x02\x02\x02\u0D12" +
		"\u0D10\x03\x02\x02\x02\u0D12\u0D13\x03\x02\x02\x02\u0D13\u01D3\x03\x02" +
		"\x02\x02\u0D14\u0D12\x03\x02\x02\x02\u0D15\u0D16\t2\x02\x02\u0D16\u01D5" +
		"\x03\x02\x02\x02\u0D17\u0D1A\x05\u01D4\xEB\x02\u0D18\u0D1A\x05\xDCo\x02" +
		"\u0D19\u0D17\x03\x02\x02\x02\u0D19\u0D18\x03\x02\x02\x02\u0D1A\u01D7\x03" +
		"\x02\x02\x02\u0D1B\u0D1E\x05\u01DA\xEE\x02\u0D1C\u0D1E\x05\xDCo\x02\u0D1D" +
		"\u0D1B\x03\x02\x02\x02\u0D1D\u0D1C\x03\x02\x02\x02\u0D1E\u01D9\x03\x02" +
		"\x02\x02\u0D1F\u0D2D\x07v\x02\x02\u0D20\u0D21\x05\u01DE\xF0\x02\u0D21" +
		"\u0D22\x07#\x02\x02\u0D22\u0D2A\x05\x8EH\x02\u0D23\u0D24\x07$\x02\x02" +
		"\u0D24\u0D25\x05\u01DE\xF0\x02\u0D25\u0D26\x07#\x02\x02\u0D26\u0D27\x05" +
		"\x8EH\x02\u0D27\u0D29\x03\x02\x02\x02\u0D28\u0D23\x03\x02\x02\x02\u0D29" +
		"\u0D2C\x03\x02\x02\x02\u0D2A\u0D28\x03\x02\x02\x02\u0D2A\u0D2B\x03\x02" +
		"\x02\x02\u0D2B\u0D2E\x03\x02\x02\x02\u0D2C\u0D2A\x03\x02\x02\x02\u0D2D" +
		"\u0D20\x03\x02\x02\x02\u0D2D\u0D2E\x03\x02\x02\x02\u0D2E\u0D2F\x03\x02" +
		"\x02\x02\u0D2F\u0D30\x07\xAB\x02\x02\u0D30\u01DB\x03\x02\x02\x02\u0D31" +
		"\u0D36\x05\u01DE\xF0\x02\u0D32\u0D33\x07$\x02\x02\u0D33\u0D35\x05\u01DE" +
		"\xF0\x02\u0D34\u0D32\x03\x02\x02\x02\u0D35\u0D38\x03\x02\x02\x02\u0D36" +
		"\u0D34\x03\x02\x02\x02\u0D36\u0D37\x03\x02\x02\x02\u0D37\u01DD\x03\x02" +
		"\x02\x02\u0D38\u0D36\x03\x02\x02\x02\u0D39\u0D3C\x05\u01E0\xF1\x02\u0D3A" +
		"\u0D3C\x05\u01E2\xF2\x02\u0D3B\u0D39\x03\x02\x02\x02\u0D3B\u0D3A\x03\x02" +
		"\x02\x02\u0D3C\u01DF\x03\x02\x02\x02\u0D3D\u0D3E\x07\xFB\x02\x02\u0D3E" +
		"\u01E1\x03\x02\x02\x02\u0D3F\u0D40\t3\x02\x02\u0D40\u01E3\x03\x02\x02" +
		"\x02\u0D41\u0D42\x07\x02\x02\x03\u0D42\u01E5\x03\x02\x02\x02\u01BC\u01E9" +
		"\u01EE\u01F4\u01F7\u01FF\u0202\u020A\u020D\u0213\u0219\u021E\u0225\u022A" +
		"\u023B\u0241\u0247\u0251\u0254\u0257\u025A\u025F\u0266\u026E\u0271\u0276" +
		"\u0278\u0286\u0291\u02A3\u02AB\u02B2\u02B5\u02BD\u02C3\u02C9\u02CD\u02E5" +
		"\u02E8\u02F7\u02FB\u0307\u030D\u0311\u031A\u031E\u0320\u0322\u032C\u0332" +
		"\u033A\u0345\u034E\u0355\u0357\u036C\u0374\u037B\u037F\u0384\u0388\u0394" +
		"\u0398\u03A0\u03A4\u03A6\u03AE\u03B9\u03BE\u03C1\u03C4\u03C8\u03CA\u03D2" +
		"\u03D6\u03DB\u03E8\u03ED\u03F0\u03FC\u0401\u0404\u0407\u040A\u040E\u0410" +
		"\u0413\u0417\u0421\u0424\u0428\u042B\u0432\u0439\u043D\u0445\u0449\u0451" +
		"\u0453\u0459\u0461\u046A\u0472\u047A\u0480\u0491\u0493\u0498\u04AA\u04AC" +
		"\u04B3\u04B5\u04BF\u04C1\u04C9\u04D1\u04D7\u04E2\u04E6\u04E9\u04F2\u050D" +
		"\u0518\u051F\u052B\u0530\u053A\u053E\u0546\u054B\u0555\u056E\u0579\u0584" +
		"\u058F\u059A\u05A0\u05AE\u05B5\u05B7\u05C0\u05C2\u05C9\u05CE\u05D4\u05DA" +
		"\u05E4\u05ED\u05F7\u05FC\u05FF\u0605\u0614\u061C\u0626\u062C\u0635\u063A" +
		"\u0646\u0650\u0658\u0692\u069B\u069D\u06A8\u06B6\u06C4\u06D0\u06D8\u06E1" +
		"\u06E4\u06ED\u06F0\u06F4\u06F8\u06FB\u0700\u0704\u0707\u070C\u070F\u0714" +
		"\u0718\u071B\u0720\u0722\u0727\u072A\u0732\u0734\u0736\u073A\u073D\u0745" +
		"\u0747\u0749\u074D\u0750\u0757\u075A\u075E\u0762\u0765\u0767\u076E\u0771" +
		"\u0775\u0779\u077C\u077E\u0784\u0788\u078E\u0791\u0795\u0799\u07A6\u07AB" +
		"\u07AF\u07B7\u07C0\u07C5\u07D5\u07D7\u07DB\u07E6\u07EF\u07F4\u0800\u0802" +
		"\u0807\u0809\u0821\u0823\u0835\u083A\u0842\u084B\u0850\u0856\u0865\u086A" +
		"\u0872\u087B\u0880\u088D\u0893\u08A2\u08A7\u08B0\u08B8\u08BE\u08C0\u08C8" +
		"\u08D6\u08D8\u08E6\u08EB\u08F1\u08F8\u08FE\u0902\u0904\u0909\u090E\u0912" +
		"\u0917\u091D\u0924\u0926\u092C\u093E\u0941\u0944\u0948\u0953\u095E\u0964" +
		"\u096A\u0970\u0977\u097B\u097E\u098D\u0991\u0996\u099D\u09A1\u09A8\u09AE" +
		"\u09C0\u09C7\u09CD\u09D3\u09D5\u09D9\u09DD\u09E2\u09E8\u09EC\u09F9\u09FC" +
		"\u0A02\u0A05\u0A0A\u0A0D\u0A11\u0A14\u0A1A\u0A1D\u0A21\u0A24\u0A2D\u0A31" +
		"\u0A34\u0A38\u0A3B\u0A52\u0A57\u0A6B\u0A6F\u0A72\u0A79\u0A7F\u0A86\u0A8B" +
		"\u0A8E\u0A95\u0A99\u0A9D\u0AA0\u0AA2\u0AAE\u0AB7\u0ABC\u0AC8\u0ACD\u0AD6" +
		"\u0AD9\u0ADB\u0AE8\u0AED\u0AF5\u0AF9\u0B09\u0B0B\u0B17\u0B22\u0B26\u0B2A" +
		"\u0B2F\u0B32\u0B39\u0B3C\u0B40\u0B42\u0B5B\u0B5D\u0B61\u0B67\u0B69\u0B6D" +
		"\u0B7B\u0B7E\u0B80\u0B8D\u0B94\u0B9C\u0BA4\u0BA9\u0BB1\u0BB6\u0BC1\u0BC4" +
		"\u0BCD\u0BD0\u0BD9\u0BDC\u0BDE\u0BE5\u0BEB\u0BEF\u0BF1\u0BF4\u0BF7\u0C02" +
		"\u0C05\u0C08\u0C0B\u0C11\u0C15\u0C18\u0C1E\u0C28\u0C2C\u0C32\u0C36\u0C3D" +
		"\u0C3F\u0C45\u0C4B\u0C50\u0C52\u0C55\u0C5B\u0C5E\u0C62\u0C66\u0C6C\u0C70" +
		"\u0C73\u0C75\u0C7A\u0C80\u0C85\u0C8B\u0C92\u0C9F\u0CA1\u0CA5\u0CAB\u0CB4" +
		"\u0CBC\u0CC6\u0CC8\u0CCC\u0CD2\u0CD5\u0CDC\u0CE4\u0CE8\u0CEF\u0CF4\u0CFB" +
		"\u0D01\u0D09\u0D12\u0D19\u0D1D\u0D2A\u0D2D\u0D36\u0D3B";
	public static readonly _serializedATN: string = Utils.join(
		[
			CypherParser._serializedATNSegment0,
			CypherParser._serializedATNSegment1,
			CypherParser._serializedATNSegment2,
			CypherParser._serializedATNSegment3,
			CypherParser._serializedATNSegment4,
			CypherParser._serializedATNSegment5,
			CypherParser._serializedATNSegment6,
		],
		"",
	);
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!CypherParser.__ATN) {
			CypherParser.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(CypherParser._serializedATN));
		}

		return CypherParser.__ATN;
	}

}

export class StatementsContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(CypherParser.EOF, 0); }
	public statement(): StatementContext[];
	public statement(i: number): StatementContext;
	public statement(i?: number): StatementContext | StatementContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StatementContext);
		} else {
			return this.getRuleContext(i, StatementContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_statements; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStatements) {
			listener.enterStatements(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStatements) {
			listener.exitStatements(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStatements) {
			return visitor.visitStatements(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StatementContext extends ParserRuleContext {
	public useClause(): UseClauseContext | undefined {
		return this.tryGetRuleContext(0, UseClauseContext);
	}
	public singleQueryOrCommandWithUseClause(): SingleQueryOrCommandWithUseClauseContext | undefined {
		return this.tryGetRuleContext(0, SingleQueryOrCommandWithUseClauseContext);
	}
	public singleQueryOrCommand(): SingleQueryOrCommandContext | undefined {
		return this.tryGetRuleContext(0, SingleQueryOrCommandContext);
	}
	public periodicCommitQueryHintFailure(): PeriodicCommitQueryHintFailureContext | undefined {
		return this.tryGetRuleContext(0, PeriodicCommitQueryHintFailureContext);
	}
	public SEMICOLON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SEMICOLON, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_statement; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStatement) {
			listener.enterStatement(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStatement) {
			listener.exitStatement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStatement) {
			return visitor.visitStatement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleQueryOrCommandContext extends ParserRuleContext {
	public createCommand(): CreateCommandContext | undefined {
		return this.tryGetRuleContext(0, CreateCommandContext);
	}
	public command(): CommandContext | undefined {
		return this.tryGetRuleContext(0, CommandContext);
	}
	public singleQuery(): SingleQueryContext | undefined {
		return this.tryGetRuleContext(0, SingleQueryContext);
	}
	public union(): UnionContext[];
	public union(i: number): UnionContext;
	public union(i?: number): UnionContext | UnionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnionContext);
		} else {
			return this.getRuleContext(i, UnionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_singleQueryOrCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSingleQueryOrCommand) {
			listener.enterSingleQueryOrCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSingleQueryOrCommand) {
			listener.exitSingleQueryOrCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSingleQueryOrCommand) {
			return visitor.visitSingleQueryOrCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleQueryOrCommandWithUseClauseContext extends ParserRuleContext {
	public createCommand(): CreateCommandContext | undefined {
		return this.tryGetRuleContext(0, CreateCommandContext);
	}
	public command(): CommandContext | undefined {
		return this.tryGetRuleContext(0, CommandContext);
	}
	public singleQueryWithUseClause(): SingleQueryWithUseClauseContext | undefined {
		return this.tryGetRuleContext(0, SingleQueryWithUseClauseContext);
	}
	public union(): UnionContext[];
	public union(i: number): UnionContext;
	public union(i?: number): UnionContext | UnionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnionContext);
		} else {
			return this.getRuleContext(i, UnionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_singleQueryOrCommandWithUseClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSingleQueryOrCommandWithUseClause) {
			listener.enterSingleQueryOrCommandWithUseClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSingleQueryOrCommandWithUseClause) {
			listener.exitSingleQueryOrCommandWithUseClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSingleQueryOrCommandWithUseClause) {
			return visitor.visitSingleQueryOrCommandWithUseClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PeriodicCommitQueryHintFailureContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(CypherParser.USING, 0); }
	public PERIODIC(): TerminalNode { return this.getToken(CypherParser.PERIODIC, 0); }
	public COMMIT(): TerminalNode { return this.getToken(CypherParser.COMMIT, 0); }
	public UNSIGNED_DECIMAL_INTEGER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_periodicCommitQueryHintFailure; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPeriodicCommitQueryHintFailure) {
			listener.enterPeriodicCommitQueryHintFailure(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPeriodicCommitQueryHintFailure) {
			listener.exitPeriodicCommitQueryHintFailure(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPeriodicCommitQueryHintFailure) {
			return visitor.visitPeriodicCommitQueryHintFailure(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RegularQueryContext extends ParserRuleContext {
	public singleQuery(): SingleQueryContext {
		return this.getRuleContext(0, SingleQueryContext);
	}
	public union(): UnionContext[];
	public union(i: number): UnionContext;
	public union(i?: number): UnionContext | UnionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UnionContext);
		} else {
			return this.getRuleContext(i, UnionContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_regularQuery; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRegularQuery) {
			listener.enterRegularQuery(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRegularQuery) {
			listener.exitRegularQuery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRegularQuery) {
			return visitor.visitRegularQuery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnionContext extends ParserRuleContext {
	public UNION(): TerminalNode { return this.getToken(CypherParser.UNION, 0); }
	public singleQuery(): SingleQueryContext {
		return this.getRuleContext(0, SingleQueryContext);
	}
	public ALL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_union; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterUnion) {
			listener.enterUnion(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitUnion) {
			listener.exitUnion(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitUnion) {
			return visitor.visitUnion(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleQueryContext extends ParserRuleContext {
	public clause(): ClauseContext[];
	public clause(i: number): ClauseContext;
	public clause(i?: number): ClauseContext | ClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClauseContext);
		} else {
			return this.getRuleContext(i, ClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_singleQuery; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSingleQuery) {
			listener.enterSingleQuery(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSingleQuery) {
			listener.exitSingleQuery(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSingleQuery) {
			return visitor.visitSingleQuery(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleQueryWithUseClauseContext extends ParserRuleContext {
	public clause(): ClauseContext[];
	public clause(i: number): ClauseContext;
	public clause(i?: number): ClauseContext | ClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClauseContext);
		} else {
			return this.getRuleContext(i, ClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_singleQueryWithUseClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSingleQueryWithUseClause) {
			listener.enterSingleQueryWithUseClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSingleQueryWithUseClause) {
			listener.exitSingleQueryWithUseClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSingleQueryWithUseClause) {
			return visitor.visitSingleQueryWithUseClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ClauseContext extends ParserRuleContext {
	public useClause(): UseClauseContext | undefined {
		return this.tryGetRuleContext(0, UseClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	public createClause(): CreateClauseContext | undefined {
		return this.tryGetRuleContext(0, CreateClauseContext);
	}
	public deleteClause(): DeleteClauseContext | undefined {
		return this.tryGetRuleContext(0, DeleteClauseContext);
	}
	public setClause(): SetClauseContext | undefined {
		return this.tryGetRuleContext(0, SetClauseContext);
	}
	public removeClause(): RemoveClauseContext | undefined {
		return this.tryGetRuleContext(0, RemoveClauseContext);
	}
	public matchClause(): MatchClauseContext | undefined {
		return this.tryGetRuleContext(0, MatchClauseContext);
	}
	public mergeClause(): MergeClauseContext | undefined {
		return this.tryGetRuleContext(0, MergeClauseContext);
	}
	public withClause(): WithClauseContext | undefined {
		return this.tryGetRuleContext(0, WithClauseContext);
	}
	public unwindClause(): UnwindClauseContext | undefined {
		return this.tryGetRuleContext(0, UnwindClauseContext);
	}
	public callClause(): CallClauseContext | undefined {
		return this.tryGetRuleContext(0, CallClauseContext);
	}
	public subqueryClause(): SubqueryClauseContext | undefined {
		return this.tryGetRuleContext(0, SubqueryClauseContext);
	}
	public loadCSVClause(): LoadCSVClauseContext | undefined {
		return this.tryGetRuleContext(0, LoadCSVClauseContext);
	}
	public foreachClause(): ForeachClauseContext | undefined {
		return this.tryGetRuleContext(0, ForeachClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_clause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterClause) {
			listener.enterClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitClause) {
			listener.exitClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitClause) {
			return visitor.visitClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UseClauseContext extends ParserRuleContext {
	public USE(): TerminalNode { return this.getToken(CypherParser.USE, 0); }
	public GRAPH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.GRAPH, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_useClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterUseClause) {
			listener.enterUseClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitUseClause) {
			listener.exitUseClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitUseClause) {
			return visitor.visitUseClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnClauseContext extends ParserRuleContext {
	public RETURN(): TerminalNode { return this.getToken(CypherParser.RETURN, 0); }
	public returnBody(): ReturnBodyContext {
		return this.getRuleContext(0, ReturnBodyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_returnClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterReturnClause) {
			listener.enterReturnClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitReturnClause) {
			listener.exitReturnClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitReturnClause) {
			return visitor.visitReturnClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnBodyContext extends ParserRuleContext {
	public returnItems(): ReturnItemsContext {
		return this.getRuleContext(0, ReturnItemsContext);
	}
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DISTINCT, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BY, 0); }
	public orderItem(): OrderItemContext[];
	public orderItem(i: number): OrderItemContext;
	public orderItem(i?: number): OrderItemContext | OrderItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OrderItemContext);
		} else {
			return this.getRuleContext(i, OrderItemContext);
		}
	}
	public skip(): SkipContext | undefined {
		return this.tryGetRuleContext(0, SkipContext);
	}
	public limit(): LimitContext | undefined {
		return this.tryGetRuleContext(0, LimitContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_returnBody; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterReturnBody) {
			listener.enterReturnBody(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitReturnBody) {
			listener.exitReturnBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitReturnBody) {
			return visitor.visitReturnBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnItemContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AS, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_returnItem; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterReturnItem) {
			listener.enterReturnItem(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitReturnItem) {
			listener.exitReturnItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitReturnItem) {
			return visitor.visitReturnItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReturnItemsContext extends ParserRuleContext {
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public returnItem(): ReturnItemContext[];
	public returnItem(i: number): ReturnItemContext;
	public returnItem(i?: number): ReturnItemContext | ReturnItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ReturnItemContext);
		} else {
			return this.getRuleContext(i, ReturnItemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_returnItems; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterReturnItems) {
			listener.enterReturnItems(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitReturnItems) {
			listener.exitReturnItems(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitReturnItems) {
			return visitor.visitReturnItems(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OrderItemContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public DESC(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DESC, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ASC, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_orderItem; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterOrderItem) {
			listener.enterOrderItem(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitOrderItem) {
			listener.exitOrderItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitOrderItem) {
			return visitor.visitOrderItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SkipContext extends ParserRuleContext {
	public SKIPROWS(): TerminalNode { return this.getToken(CypherParser.SKIPROWS, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_skip; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSkip) {
			listener.enterSkip(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSkip) {
			listener.exitSkip(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSkip) {
			return visitor.visitSkip(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LimitContext extends ParserRuleContext {
	public LIMITROWS(): TerminalNode { return this.getToken(CypherParser.LIMITROWS, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_limit; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLimit) {
			listener.enterLimit(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLimit) {
			listener.exitLimit(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLimit) {
			return visitor.visitLimit(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WhereClauseContext extends ParserRuleContext {
	public WHERE(): TerminalNode { return this.getToken(CypherParser.WHERE, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_whereClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterWhereClause) {
			listener.enterWhereClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitWhereClause) {
			listener.exitWhereClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitWhereClause) {
			return visitor.visitWhereClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WithClauseContext extends ParserRuleContext {
	public WITH(): TerminalNode { return this.getToken(CypherParser.WITH, 0); }
	public returnBody(): ReturnBodyContext {
		return this.getRuleContext(0, ReturnBodyContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_withClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterWithClause) {
			listener.enterWithClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitWithClause) {
			listener.exitWithClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitWithClause) {
			return visitor.visitWithClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateClauseContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(CypherParser.CREATE, 0); }
	public patternList(): PatternListContext {
		return this.getRuleContext(0, PatternListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateClause) {
			listener.enterCreateClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateClause) {
			listener.exitCreateClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateClause) {
			return visitor.visitCreateClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetClauseContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(CypherParser.SET, 0); }
	public setItem(): SetItemContext[];
	public setItem(i: number): SetItemContext;
	public setItem(i?: number): SetItemContext | SetItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetItemContext);
		} else {
			return this.getRuleContext(i, SetItemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_setClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSetClause) {
			listener.enterSetClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSetClause) {
			listener.exitSetClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSetClause) {
			return visitor.visitSetClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetItemContext extends ParserRuleContext {
	public propertyExpression(): PropertyExpressionContext | undefined {
		return this.tryGetRuleContext(0, PropertyExpressionContext);
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EQ, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public PLUSEQUAL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PLUSEQUAL, 0); }
	public nodeLabels(): NodeLabelsContext | undefined {
		return this.tryGetRuleContext(0, NodeLabelsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_setItem; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSetItem) {
			listener.enterSetItem(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSetItem) {
			listener.exitSetItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSetItem) {
			return visitor.visitSetItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemoveClauseContext extends ParserRuleContext {
	public REMOVE(): TerminalNode { return this.getToken(CypherParser.REMOVE, 0); }
	public removeItem(): RemoveItemContext[];
	public removeItem(i: number): RemoveItemContext;
	public removeItem(i?: number): RemoveItemContext | RemoveItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RemoveItemContext);
		} else {
			return this.getRuleContext(i, RemoveItemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_removeClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRemoveClause) {
			listener.enterRemoveClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRemoveClause) {
			listener.exitRemoveClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRemoveClause) {
			return visitor.visitRemoveClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemoveItemContext extends ParserRuleContext {
	public propertyExpression(): PropertyExpressionContext | undefined {
		return this.tryGetRuleContext(0, PropertyExpressionContext);
	}
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public nodeLabels(): NodeLabelsContext | undefined {
		return this.tryGetRuleContext(0, NodeLabelsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_removeItem; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRemoveItem) {
			listener.enterRemoveItem(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRemoveItem) {
			listener.exitRemoveItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRemoveItem) {
			return visitor.visitRemoveItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeleteClauseContext extends ParserRuleContext {
	public DELETE(): TerminalNode { return this.getToken(CypherParser.DELETE, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public DETACH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DETACH, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_deleteClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDeleteClause) {
			listener.enterDeleteClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDeleteClause) {
			listener.exitDeleteClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDeleteClause) {
			return visitor.visitDeleteClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MatchClauseContext extends ParserRuleContext {
	public patternList(): PatternListContext {
		return this.getRuleContext(0, PatternListContext);
	}
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MATCH, 0); }
	public hints(): HintsContext[];
	public hints(i: number): HintsContext;
	public hints(i?: number): HintsContext | HintsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HintsContext);
		} else {
			return this.getRuleContext(i, HintsContext);
		}
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OPTIONAL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_matchClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterMatchClause) {
			listener.enterMatchClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitMatchClause) {
			listener.exitMatchClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitMatchClause) {
			return visitor.visitMatchClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HintsContext extends ParserRuleContext {
	public USING(): TerminalNode { return this.getToken(CypherParser.USING, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEX, 0); }
	public indexHintBody(): IndexHintBodyContext | undefined {
		return this.tryGetRuleContext(0, IndexHintBodyContext);
	}
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BTREE, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TEXT, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RANGE, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.POINT, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.JOIN, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public variableList1(): VariableList1Context | undefined {
		return this.tryGetRuleContext(0, VariableList1Context);
	}
	public SCAN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SCAN, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public labelOrRelType(): LabelOrRelTypeContext | undefined {
		return this.tryGetRuleContext(0, LabelOrRelTypeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_hints; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterHints) {
			listener.enterHints(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitHints) {
			listener.exitHints(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitHints) {
			return visitor.visitHints(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class IndexHintBodyContext extends ParserRuleContext {
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	public labelOrRelType(): LabelOrRelTypeContext {
		return this.getRuleContext(0, LabelOrRelTypeContext);
	}
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public symbolicNameList1(): SymbolicNameList1Context {
		return this.getRuleContext(0, SymbolicNameList1Context);
	}
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	public SEEK(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SEEK, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_indexHintBody; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterIndexHintBody) {
			listener.enterIndexHintBody(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitIndexHintBody) {
			listener.exitIndexHintBody(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitIndexHintBody) {
			return visitor.visitIndexHintBody(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MergeClauseContext extends ParserRuleContext {
	public MERGE(): TerminalNode { return this.getToken(CypherParser.MERGE, 0); }
	public pattern(): PatternContext {
		return this.getRuleContext(0, PatternContext);
	}
	public ON(): TerminalNode[];
	public ON(i: number): TerminalNode;
	public ON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.ON);
		} else {
			return this.getToken(CypherParser.ON, i);
		}
	}
	public MATCH(): TerminalNode[];
	public MATCH(i: number): TerminalNode;
	public MATCH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.MATCH);
		} else {
			return this.getToken(CypherParser.MATCH, i);
		}
	}
	public setClause(): SetClauseContext[];
	public setClause(i: number): SetClauseContext;
	public setClause(i?: number): SetClauseContext | SetClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetClauseContext);
		} else {
			return this.getRuleContext(i, SetClauseContext);
		}
	}
	public CREATE(): TerminalNode[];
	public CREATE(i: number): TerminalNode;
	public CREATE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.CREATE);
		} else {
			return this.getToken(CypherParser.CREATE, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_mergeClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterMergeClause) {
			listener.enterMergeClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitMergeClause) {
			listener.exitMergeClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitMergeClause) {
			return visitor.visitMergeClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnwindClauseContext extends ParserRuleContext {
	public UNWIND(): TerminalNode { return this.getToken(CypherParser.UNWIND, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode { return this.getToken(CypherParser.AS, 0); }
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_unwindClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterUnwindClause) {
			listener.enterUnwindClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitUnwindClause) {
			listener.exitUnwindClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitUnwindClause) {
			return visitor.visitUnwindClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CallClauseContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(CypherParser.CALL, 0); }
	public procedureName(): ProcedureNameContext {
		return this.getRuleContext(0, ProcedureNameContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	public YIELD(): TerminalNode | undefined { return this.tryGetToken(CypherParser.YIELD, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public procedureResultItem(): ProcedureResultItemContext[];
	public procedureResultItem(i: number): ProcedureResultItemContext;
	public procedureResultItem(i?: number): ProcedureResultItemContext | ProcedureResultItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureResultItemContext);
		} else {
			return this.getRuleContext(i, ProcedureResultItemContext);
		}
	}
	public procedureArgument(): ProcedureArgumentContext[];
	public procedureArgument(i: number): ProcedureArgumentContext;
	public procedureArgument(i?: number): ProcedureArgumentContext | ProcedureArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ProcedureArgumentContext);
		} else {
			return this.getRuleContext(i, ProcedureArgumentContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_callClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCallClause) {
			listener.enterCallClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCallClause) {
			listener.exitCallClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCallClause) {
			return visitor.visitCallClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureNameContext extends ParserRuleContext {
	public namespace(): NamespaceContext {
		return this.getRuleContext(0, NamespaceContext);
	}
	public symbolicNameString(): SymbolicNameStringContext {
		return this.getRuleContext(0, SymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_procedureName; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterProcedureName) {
			listener.enterProcedureName(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitProcedureName) {
			listener.exitProcedureName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitProcedureName) {
			return visitor.visitProcedureName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureArgumentContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_procedureArgument; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterProcedureArgument) {
			listener.enterProcedureArgument(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitProcedureArgument) {
			listener.exitProcedureArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitProcedureArgument) {
			return visitor.visitProcedureArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ProcedureResultItemContext extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext {
		return this.getRuleContext(0, SymbolicNameStringContext);
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AS, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_procedureResultItem; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterProcedureResultItem) {
			listener.enterProcedureResultItem(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitProcedureResultItem) {
			listener.exitProcedureResultItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitProcedureResultItem) {
			return visitor.visitProcedureResultItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LoadCSVClauseContext extends ParserRuleContext {
	public LOAD(): TerminalNode { return this.getToken(CypherParser.LOAD, 0); }
	public CSV(): TerminalNode { return this.getToken(CypherParser.CSV, 0); }
	public FROM(): TerminalNode { return this.getToken(CypherParser.FROM, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public AS(): TerminalNode { return this.getToken(CypherParser.AS, 0); }
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	public WITH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WITH, 0); }
	public HEADERS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.HEADERS, 0); }
	public FIELDTERMINATOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FIELDTERMINATOR, 0); }
	public stringToken(): StringTokenContext | undefined {
		return this.tryGetRuleContext(0, StringTokenContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_loadCSVClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLoadCSVClause) {
			listener.enterLoadCSVClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLoadCSVClause) {
			listener.exitLoadCSVClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLoadCSVClause) {
			return visitor.visitLoadCSVClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ForeachClauseContext extends ParserRuleContext {
	public FOREACH(): TerminalNode { return this.getToken(CypherParser.FOREACH, 0); }
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	public IN(): TerminalNode { return this.getToken(CypherParser.IN, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public BAR(): TerminalNode { return this.getToken(CypherParser.BAR, 0); }
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	public clause(): ClauseContext[];
	public clause(i: number): ClauseContext;
	public clause(i?: number): ClauseContext | ClauseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ClauseContext);
		} else {
			return this.getRuleContext(i, ClauseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_foreachClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterForeachClause) {
			listener.enterForeachClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitForeachClause) {
			listener.exitForeachClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitForeachClause) {
			return visitor.visitForeachClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubqueryClauseContext extends ParserRuleContext {
	public CALL(): TerminalNode { return this.getToken(CypherParser.CALL, 0); }
	public LCURLY(): TerminalNode { return this.getToken(CypherParser.LCURLY, 0); }
	public regularQuery(): RegularQueryContext {
		return this.getRuleContext(0, RegularQueryContext);
	}
	public RCURLY(): TerminalNode { return this.getToken(CypherParser.RCURLY, 0); }
	public subqueryInTransactionsParameters(): SubqueryInTransactionsParametersContext | undefined {
		return this.tryGetRuleContext(0, SubqueryInTransactionsParametersContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_subqueryClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSubqueryClause) {
			listener.enterSubqueryClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSubqueryClause) {
			listener.exitSubqueryClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSubqueryClause) {
			return visitor.visitSubqueryClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubqueryInTransactionsParametersContext extends ParserRuleContext {
	public IN(): TerminalNode { return this.getToken(CypherParser.IN, 0); }
	public TRANSACTIONS(): TerminalNode { return this.getToken(CypherParser.TRANSACTIONS, 0); }
	public subqueryInTransactionsBatchParameters(): SubqueryInTransactionsBatchParametersContext[];
	public subqueryInTransactionsBatchParameters(i: number): SubqueryInTransactionsBatchParametersContext;
	public subqueryInTransactionsBatchParameters(i?: number): SubqueryInTransactionsBatchParametersContext | SubqueryInTransactionsBatchParametersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubqueryInTransactionsBatchParametersContext);
		} else {
			return this.getRuleContext(i, SubqueryInTransactionsBatchParametersContext);
		}
	}
	public subqueryInTransactionsErrorParameters(): SubqueryInTransactionsErrorParametersContext[];
	public subqueryInTransactionsErrorParameters(i: number): SubqueryInTransactionsErrorParametersContext;
	public subqueryInTransactionsErrorParameters(i?: number): SubqueryInTransactionsErrorParametersContext | SubqueryInTransactionsErrorParametersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubqueryInTransactionsErrorParametersContext);
		} else {
			return this.getRuleContext(i, SubqueryInTransactionsErrorParametersContext);
		}
	}
	public subqueryInTransactionsReportParameters(): SubqueryInTransactionsReportParametersContext[];
	public subqueryInTransactionsReportParameters(i: number): SubqueryInTransactionsReportParametersContext;
	public subqueryInTransactionsReportParameters(i?: number): SubqueryInTransactionsReportParametersContext | SubqueryInTransactionsReportParametersContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SubqueryInTransactionsReportParametersContext);
		} else {
			return this.getRuleContext(i, SubqueryInTransactionsReportParametersContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_subqueryInTransactionsParameters; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSubqueryInTransactionsParameters) {
			listener.enterSubqueryInTransactionsParameters(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSubqueryInTransactionsParameters) {
			listener.exitSubqueryInTransactionsParameters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSubqueryInTransactionsParameters) {
			return visitor.visitSubqueryInTransactionsParameters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubqueryInTransactionsBatchParametersContext extends ParserRuleContext {
	public OF(): TerminalNode { return this.getToken(CypherParser.OF, 0); }
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	public ROW(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROWS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_subqueryInTransactionsBatchParameters; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSubqueryInTransactionsBatchParameters) {
			listener.enterSubqueryInTransactionsBatchParameters(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSubqueryInTransactionsBatchParameters) {
			listener.exitSubqueryInTransactionsBatchParameters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSubqueryInTransactionsBatchParameters) {
			return visitor.visitSubqueryInTransactionsBatchParameters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubqueryInTransactionsErrorParametersContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public ERROR(): TerminalNode { return this.getToken(CypherParser.ERROR, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONTINUE, 0); }
	public BREAK(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BREAK, 0); }
	public FAIL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FAIL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_subqueryInTransactionsErrorParameters; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSubqueryInTransactionsErrorParameters) {
			listener.enterSubqueryInTransactionsErrorParameters(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSubqueryInTransactionsErrorParameters) {
			listener.exitSubqueryInTransactionsErrorParameters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSubqueryInTransactionsErrorParameters) {
			return visitor.visitSubqueryInTransactionsErrorParameters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SubqueryInTransactionsReportParametersContext extends ParserRuleContext {
	public REPORT(): TerminalNode { return this.getToken(CypherParser.REPORT, 0); }
	public STATUS(): TerminalNode { return this.getToken(CypherParser.STATUS, 0); }
	public AS(): TerminalNode { return this.getToken(CypherParser.AS, 0); }
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_subqueryInTransactionsReportParameters; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSubqueryInTransactionsReportParameters) {
			listener.enterSubqueryInTransactionsReportParameters(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSubqueryInTransactionsReportParameters) {
			listener.exitSubqueryInTransactionsReportParameters(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSubqueryInTransactionsReportParameters) {
			return visitor.visitSubqueryInTransactionsReportParameters(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PatternListContext extends ParserRuleContext {
	public pattern(): PatternContext[];
	public pattern(i: number): PatternContext;
	public pattern(i?: number): PatternContext | PatternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PatternContext);
		} else {
			return this.getRuleContext(i, PatternContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_patternList; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPatternList) {
			listener.enterPatternList(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPatternList) {
			listener.exitPatternList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPatternList) {
			return visitor.visitPatternList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PatternContext extends ParserRuleContext {
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EQ, 0); }
	public anonymousPattern(): AnonymousPatternContext | undefined {
		return this.tryGetRuleContext(0, AnonymousPatternContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_pattern; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPattern) {
			listener.enterPattern(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPattern) {
			listener.exitPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPattern) {
			return visitor.visitPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QuantifierContext extends ParserRuleContext {
	public LCURLY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LCURLY, 0); }
	public UNSIGNED_DECIMAL_INTEGER(): TerminalNode[];
	public UNSIGNED_DECIMAL_INTEGER(i: number): TerminalNode;
	public UNSIGNED_DECIMAL_INTEGER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.UNSIGNED_DECIMAL_INTEGER);
		} else {
			return this.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, i);
		}
	}
	public RCURLY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RCURLY, 0); }
	public COMMA(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMA, 0); }
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PLUS, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_quantifier; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterQuantifier) {
			listener.enterQuantifier(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitQuantifier) {
			listener.exitQuantifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitQuantifier) {
			return visitor.visitQuantifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnonymousPatternContext extends ParserRuleContext {
	public shortestPathPattern(): ShortestPathPatternContext | undefined {
		return this.tryGetRuleContext(0, ShortestPathPatternContext);
	}
	public everyPathPattern(): EveryPathPatternContext | undefined {
		return this.tryGetRuleContext(0, EveryPathPatternContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_anonymousPattern; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAnonymousPattern) {
			listener.enterAnonymousPattern(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAnonymousPattern) {
			listener.exitAnonymousPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAnonymousPattern) {
			return visitor.visitAnonymousPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShortestPathPatternContext extends ParserRuleContext {
	public SHORTEST_PATH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SHORTEST_PATH, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public everyPathPattern(): EveryPathPatternContext | undefined {
		return this.tryGetRuleContext(0, EveryPathPatternContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	public ALL_SHORTEST_PATH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALL_SHORTEST_PATH, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_shortestPathPattern; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShortestPathPattern) {
			listener.enterShortestPathPattern(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShortestPathPattern) {
			listener.exitShortestPathPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShortestPathPattern) {
			return visitor.visitShortestPathPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MaybeQuantifiedRelationshipPatternContext extends ParserRuleContext {
	public relationshipPattern(): RelationshipPatternContext {
		return this.getRuleContext(0, RelationshipPatternContext);
	}
	public quantifier(): QuantifierContext | undefined {
		return this.tryGetRuleContext(0, QuantifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_maybeQuantifiedRelationshipPattern; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterMaybeQuantifiedRelationshipPattern) {
			listener.enterMaybeQuantifiedRelationshipPattern(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitMaybeQuantifiedRelationshipPattern) {
			listener.exitMaybeQuantifiedRelationshipPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitMaybeQuantifiedRelationshipPattern) {
			return visitor.visitMaybeQuantifiedRelationshipPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EveryPathPatternContext extends ParserRuleContext {
	public nodePattern(): NodePatternContext[];
	public nodePattern(i: number): NodePatternContext;
	public nodePattern(i?: number): NodePatternContext | NodePatternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NodePatternContext);
		} else {
			return this.getRuleContext(i, NodePatternContext);
		}
	}
	public parenthesizedPath(): ParenthesizedPathContext[];
	public parenthesizedPath(i: number): ParenthesizedPathContext;
	public parenthesizedPath(i?: number): ParenthesizedPathContext | ParenthesizedPathContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ParenthesizedPathContext);
		} else {
			return this.getRuleContext(i, ParenthesizedPathContext);
		}
	}
	public maybeQuantifiedRelationshipPattern(): MaybeQuantifiedRelationshipPatternContext[];
	public maybeQuantifiedRelationshipPattern(i: number): MaybeQuantifiedRelationshipPatternContext;
	public maybeQuantifiedRelationshipPattern(i?: number): MaybeQuantifiedRelationshipPatternContext | MaybeQuantifiedRelationshipPatternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MaybeQuantifiedRelationshipPatternContext);
		} else {
			return this.getRuleContext(i, MaybeQuantifiedRelationshipPatternContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_everyPathPattern; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterEveryPathPattern) {
			listener.enterEveryPathPattern(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitEveryPathPattern) {
			listener.exitEveryPathPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitEveryPathPattern) {
			return visitor.visitEveryPathPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EveryPathPatternNonEmptyContext extends ParserRuleContext {
	public nodePattern(): NodePatternContext[];
	public nodePattern(i: number): NodePatternContext;
	public nodePattern(i?: number): NodePatternContext | NodePatternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(NodePatternContext);
		} else {
			return this.getRuleContext(i, NodePatternContext);
		}
	}
	public relationshipPattern(): RelationshipPatternContext[];
	public relationshipPattern(i: number): RelationshipPatternContext;
	public relationshipPattern(i?: number): RelationshipPatternContext | RelationshipPatternContext[] {
		if (i === undefined) {
			return this.getRuleContexts(RelationshipPatternContext);
		} else {
			return this.getRuleContext(i, RelationshipPatternContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_everyPathPatternNonEmpty; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterEveryPathPatternNonEmpty) {
			listener.enterEveryPathPatternNonEmpty(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitEveryPathPatternNonEmpty) {
			listener.exitEveryPathPatternNonEmpty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitEveryPathPatternNonEmpty) {
			return visitor.visitEveryPathPatternNonEmpty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NodePatternContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public labelExpression(): LabelExpressionContext | undefined {
		return this.tryGetRuleContext(0, LabelExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_nodePattern; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterNodePattern) {
			listener.enterNodePattern(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitNodePattern) {
			listener.exitNodePattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitNodePattern) {
			return visitor.visitNodePattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParenthesizedPathContext extends ParserRuleContext {
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public pattern(): PatternContext {
		return this.getRuleContext(0, PatternContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public quantifier(): QuantifierContext | undefined {
		return this.tryGetRuleContext(0, QuantifierContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_parenthesizedPath; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterParenthesizedPath) {
			listener.enterParenthesizedPath(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitParenthesizedPath) {
			listener.exitParenthesizedPath(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitParenthesizedPath) {
			return visitor.visitParenthesizedPath(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NodeLabelsContext extends ParserRuleContext {
	public labelOrRelType(): LabelOrRelTypeContext[];
	public labelOrRelType(i: number): LabelOrRelTypeContext;
	public labelOrRelType(i?: number): LabelOrRelTypeContext | LabelOrRelTypeContext[] {
		if (i === undefined) {
			return this.getRuleContexts(LabelOrRelTypeContext);
		} else {
			return this.getRuleContext(i, LabelOrRelTypeContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_nodeLabels; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterNodeLabels) {
			listener.enterNodeLabels(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitNodeLabels) {
			listener.exitNodeLabels(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitNodeLabels) {
			return visitor.visitNodeLabels(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelExpressionPredicateContext extends ParserRuleContext {
	public labelExpression(): LabelExpressionContext {
		return this.getRuleContext(0, LabelExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelExpressionPredicate; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelExpressionPredicate) {
			listener.enterLabelExpressionPredicate(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelExpressionPredicate) {
			listener.exitLabelExpressionPredicate(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelExpressionPredicate) {
			return visitor.visitLabelExpressionPredicate(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelOrRelTypeContext extends ParserRuleContext {
	public COLON(): TerminalNode { return this.getToken(CypherParser.COLON, 0); }
	public symbolicNameString(): SymbolicNameStringContext {
		return this.getRuleContext(0, SymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelOrRelType; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelOrRelType) {
			listener.enterLabelOrRelType(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelOrRelType) {
			listener.exitLabelOrRelType(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelOrRelType) {
			return visitor.visitLabelOrRelType(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelOrRelTypesContext extends ParserRuleContext {
	public COLON(): TerminalNode { return this.getToken(CypherParser.COLON, 0); }
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public BAR(): TerminalNode[];
	public BAR(i: number): TerminalNode;
	public BAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.BAR);
		} else {
			return this.getToken(CypherParser.BAR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelOrRelTypes; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelOrRelTypes) {
			listener.enterLabelOrRelTypes(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelOrRelTypes) {
			listener.exitLabelOrRelTypes(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelOrRelTypes) {
			return visitor.visitLabelOrRelTypes(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertiesContext extends ParserRuleContext {
	public mapLiteral(): MapLiteralContext | undefined {
		return this.tryGetRuleContext(0, MapLiteralContext);
	}
	public parameter(): ParameterContext | undefined {
		return this.tryGetRuleContext(0, ParameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_properties; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterProperties) {
			listener.enterProperties(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitProperties) {
			listener.exitProperties(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitProperties) {
			return visitor.visitProperties(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RelationshipPatternContext extends ParserRuleContext {
	public arrowLine(): ArrowLineContext[];
	public arrowLine(i: number): ArrowLineContext;
	public arrowLine(i?: number): ArrowLineContext | ArrowLineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArrowLineContext);
		} else {
			return this.getRuleContext(i, ArrowLineContext);
		}
	}
	public leftArrow(): LeftArrowContext | undefined {
		return this.tryGetRuleContext(0, LeftArrowContext);
	}
	public LBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LBRACKET, 0); }
	public RBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RBRACKET, 0); }
	public rightArrow(): RightArrowContext | undefined {
		return this.tryGetRuleContext(0, RightArrowContext);
	}
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public properties(): PropertiesContext | undefined {
		return this.tryGetRuleContext(0, PropertiesContext);
	}
	public labelExpression(): LabelExpressionContext | undefined {
		return this.tryGetRuleContext(0, LabelExpressionContext);
	}
	public pathLength(): PathLengthContext | undefined {
		return this.tryGetRuleContext(0, PathLengthContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_relationshipPattern; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRelationshipPattern) {
			listener.enterRelationshipPattern(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRelationshipPattern) {
			listener.exitRelationshipPattern(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRelationshipPattern) {
			return visitor.visitRelationshipPattern(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LeftArrowContext extends ParserRuleContext {
	public LT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LT, 0); }
	public ARROW_LEFT_HEAD(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ARROW_LEFT_HEAD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_leftArrow; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLeftArrow) {
			listener.enterLeftArrow(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLeftArrow) {
			listener.exitLeftArrow(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLeftArrow) {
			return visitor.visitLeftArrow(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ArrowLineContext extends ParserRuleContext {
	public ARROW_LINE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ARROW_LINE, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_arrowLine; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterArrowLine) {
			listener.enterArrowLine(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitArrowLine) {
			listener.exitArrowLine(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitArrowLine) {
			return visitor.visitArrowLine(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RightArrowContext extends ParserRuleContext {
	public GT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.GT, 0); }
	public ARROW_RIGHT_HEAD(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ARROW_RIGHT_HEAD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_rightArrow; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRightArrow) {
			listener.enterRightArrow(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRightArrow) {
			listener.exitRightArrow(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRightArrow) {
			return visitor.visitRightArrow(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PathLengthContext extends ParserRuleContext {
	public TIMES(): TerminalNode { return this.getToken(CypherParser.TIMES, 0); }
	public pathLengthLiteral(): PathLengthLiteralContext | undefined {
		return this.tryGetRuleContext(0, PathLengthLiteralContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_pathLength; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPathLength) {
			listener.enterPathLength(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPathLength) {
			listener.exitPathLength(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPathLength) {
			return visitor.visitPathLength(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PathLengthLiteralContext extends ParserRuleContext {
	public DOTDOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DOTDOT, 0); }
	public UNSIGNED_DECIMAL_INTEGER(): TerminalNode[];
	public UNSIGNED_DECIMAL_INTEGER(i: number): TerminalNode;
	public UNSIGNED_DECIMAL_INTEGER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.UNSIGNED_DECIMAL_INTEGER);
		} else {
			return this.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_pathLengthLiteral; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPathLengthLiteral) {
			listener.enterPathLengthLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPathLengthLiteral) {
			listener.exitPathLengthLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPathLengthLiteral) {
			return visitor.visitPathLengthLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelExpressionContext extends ParserRuleContext {
	public COLON(): TerminalNode { return this.getToken(CypherParser.COLON, 0); }
	public labelExpressionName(): LabelExpressionNameContext {
		return this.getRuleContext(0, LabelExpressionNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelExpression) {
			listener.enterLabelExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelExpression) {
			listener.exitLabelExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelExpression) {
			return visitor.visitLabelExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelExpressionNameContext extends ParserRuleContext {
	public labelExpression4ExpectingBar(): LabelExpression4ExpectingBarContext | undefined {
		return this.tryGetRuleContext(0, LabelExpression4ExpectingBarContext);
	}
	public labelExpression4(): LabelExpression4Context | undefined {
		return this.tryGetRuleContext(0, LabelExpression4Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelExpressionName; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelExpressionName) {
			listener.enterLabelExpressionName(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelExpressionName) {
			listener.exitLabelExpressionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelExpressionName) {
			return visitor.visitLabelExpressionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelExpression4Context extends ParserRuleContext {
	public labelExpression3(): LabelExpression3Context[];
	public labelExpression3(i: number): LabelExpression3Context;
	public labelExpression3(i?: number): LabelExpression3Context | LabelExpression3Context[] {
		if (i === undefined) {
			return this.getRuleContexts(LabelExpression3Context);
		} else {
			return this.getRuleContext(i, LabelExpression3Context);
		}
	}
	public BAR(): TerminalNode[];
	public BAR(i: number): TerminalNode;
	public BAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.BAR);
		} else {
			return this.getToken(CypherParser.BAR, i);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COLON);
		} else {
			return this.getToken(CypherParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelExpression4; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelExpression4) {
			listener.enterLabelExpression4(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelExpression4) {
			listener.exitLabelExpression4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelExpression4) {
			return visitor.visitLabelExpression4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelExpression4ExpectingBarContext extends ParserRuleContext {
	public labelExpression3(): LabelExpression3Context[];
	public labelExpression3(i: number): LabelExpression3Context;
	public labelExpression3(i?: number): LabelExpression3Context | LabelExpression3Context[] {
		if (i === undefined) {
			return this.getRuleContexts(LabelExpression3Context);
		} else {
			return this.getRuleContext(i, LabelExpression3Context);
		}
	}
	public BAR(): TerminalNode[];
	public BAR(i: number): TerminalNode;
	public BAR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.BAR);
		} else {
			return this.getToken(CypherParser.BAR, i);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COLON);
		} else {
			return this.getToken(CypherParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelExpression4ExpectingBar; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelExpression4ExpectingBar) {
			listener.enterLabelExpression4ExpectingBar(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelExpression4ExpectingBar) {
			listener.exitLabelExpression4ExpectingBar(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelExpression4ExpectingBar) {
			return visitor.visitLabelExpression4ExpectingBar(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelExpression3Context extends ParserRuleContext {
	public labelExpression2(): LabelExpression2Context[];
	public labelExpression2(i: number): LabelExpression2Context;
	public labelExpression2(i?: number): LabelExpression2Context | LabelExpression2Context[] {
		if (i === undefined) {
			return this.getRuleContexts(LabelExpression2Context);
		} else {
			return this.getRuleContext(i, LabelExpression2Context);
		}
	}
	public AMPERSAND(): TerminalNode[];
	public AMPERSAND(i: number): TerminalNode;
	public AMPERSAND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.AMPERSAND);
		} else {
			return this.getToken(CypherParser.AMPERSAND, i);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COLON);
		} else {
			return this.getToken(CypherParser.COLON, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelExpression3; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelExpression3) {
			listener.enterLabelExpression3(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelExpression3) {
			listener.exitLabelExpression3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelExpression3) {
			return visitor.visitLabelExpression3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelExpression2Context extends ParserRuleContext {
	public EXCLAMATION_MARK(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXCLAMATION_MARK, 0); }
	public labelExpression2(): LabelExpression2Context | undefined {
		return this.tryGetRuleContext(0, LabelExpression2Context);
	}
	public labelExpression1(): LabelExpression1Context | undefined {
		return this.tryGetRuleContext(0, LabelExpression1Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelExpression2; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelExpression2) {
			listener.enterLabelExpression2(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelExpression2) {
			listener.exitLabelExpression2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelExpression2) {
			return visitor.visitLabelExpression2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelExpression1Context extends ParserRuleContext {
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public labelExpression4(): LabelExpression4Context | undefined {
		return this.tryGetRuleContext(0, LabelExpression4Context);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	public PERCENT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PERCENT, 0); }
	public symbolicNameString(): SymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelExpression1; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelExpression1) {
			listener.enterLabelExpression1(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelExpression1) {
			listener.exitLabelExpression1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelExpression1) {
			return visitor.visitLabelExpression1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExpressionContext extends ParserRuleContext {
	public expression12(): Expression12Context {
		return this.getRuleContext(0, Expression12Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression) {
			listener.enterExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression) {
			listener.exitExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression) {
			return visitor.visitExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression12Context extends ParserRuleContext {
	public expression11(): Expression11Context[];
	public expression11(i: number): Expression11Context;
	public expression11(i?: number): Expression11Context | Expression11Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Expression11Context);
		} else {
			return this.getRuleContext(i, Expression11Context);
		}
	}
	public OR(): TerminalNode[];
	public OR(i: number): TerminalNode;
	public OR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.OR);
		} else {
			return this.getToken(CypherParser.OR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression12; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression12) {
			listener.enterExpression12(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression12) {
			listener.exitExpression12(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression12) {
			return visitor.visitExpression12(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression11Context extends ParserRuleContext {
	public expression10(): Expression10Context[];
	public expression10(i: number): Expression10Context;
	public expression10(i?: number): Expression10Context | Expression10Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Expression10Context);
		} else {
			return this.getRuleContext(i, Expression10Context);
		}
	}
	public XOR(): TerminalNode[];
	public XOR(i: number): TerminalNode;
	public XOR(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.XOR);
		} else {
			return this.getToken(CypherParser.XOR, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression11; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression11) {
			listener.enterExpression11(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression11) {
			listener.exitExpression11(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression11) {
			return visitor.visitExpression11(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression10Context extends ParserRuleContext {
	public expression9(): Expression9Context[];
	public expression9(i: number): Expression9Context;
	public expression9(i?: number): Expression9Context | Expression9Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Expression9Context);
		} else {
			return this.getRuleContext(i, Expression9Context);
		}
	}
	public AND(): TerminalNode[];
	public AND(i: number): TerminalNode;
	public AND(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.AND);
		} else {
			return this.getToken(CypherParser.AND, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression10; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression10) {
			listener.enterExpression10(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression10) {
			listener.exitExpression10(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression10) {
			return visitor.visitExpression10(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression9Context extends ParserRuleContext {
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public expression9(): Expression9Context | undefined {
		return this.tryGetRuleContext(0, Expression9Context);
	}
	public expression8(): Expression8Context | undefined {
		return this.tryGetRuleContext(0, Expression8Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression9; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression9) {
			listener.enterExpression9(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression9) {
			listener.exitExpression9(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression9) {
			return visitor.visitExpression9(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression8Context extends ParserRuleContext {
	public expression7(): Expression7Context[];
	public expression7(i: number): Expression7Context;
	public expression7(i?: number): Expression7Context | Expression7Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Expression7Context);
		} else {
			return this.getRuleContext(i, Expression7Context);
		}
	}
	public EQ(): TerminalNode[];
	public EQ(i: number): TerminalNode;
	public EQ(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.EQ);
		} else {
			return this.getToken(CypherParser.EQ, i);
		}
	}
	public NEQ(): TerminalNode[];
	public NEQ(i: number): TerminalNode;
	public NEQ(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.NEQ);
		} else {
			return this.getToken(CypherParser.NEQ, i);
		}
	}
	public NEQ2(): TerminalNode[];
	public NEQ2(i: number): TerminalNode;
	public NEQ2(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.NEQ2);
		} else {
			return this.getToken(CypherParser.NEQ2, i);
		}
	}
	public LE(): TerminalNode[];
	public LE(i: number): TerminalNode;
	public LE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.LE);
		} else {
			return this.getToken(CypherParser.LE, i);
		}
	}
	public GE(): TerminalNode[];
	public GE(i: number): TerminalNode;
	public GE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.GE);
		} else {
			return this.getToken(CypherParser.GE, i);
		}
	}
	public LT(): TerminalNode[];
	public LT(i: number): TerminalNode;
	public LT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.LT);
		} else {
			return this.getToken(CypherParser.LT, i);
		}
	}
	public GT(): TerminalNode[];
	public GT(i: number): TerminalNode;
	public GT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.GT);
		} else {
			return this.getToken(CypherParser.GT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression8; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression8) {
			listener.enterExpression8(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression8) {
			listener.exitExpression8(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression8) {
			return visitor.visitExpression8(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression7Context extends ParserRuleContext {
	public expression6(): Expression6Context {
		return this.getRuleContext(0, Expression6Context);
	}
	public comparisonExpression6(): ComparisonExpression6Context | undefined {
		return this.tryGetRuleContext(0, ComparisonExpression6Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression7; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression7) {
			listener.enterExpression7(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression7) {
			listener.exitExpression7(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression7) {
			return visitor.visitExpression7(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ComparisonExpression6Context extends ParserRuleContext {
	public REGEQ(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REGEQ, 0); }
	public expression6(): Expression6Context | undefined {
		return this.tryGetRuleContext(0, Expression6Context);
	}
	public STARTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.STARTS, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WITH, 0); }
	public ENDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ENDS, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONTAINS, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IN, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IS, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NULL, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_comparisonExpression6; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterComparisonExpression6) {
			listener.enterComparisonExpression6(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitComparisonExpression6) {
			listener.exitComparisonExpression6(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitComparisonExpression6) {
			return visitor.visitComparisonExpression6(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression6Context extends ParserRuleContext {
	public expression5(): Expression5Context[];
	public expression5(i: number): Expression5Context;
	public expression5(i?: number): Expression5Context | Expression5Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Expression5Context);
		} else {
			return this.getRuleContext(i, Expression5Context);
		}
	}
	public PLUS(): TerminalNode[];
	public PLUS(i: number): TerminalNode;
	public PLUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PLUS);
		} else {
			return this.getToken(CypherParser.PLUS, i);
		}
	}
	public MINUS(): TerminalNode[];
	public MINUS(i: number): TerminalNode;
	public MINUS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.MINUS);
		} else {
			return this.getToken(CypherParser.MINUS, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression6; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression6) {
			listener.enterExpression6(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression6) {
			listener.exitExpression6(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression6) {
			return visitor.visitExpression6(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression5Context extends ParserRuleContext {
	public expression4(): Expression4Context[];
	public expression4(i: number): Expression4Context;
	public expression4(i?: number): Expression4Context | Expression4Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Expression4Context);
		} else {
			return this.getRuleContext(i, Expression4Context);
		}
	}
	public TIMES(): TerminalNode[];
	public TIMES(i: number): TerminalNode;
	public TIMES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.TIMES);
		} else {
			return this.getToken(CypherParser.TIMES, i);
		}
	}
	public DIVIDE(): TerminalNode[];
	public DIVIDE(i: number): TerminalNode;
	public DIVIDE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.DIVIDE);
		} else {
			return this.getToken(CypherParser.DIVIDE, i);
		}
	}
	public PERCENT(): TerminalNode[];
	public PERCENT(i: number): TerminalNode;
	public PERCENT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PERCENT);
		} else {
			return this.getToken(CypherParser.PERCENT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression5; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression5) {
			listener.enterExpression5(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression5) {
			listener.exitExpression5(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression5) {
			return visitor.visitExpression5(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression4Context extends ParserRuleContext {
	public expression3(): Expression3Context[];
	public expression3(i: number): Expression3Context;
	public expression3(i?: number): Expression3Context | Expression3Context[] {
		if (i === undefined) {
			return this.getRuleContexts(Expression3Context);
		} else {
			return this.getRuleContext(i, Expression3Context);
		}
	}
	public POW(): TerminalNode[];
	public POW(i: number): TerminalNode;
	public POW(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.POW);
		} else {
			return this.getToken(CypherParser.POW, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression4; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression4) {
			listener.enterExpression4(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression4) {
			listener.exitExpression4(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression4) {
			return visitor.visitExpression4(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression3Context extends ParserRuleContext {
	public expression2(): Expression2Context | undefined {
		return this.tryGetRuleContext(0, Expression2Context);
	}
	public PLUS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PLUS, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression3; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression3) {
			listener.enterExpression3(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression3) {
			listener.exitExpression3(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression3) {
			return visitor.visitExpression3(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression2Context extends ParserRuleContext {
	public expression1(): Expression1Context {
		return this.getRuleContext(0, Expression1Context);
	}
	public postFix1(): PostFix1Context[];
	public postFix1(i: number): PostFix1Context;
	public postFix1(i?: number): PostFix1Context | PostFix1Context[] {
		if (i === undefined) {
			return this.getRuleContexts(PostFix1Context);
		} else {
			return this.getRuleContext(i, PostFix1Context);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression2; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression2) {
			listener.enterExpression2(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression2) {
			listener.exitExpression2(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression2) {
			return visitor.visitExpression2(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PostFix1Context extends ParserRuleContext {
	public property(): PropertyContext | undefined {
		return this.tryGetRuleContext(0, PropertyContext);
	}
	public labelExpressionPredicate(): LabelExpressionPredicateContext | undefined {
		return this.tryGetRuleContext(0, LabelExpressionPredicateContext);
	}
	public LBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LBRACKET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RBRACKET, 0); }
	public DOTDOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DOTDOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_postFix1; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPostFix1) {
			listener.enterPostFix1(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPostFix1) {
			listener.exitPostFix1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPostFix1) {
			return visitor.visitPostFix1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyContext extends ParserRuleContext {
	public DOT(): TerminalNode { return this.getToken(CypherParser.DOT, 0); }
	public propertyKeyName(): PropertyKeyNameContext {
		return this.getRuleContext(0, PropertyKeyNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_property; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterProperty) {
			listener.enterProperty(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitProperty) {
			listener.exitProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitProperty) {
			return visitor.visitProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyExpressionContext extends ParserRuleContext {
	public expression1(): Expression1Context {
		return this.getRuleContext(0, Expression1Context);
	}
	public property(): PropertyContext[];
	public property(i: number): PropertyContext;
	public property(i?: number): PropertyContext | PropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyContext);
		} else {
			return this.getRuleContext(i, PropertyContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_propertyExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPropertyExpression) {
			listener.enterPropertyExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPropertyExpression) {
			listener.exitPropertyExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPropertyExpression) {
			return visitor.visitPropertyExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Expression1Context extends ParserRuleContext {
	public literal(): LiteralContext | undefined {
		return this.tryGetRuleContext(0, LiteralContext);
	}
	public parameter(): ParameterContext | undefined {
		return this.tryGetRuleContext(0, ParameterContext);
	}
	public caseExpression(): CaseExpressionContext | undefined {
		return this.tryGetRuleContext(0, CaseExpressionContext);
	}
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COUNT, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	public existsExpression(): ExistsExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExistsExpressionContext);
	}
	public countExpression(): CountExpressionContext | undefined {
		return this.tryGetRuleContext(0, CountExpressionContext);
	}
	public mapProjection(): MapProjectionContext | undefined {
		return this.tryGetRuleContext(0, MapProjectionContext);
	}
	public listComprehension(): ListComprehensionContext | undefined {
		return this.tryGetRuleContext(0, ListComprehensionContext);
	}
	public patternComprehension(): PatternComprehensionContext | undefined {
		return this.tryGetRuleContext(0, PatternComprehensionContext);
	}
	public reduceExpression(): ReduceExpressionContext | undefined {
		return this.tryGetRuleContext(0, ReduceExpressionContext);
	}
	public allExpression(): AllExpressionContext | undefined {
		return this.tryGetRuleContext(0, AllExpressionContext);
	}
	public anyExpression(): AnyExpressionContext | undefined {
		return this.tryGetRuleContext(0, AnyExpressionContext);
	}
	public noneExpression(): NoneExpressionContext | undefined {
		return this.tryGetRuleContext(0, NoneExpressionContext);
	}
	public singleExpression(): SingleExpressionContext | undefined {
		return this.tryGetRuleContext(0, SingleExpressionContext);
	}
	public patternExpression(): PatternExpressionContext | undefined {
		return this.tryGetRuleContext(0, PatternExpressionContext);
	}
	public shortestPathExpression(): ShortestPathExpressionContext | undefined {
		return this.tryGetRuleContext(0, ShortestPathExpressionContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public functionInvocation(): FunctionInvocationContext | undefined {
		return this.tryGetRuleContext(0, FunctionInvocationContext);
	}
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_expression1; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExpression1) {
			listener.enterExpression1(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExpression1) {
			listener.exitExpression1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExpression1) {
			return visitor.visitExpression1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LiteralContext extends ParserRuleContext {
	public numberLiteral(): NumberLiteralContext | undefined {
		return this.tryGetRuleContext(0, NumberLiteralContext);
	}
	public stringLiteral(): StringLiteralContext | undefined {
		return this.tryGetRuleContext(0, StringLiteralContext);
	}
	public mapLiteral(): MapLiteralContext | undefined {
		return this.tryGetRuleContext(0, MapLiteralContext);
	}
	public listLiteral(): ListLiteralContext | undefined {
		return this.tryGetRuleContext(0, ListLiteralContext);
	}
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRUE, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FALSE, 0); }
	public INFINITY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INFINITY, 0); }
	public INF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INF, 0); }
	public NAN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NAN, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NULL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_literal; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLiteral) {
			listener.enterLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLiteral) {
			listener.exitLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLiteral) {
			return visitor.visitLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CaseExpressionContext extends ParserRuleContext {
	public CASE(): TerminalNode { return this.getToken(CypherParser.CASE, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public THEN(): TerminalNode[];
	public THEN(i: number): TerminalNode;
	public THEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.THEN);
		} else {
			return this.getToken(CypherParser.THEN, i);
		}
	}
	public END(): TerminalNode { return this.getToken(CypherParser.END, 0); }
	public WHEN(): TerminalNode[];
	public WHEN(i: number): TerminalNode;
	public WHEN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.WHEN);
		} else {
			return this.getToken(CypherParser.WHEN, i);
		}
	}
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ELSE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_caseExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCaseExpression) {
			listener.enterCaseExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCaseExpression) {
			listener.exitCaseExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCaseExpression) {
			return visitor.visitCaseExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ListComprehensionContext extends ParserRuleContext {
	public LBRACKET(): TerminalNode { return this.getToken(CypherParser.LBRACKET, 0); }
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	public IN(): TerminalNode { return this.getToken(CypherParser.IN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RBRACKET(): TerminalNode { return this.getToken(CypherParser.RBRACKET, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	public BAR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BAR, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_listComprehension; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterListComprehension) {
			listener.enterListComprehension(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitListComprehension) {
			listener.exitListComprehension(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitListComprehension) {
			return visitor.visitListComprehension(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PatternComprehensionContext extends ParserRuleContext {
	public LBRACKET(): TerminalNode { return this.getToken(CypherParser.LBRACKET, 0); }
	public everyPathPatternNonEmpty(): EveryPathPatternNonEmptyContext {
		return this.getRuleContext(0, EveryPathPatternNonEmptyContext);
	}
	public BAR(): TerminalNode { return this.getToken(CypherParser.BAR, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RBRACKET(): TerminalNode { return this.getToken(CypherParser.RBRACKET, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EQ, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_patternComprehension; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPatternComprehension) {
			listener.enterPatternComprehension(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPatternComprehension) {
			listener.exitPatternComprehension(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPatternComprehension) {
			return visitor.visitPatternComprehension(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PatternComprehensionPrefixContext extends ParserRuleContext {
	public LBRACKET(): TerminalNode { return this.getToken(CypherParser.LBRACKET, 0); }
	public everyPathPattern(): EveryPathPatternContext {
		return this.getRuleContext(0, EveryPathPatternContext);
	}
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	public BAR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BAR, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public EQ(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EQ, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_patternComprehensionPrefix; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPatternComprehensionPrefix) {
			listener.enterPatternComprehensionPrefix(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPatternComprehensionPrefix) {
			listener.exitPatternComprehensionPrefix(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPatternComprehensionPrefix) {
			return visitor.visitPatternComprehensionPrefix(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReduceExpressionContext extends ParserRuleContext {
	public REDUCE(): TerminalNode { return this.getToken(CypherParser.REDUCE, 0); }
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public variable(): VariableContext[];
	public variable(i: number): VariableContext;
	public variable(i?: number): VariableContext | VariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableContext);
		} else {
			return this.getRuleContext(i, VariableContext);
		}
	}
	public EQ(): TerminalNode { return this.getToken(CypherParser.EQ, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode { return this.getToken(CypherParser.COMMA, 0); }
	public IN(): TerminalNode { return this.getToken(CypherParser.IN, 0); }
	public BAR(): TerminalNode { return this.getToken(CypherParser.BAR, 0); }
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_reduceExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterReduceExpression) {
			listener.enterReduceExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitReduceExpression) {
			listener.exitReduceExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitReduceExpression) {
			return visitor.visitReduceExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AllExpressionContext extends ParserRuleContext {
	public ALL(): TerminalNode { return this.getToken(CypherParser.ALL, 0); }
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	public IN(): TerminalNode { return this.getToken(CypherParser.IN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_allExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAllExpression) {
			listener.enterAllExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAllExpression) {
			listener.exitAllExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAllExpression) {
			return visitor.visitAllExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AnyExpressionContext extends ParserRuleContext {
	public ANY(): TerminalNode { return this.getToken(CypherParser.ANY, 0); }
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	public IN(): TerminalNode { return this.getToken(CypherParser.IN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_anyExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAnyExpression) {
			listener.enterAnyExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAnyExpression) {
			listener.exitAnyExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAnyExpression) {
			return visitor.visitAnyExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NoneExpressionContext extends ParserRuleContext {
	public NONE(): TerminalNode { return this.getToken(CypherParser.NONE, 0); }
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	public IN(): TerminalNode { return this.getToken(CypherParser.IN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_noneExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterNoneExpression) {
			listener.enterNoneExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitNoneExpression) {
			listener.exitNoneExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitNoneExpression) {
			return visitor.visitNoneExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SingleExpressionContext extends ParserRuleContext {
	public SINGLE(): TerminalNode { return this.getToken(CypherParser.SINGLE, 0); }
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	public IN(): TerminalNode { return this.getToken(CypherParser.IN, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_singleExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSingleExpression) {
			listener.enterSingleExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSingleExpression) {
			listener.exitSingleExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSingleExpression) {
			return visitor.visitSingleExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PatternExpressionContext extends ParserRuleContext {
	public everyPathPatternNonEmpty(): EveryPathPatternNonEmptyContext {
		return this.getRuleContext(0, EveryPathPatternNonEmptyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_patternExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPatternExpression) {
			listener.enterPatternExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPatternExpression) {
			listener.exitPatternExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPatternExpression) {
			return visitor.visitPatternExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShortestPathExpressionContext extends ParserRuleContext {
	public shortestPathPattern(): ShortestPathPatternContext {
		return this.getRuleContext(0, ShortestPathPatternContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_shortestPathExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShortestPathExpression) {
			listener.enterShortestPathExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShortestPathExpression) {
			listener.exitShortestPathExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShortestPathExpression) {
			return visitor.visitShortestPathExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapProjectionContext extends ParserRuleContext {
	public variable(): VariableContext {
		return this.getRuleContext(0, VariableContext);
	}
	public LCURLY(): TerminalNode { return this.getToken(CypherParser.LCURLY, 0); }
	public RCURLY(): TerminalNode { return this.getToken(CypherParser.RCURLY, 0); }
	public mapProjectionItem(): MapProjectionItemContext[];
	public mapProjectionItem(i: number): MapProjectionItemContext;
	public mapProjectionItem(i?: number): MapProjectionItemContext | MapProjectionItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MapProjectionItemContext);
		} else {
			return this.getRuleContext(i, MapProjectionItemContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_mapProjection; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterMapProjection) {
			listener.enterMapProjection(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitMapProjection) {
			listener.exitMapProjection(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitMapProjection) {
			return visitor.visitMapProjection(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapProjectionItemContext extends ParserRuleContext {
	public propertyKeyName(): PropertyKeyNameContext | undefined {
		return this.tryGetRuleContext(0, PropertyKeyNameContext);
	}
	public COLON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COLON, 0); }
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	public DOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DOT, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_mapProjectionItem; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterMapProjectionItem) {
			listener.enterMapProjectionItem(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitMapProjectionItem) {
			listener.exitMapProjectionItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitMapProjectionItem) {
			return visitor.visitMapProjectionItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExistsExpressionContext extends ParserRuleContext {
	public EXISTS(): TerminalNode { return this.getToken(CypherParser.EXISTS, 0); }
	public LCURLY(): TerminalNode { return this.getToken(CypherParser.LCURLY, 0); }
	public RCURLY(): TerminalNode { return this.getToken(CypherParser.RCURLY, 0); }
	public regularQuery(): RegularQueryContext | undefined {
		return this.tryGetRuleContext(0, RegularQueryContext);
	}
	public patternList(): PatternListContext | undefined {
		return this.tryGetRuleContext(0, PatternListContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_existsExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExistsExpression) {
			listener.enterExistsExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExistsExpression) {
			listener.exitExistsExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExistsExpression) {
			return visitor.visitExistsExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CountExpressionContext extends ParserRuleContext {
	public COUNT(): TerminalNode { return this.getToken(CypherParser.COUNT, 0); }
	public LCURLY(): TerminalNode { return this.getToken(CypherParser.LCURLY, 0); }
	public RCURLY(): TerminalNode { return this.getToken(CypherParser.RCURLY, 0); }
	public regularQuery(): RegularQueryContext | undefined {
		return this.tryGetRuleContext(0, RegularQueryContext);
	}
	public patternList(): PatternListContext | undefined {
		return this.tryGetRuleContext(0, PatternListContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_countExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCountExpression) {
			listener.enterCountExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCountExpression) {
			listener.exitCountExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCountExpression) {
			return visitor.visitCountExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringLiteralContext extends ParserRuleContext {
	public stringToken(): StringTokenContext {
		return this.getRuleContext(0, StringTokenContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_stringLiteral; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStringLiteral) {
			listener.enterStringLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStringLiteral) {
			listener.exitStringLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStringLiteral) {
			return visitor.visitStringLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NumberLiteralContext extends ParserRuleContext {
	public DECIMAL_DOUBLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DECIMAL_DOUBLE, 0); }
	public UNSIGNED_DECIMAL_INTEGER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0); }
	public UNSIGNED_HEX_INTEGER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNSIGNED_HEX_INTEGER, 0); }
	public UNSIGNED_OCTAL_INTEGER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNSIGNED_OCTAL_INTEGER, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_numberLiteral; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterNumberLiteral) {
			listener.enterNumberLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitNumberLiteral) {
			listener.exitNumberLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitNumberLiteral) {
			return visitor.visitNumberLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SignedIntegerLiteralContext extends ParserRuleContext {
	public UNSIGNED_DECIMAL_INTEGER(): TerminalNode { return this.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0); }
	public MINUS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MINUS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_signedIntegerLiteral; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSignedIntegerLiteral) {
			listener.enterSignedIntegerLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSignedIntegerLiteral) {
			listener.exitSignedIntegerLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSignedIntegerLiteral) {
			return visitor.visitSignedIntegerLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ListLiteralContext extends ParserRuleContext {
	public LBRACKET(): TerminalNode { return this.getToken(CypherParser.LBRACKET, 0); }
	public RBRACKET(): TerminalNode { return this.getToken(CypherParser.RBRACKET, 0); }
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_listLiteral; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterListLiteral) {
			listener.enterListLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitListLiteral) {
			listener.exitListLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitListLiteral) {
			return visitor.visitListLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapLiteralContext extends ParserRuleContext {
	public LCURLY(): TerminalNode { return this.getToken(CypherParser.LCURLY, 0); }
	public RCURLY(): TerminalNode { return this.getToken(CypherParser.RCURLY, 0); }
	public propertyKeyName(): PropertyKeyNameContext[];
	public propertyKeyName(i: number): PropertyKeyNameContext;
	public propertyKeyName(i?: number): PropertyKeyNameContext | PropertyKeyNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyKeyNameContext);
		} else {
			return this.getRuleContext(i, PropertyKeyNameContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COLON);
		} else {
			return this.getToken(CypherParser.COLON, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_mapLiteral; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterMapLiteral) {
			listener.enterMapLiteral(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitMapLiteral) {
			listener.exitMapLiteral(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitMapLiteral) {
			return visitor.visitMapLiteral(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyKeyNameContext extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext {
		return this.getRuleContext(0, SymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_propertyKeyName; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPropertyKeyName) {
			listener.enterPropertyKeyName(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPropertyKeyName) {
			listener.exitPropertyKeyName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPropertyKeyName) {
			return visitor.visitPropertyKeyName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ParameterContext extends ParserRuleContext {
	public DOLLAR(): TerminalNode { return this.getToken(CypherParser.DOLLAR, 0); }
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public UNSIGNED_DECIMAL_INTEGER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_parameter; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterParameter) {
			listener.enterParameter(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitParameter) {
			listener.exitParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitParameter) {
			return visitor.visitParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionInvocationContext extends ParserRuleContext {
	public functionName(): FunctionNameContext {
		return this.getRuleContext(0, FunctionNameContext);
	}
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DISTINCT, 0); }
	public functionArgument(): FunctionArgumentContext[];
	public functionArgument(i: number): FunctionArgumentContext;
	public functionArgument(i?: number): FunctionArgumentContext | FunctionArgumentContext[] {
		if (i === undefined) {
			return this.getRuleContexts(FunctionArgumentContext);
		} else {
			return this.getRuleContext(i, FunctionArgumentContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_functionInvocation; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterFunctionInvocation) {
			listener.enterFunctionInvocation(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitFunctionInvocation) {
			listener.exitFunctionInvocation(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitFunctionInvocation) {
			return visitor.visitFunctionInvocation(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionNameContext extends ParserRuleContext {
	public namespace(): NamespaceContext {
		return this.getRuleContext(0, NamespaceContext);
	}
	public symbolicNameString(): SymbolicNameStringContext {
		return this.getRuleContext(0, SymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_functionName; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterFunctionName) {
			listener.enterFunctionName(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitFunctionName) {
			listener.exitFunctionName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitFunctionName) {
			return visitor.visitFunctionName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class FunctionArgumentContext extends ParserRuleContext {
	public expression(): ExpressionContext {
		return this.getRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_functionArgument; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterFunctionArgument) {
			listener.enterFunctionArgument(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitFunctionArgument) {
			listener.exitFunctionArgument(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitFunctionArgument) {
			return visitor.visitFunctionArgument(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class NamespaceContext extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.DOT);
		} else {
			return this.getToken(CypherParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_namespace; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterNamespace) {
			listener.enterNamespace(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitNamespace) {
			listener.exitNamespace(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitNamespace) {
			return visitor.visitNamespace(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VariableList1Context extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_variableList1; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterVariableList1) {
			listener.enterVariableList1(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitVariableList1) {
			listener.exitVariableList1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitVariableList1) {
			return visitor.visitVariableList1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class VariableContext extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext {
		return this.getRuleContext(0, SymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_variable; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterVariable) {
			listener.enterVariable(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitVariable) {
			listener.exitVariable(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitVariable) {
			return visitor.visitVariable(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicNameList1Context extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_symbolicNameList1; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSymbolicNameList1) {
			listener.enterSymbolicNameList1(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSymbolicNameList1) {
			listener.exitSymbolicNameList1(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSymbolicNameList1) {
			return visitor.visitSymbolicNameList1(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateCommandContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(CypherParser.CREATE, 0); }
	public createRole(): CreateRoleContext | undefined {
		return this.tryGetRuleContext(0, CreateRoleContext);
	}
	public createUser(): CreateUserContext | undefined {
		return this.tryGetRuleContext(0, CreateUserContext);
	}
	public createDatabase(): CreateDatabaseContext | undefined {
		return this.tryGetRuleContext(0, CreateDatabaseContext);
	}
	public createConstraint(): CreateConstraintContext | undefined {
		return this.tryGetRuleContext(0, CreateConstraintContext);
	}
	public createIndex(): CreateIndexContext | undefined {
		return this.tryGetRuleContext(0, CreateIndexContext);
	}
	public createAlias(): CreateAliasContext | undefined {
		return this.tryGetRuleContext(0, CreateAliasContext);
	}
	public createCompositeDatabase(): CreateCompositeDatabaseContext | undefined {
		return this.tryGetRuleContext(0, CreateCompositeDatabaseContext);
	}
	public OR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OR, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REPLACE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateCommand) {
			listener.enterCreateCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateCommand) {
			listener.exitCreateCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateCommand) {
			return visitor.visitCreateCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommandContext extends ParserRuleContext {
	public commandWithUseGraph(): CommandWithUseGraphContext | undefined {
		return this.tryGetRuleContext(0, CommandWithUseGraphContext);
	}
	public showCommand(): ShowCommandContext | undefined {
		return this.tryGetRuleContext(0, ShowCommandContext);
	}
	public terminateCommand(): TerminateCommandContext | undefined {
		return this.tryGetRuleContext(0, TerminateCommandContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_command; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCommand) {
			listener.enterCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCommand) {
			listener.exitCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCommand) {
			return visitor.visitCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CommandWithUseGraphContext extends ParserRuleContext {
	public dropCommand(): DropCommandContext | undefined {
		return this.tryGetRuleContext(0, DropCommandContext);
	}
	public alterCommand(): AlterCommandContext | undefined {
		return this.tryGetRuleContext(0, AlterCommandContext);
	}
	public renameCommand(): RenameCommandContext | undefined {
		return this.tryGetRuleContext(0, RenameCommandContext);
	}
	public denyPrivilege(): DenyPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DenyPrivilegeContext);
	}
	public revokeCommand(): RevokeCommandContext | undefined {
		return this.tryGetRuleContext(0, RevokeCommandContext);
	}
	public grantCommand(): GrantCommandContext | undefined {
		return this.tryGetRuleContext(0, GrantCommandContext);
	}
	public startDatabase(): StartDatabaseContext | undefined {
		return this.tryGetRuleContext(0, StartDatabaseContext);
	}
	public stopDatabase(): StopDatabaseContext | undefined {
		return this.tryGetRuleContext(0, StopDatabaseContext);
	}
	public enableServerCommand(): EnableServerCommandContext | undefined {
		return this.tryGetRuleContext(0, EnableServerCommandContext);
	}
	public allocationCommand(): AllocationCommandContext | undefined {
		return this.tryGetRuleContext(0, AllocationCommandContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_commandWithUseGraph; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCommandWithUseGraph) {
			listener.enterCommandWithUseGraph(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCommandWithUseGraph) {
			listener.exitCommandWithUseGraph(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCommandWithUseGraph) {
			return visitor.visitCommandWithUseGraph(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropCommandContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(CypherParser.DROP, 0); }
	public dropRole(): DropRoleContext | undefined {
		return this.tryGetRuleContext(0, DropRoleContext);
	}
	public dropUser(): DropUserContext | undefined {
		return this.tryGetRuleContext(0, DropUserContext);
	}
	public dropDatabase(): DropDatabaseContext | undefined {
		return this.tryGetRuleContext(0, DropDatabaseContext);
	}
	public dropConstraint(): DropConstraintContext | undefined {
		return this.tryGetRuleContext(0, DropConstraintContext);
	}
	public dropIndex(): DropIndexContext | undefined {
		return this.tryGetRuleContext(0, DropIndexContext);
	}
	public dropAlias(): DropAliasContext | undefined {
		return this.tryGetRuleContext(0, DropAliasContext);
	}
	public dropServer(): DropServerContext | undefined {
		return this.tryGetRuleContext(0, DropServerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dropCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDropCommand) {
			listener.enterDropCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDropCommand) {
			listener.exitDropCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDropCommand) {
			return visitor.visitDropCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterCommandContext extends ParserRuleContext {
	public ALTER(): TerminalNode { return this.getToken(CypherParser.ALTER, 0); }
	public alterDatabase(): AlterDatabaseContext | undefined {
		return this.tryGetRuleContext(0, AlterDatabaseContext);
	}
	public alterAlias(): AlterAliasContext | undefined {
		return this.tryGetRuleContext(0, AlterAliasContext);
	}
	public alterCurrentUser(): AlterCurrentUserContext | undefined {
		return this.tryGetRuleContext(0, AlterCurrentUserContext);
	}
	public alterUser(): AlterUserContext | undefined {
		return this.tryGetRuleContext(0, AlterUserContext);
	}
	public alterServer(): AlterServerContext | undefined {
		return this.tryGetRuleContext(0, AlterServerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_alterCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAlterCommand) {
			listener.enterAlterCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAlterCommand) {
			listener.exitAlterCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAlterCommand) {
			return visitor.visitAlterCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCommandContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(CypherParser.SHOW, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALL, 0); }
	public showAllCommand(): ShowAllCommandContext | undefined {
		return this.tryGetRuleContext(0, ShowAllCommandContext);
	}
	public POPULATED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.POPULATED, 0); }
	public showRoles(): ShowRolesContext | undefined {
		return this.tryGetRuleContext(0, ShowRolesContext);
	}
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BTREE, 0); }
	public showIndexesAllowBrief(): ShowIndexesAllowBriefContext | undefined {
		return this.tryGetRuleContext(0, ShowIndexesAllowBriefContext);
	}
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RANGE, 0); }
	public showIndexesNoBrief(): ShowIndexesNoBriefContext | undefined {
		return this.tryGetRuleContext(0, ShowIndexesNoBriefContext);
	}
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FULLTEXT, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TEXT, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.POINT, 0); }
	public LOOKUP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LOOKUP, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUE, 0); }
	public showConstraintsAllowBriefAndYield(): ShowConstraintsAllowBriefAndYieldContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowBriefAndYieldContext);
	}
	public UNIQUENESS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUENESS, 0); }
	public showConstraintsAllowYield(): ShowConstraintsAllowYieldContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowYieldContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.KEY, 0); }
	public NODE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NODE, 0); }
	public showNodeCommand(): ShowNodeCommandContext | undefined {
		return this.tryGetRuleContext(0, ShowNodeCommandContext);
	}
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROPERTY, 0); }
	public showPropertyCommand(): ShowPropertyCommandContext | undefined {
		return this.tryGetRuleContext(0, ShowPropertyCommandContext);
	}
	public EXISTENCE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTENCE, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public showConstraintsAllowBrief(): ShowConstraintsAllowBriefContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowBriefContext);
	}
	public EXIST(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXIST, 0); }
	public RELATIONSHIP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RELATIONSHIP, 0); }
	public showRelationshipCommand(): ShowRelationshipCommandContext | undefined {
		return this.tryGetRuleContext(0, ShowRelationshipCommandContext);
	}
	public REL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REL, 0); }
	public showRelCommand(): ShowRelCommandContext | undefined {
		return this.tryGetRuleContext(0, ShowRelCommandContext);
	}
	public BUILT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BUILT, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IN, 0); }
	public showFunctions(): ShowFunctionsContext | undefined {
		return this.tryGetRuleContext(0, ShowFunctionsContext);
	}
	public showDatabase(): ShowDatabaseContext | undefined {
		return this.tryGetRuleContext(0, ShowDatabaseContext);
	}
	public showCurrentUser(): ShowCurrentUserContext | undefined {
		return this.tryGetRuleContext(0, ShowCurrentUserContext);
	}
	public showProcedures(): ShowProceduresContext | undefined {
		return this.tryGetRuleContext(0, ShowProceduresContext);
	}
	public showSettings(): ShowSettingsContext | undefined {
		return this.tryGetRuleContext(0, ShowSettingsContext);
	}
	public showTransactions(): ShowTransactionsContext | undefined {
		return this.tryGetRuleContext(0, ShowTransactionsContext);
	}
	public showAliases(): ShowAliasesContext | undefined {
		return this.tryGetRuleContext(0, ShowAliasesContext);
	}
	public showServers(): ShowServersContext | undefined {
		return this.tryGetRuleContext(0, ShowServersContext);
	}
	public showPrivileges(): ShowPrivilegesContext | undefined {
		return this.tryGetRuleContext(0, ShowPrivilegesContext);
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public DEFINED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DEFINED, 0); }
	public ROLES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLES, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	public USERS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USERS, 0); }
	public showRolePrivileges(): ShowRolePrivilegesContext | undefined {
		return this.tryGetRuleContext(0, ShowRolePrivilegesContext);
	}
	public showUserPrivileges(): ShowUserPrivilegesContext | undefined {
		return this.tryGetRuleContext(0, ShowUserPrivilegesContext);
	}
	public showUsers(): ShowUsersContext | undefined {
		return this.tryGetRuleContext(0, ShowUsersContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowCommand) {
			listener.enterShowCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowCommand) {
			listener.exitShowCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowCommand) {
			return visitor.visitShowCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TerminateCommandContext extends ParserRuleContext {
	public TERMINATE(): TerminalNode { return this.getToken(CypherParser.TERMINATE, 0); }
	public terminateTransactions(): TerminateTransactionsContext {
		return this.getRuleContext(0, TerminateTransactionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_terminateCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterTerminateCommand) {
			listener.enterTerminateCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitTerminateCommand) {
			listener.exitTerminateCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitTerminateCommand) {
			return visitor.visitTerminateCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowAllCommandContext extends ParserRuleContext {
	public showRoles(): ShowRolesContext | undefined {
		return this.tryGetRuleContext(0, ShowRolesContext);
	}
	public showIndexesAllowBrief(): ShowIndexesAllowBriefContext | undefined {
		return this.tryGetRuleContext(0, ShowIndexesAllowBriefContext);
	}
	public showConstraintsAllowBriefAndYield(): ShowConstraintsAllowBriefAndYieldContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowBriefAndYieldContext);
	}
	public showFunctions(): ShowFunctionsContext | undefined {
		return this.tryGetRuleContext(0, ShowFunctionsContext);
	}
	public showPrivileges(): ShowPrivilegesContext | undefined {
		return this.tryGetRuleContext(0, ShowPrivilegesContext);
	}
	public ROLES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLES, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showAllCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowAllCommand) {
			listener.enterShowAllCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowAllCommand) {
			listener.exitShowAllCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowAllCommand) {
			return visitor.visitShowAllCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowNodeCommandContext extends ParserRuleContext {
	public showConstraintsAllowYield(): ShowConstraintsAllowYieldContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowYieldContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.KEY, 0); }
	public showConstraintsAllowBriefAndYield(): ShowConstraintsAllowBriefAndYieldContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowBriefAndYieldContext);
	}
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROPERTY, 0); }
	public showPropertyCommand(): ShowPropertyCommandContext | undefined {
		return this.tryGetRuleContext(0, ShowPropertyCommandContext);
	}
	public EXISTENCE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTENCE, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public showConstraintsAllowBrief(): ShowConstraintsAllowBriefContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowBriefContext);
	}
	public EXIST(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXIST, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUE, 0); }
	public UNIQUENESS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUENESS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showNodeCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowNodeCommand) {
			listener.enterShowNodeCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowNodeCommand) {
			listener.exitShowNodeCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowNodeCommand) {
			return visitor.visitShowNodeCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRelationshipCommandContext extends ParserRuleContext {
	public showConstraintsAllowYield(): ShowConstraintsAllowYieldContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowYieldContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.KEY, 0); }
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROPERTY, 0); }
	public showPropertyCommand(): ShowPropertyCommandContext | undefined {
		return this.tryGetRuleContext(0, ShowPropertyCommandContext);
	}
	public EXISTENCE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTENCE, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public showConstraintsAllowBrief(): ShowConstraintsAllowBriefContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowBriefContext);
	}
	public EXIST(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXIST, 0); }
	public showConstraintsAllowBriefAndYield(): ShowConstraintsAllowBriefAndYieldContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowBriefAndYieldContext);
	}
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUE, 0); }
	public UNIQUENESS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUENESS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showRelationshipCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowRelationshipCommand) {
			listener.enterShowRelationshipCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowRelationshipCommand) {
			listener.exitShowRelationshipCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowRelationshipCommand) {
			return visitor.visitShowRelationshipCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRelCommandContext extends ParserRuleContext {
	public showConstraintsAllowYield(): ShowConstraintsAllowYieldContext | undefined {
		return this.tryGetRuleContext(0, ShowConstraintsAllowYieldContext);
	}
	public KEY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.KEY, 0); }
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROPERTY, 0); }
	public showPropertyCommand(): ShowPropertyCommandContext | undefined {
		return this.tryGetRuleContext(0, ShowPropertyCommandContext);
	}
	public EXISTENCE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTENCE, 0); }
	public EXIST(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXIST, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUE, 0); }
	public UNIQUENESS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUENESS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showRelCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowRelCommand) {
			listener.enterShowRelCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowRelCommand) {
			listener.exitShowRelCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowRelCommand) {
			return visitor.visitShowRelCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowPropertyCommandContext extends ParserRuleContext {
	public showConstraintsAllowYield(): ShowConstraintsAllowYieldContext {
		return this.getRuleContext(0, ShowConstraintsAllowYieldContext);
	}
	public EXISTENCE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTENCE, 0); }
	public EXIST(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXIST, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showPropertyCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowPropertyCommand) {
			listener.enterShowPropertyCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowPropertyCommand) {
			listener.exitShowPropertyCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowPropertyCommand) {
			return visitor.visitShowPropertyCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class YieldItemContext extends ParserRuleContext {
	public variable(): VariableContext[];
	public variable(i: number): VariableContext;
	public variable(i?: number): VariableContext | VariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableContext);
		} else {
			return this.getRuleContext(i, VariableContext);
		}
	}
	public AS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_yieldItem; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterYieldItem) {
			listener.enterYieldItem(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitYieldItem) {
			listener.exitYieldItem(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitYieldItem) {
			return visitor.visitYieldItem(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class YieldClauseContext extends ParserRuleContext {
	public YIELD(): TerminalNode { return this.getToken(CypherParser.YIELD, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public yieldItem(): YieldItemContext[];
	public yieldItem(i: number): YieldItemContext;
	public yieldItem(i?: number): YieldItemContext | YieldItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(YieldItemContext);
		} else {
			return this.getRuleContext(i, YieldItemContext);
		}
	}
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ORDER, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BY, 0); }
	public orderItem(): OrderItemContext[];
	public orderItem(i: number): OrderItemContext;
	public orderItem(i?: number): OrderItemContext | OrderItemContext[] {
		if (i === undefined) {
			return this.getRuleContexts(OrderItemContext);
		} else {
			return this.getRuleContext(i, OrderItemContext);
		}
	}
	public SKIPROWS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SKIPROWS, 0); }
	public signedIntegerLiteral(): SignedIntegerLiteralContext[];
	public signedIntegerLiteral(i: number): SignedIntegerLiteralContext;
	public signedIntegerLiteral(i?: number): SignedIntegerLiteralContext | SignedIntegerLiteralContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SignedIntegerLiteralContext);
		} else {
			return this.getRuleContext(i, SignedIntegerLiteralContext);
		}
	}
	public LIMITROWS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LIMITROWS, 0); }
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_yieldClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterYieldClause) {
			listener.enterYieldClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitYieldClause) {
			listener.exitYieldClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitYieldClause) {
			return visitor.visitYieldClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowIndexesAllowBriefContext extends ParserRuleContext {
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEXES, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public BRIEF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BRIEF, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.VERBOSE, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OUTPUT, 0); }
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showIndexesAllowBrief; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowIndexesAllowBrief) {
			listener.enterShowIndexesAllowBrief(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowIndexesAllowBrief) {
			listener.exitShowIndexesAllowBrief(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowIndexesAllowBrief) {
			return visitor.visitShowIndexesAllowBrief(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowIndexesNoBriefContext extends ParserRuleContext {
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEXES, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showIndexesNoBrief; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowIndexesNoBrief) {
			listener.enterShowIndexesNoBrief(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowIndexesNoBrief) {
			listener.exitShowIndexesNoBrief(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowIndexesNoBrief) {
			return visitor.visitShowIndexesNoBrief(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowConstraintsAllowBriefAndYieldContext extends ParserRuleContext {
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINT, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINTS, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public BRIEF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BRIEF, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.VERBOSE, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OUTPUT, 0); }
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showConstraintsAllowBriefAndYield; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowConstraintsAllowBriefAndYield) {
			listener.enterShowConstraintsAllowBriefAndYield(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowConstraintsAllowBriefAndYield) {
			listener.exitShowConstraintsAllowBriefAndYield(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowConstraintsAllowBriefAndYield) {
			return visitor.visitShowConstraintsAllowBriefAndYield(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowConstraintsAllowBriefContext extends ParserRuleContext {
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINT, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINTS, 0); }
	public BRIEF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BRIEF, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.VERBOSE, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OUTPUT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showConstraintsAllowBrief; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowConstraintsAllowBrief) {
			listener.enterShowConstraintsAllowBrief(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowConstraintsAllowBrief) {
			listener.exitShowConstraintsAllowBrief(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowConstraintsAllowBrief) {
			return visitor.visitShowConstraintsAllowBrief(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowConstraintsAllowYieldContext extends ParserRuleContext {
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINT, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINTS, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showConstraintsAllowYield; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowConstraintsAllowYield) {
			listener.enterShowConstraintsAllowYield(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowConstraintsAllowYield) {
			listener.exitShowConstraintsAllowYield(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowConstraintsAllowYield) {
			return visitor.visitShowConstraintsAllowYield(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowProceduresContext extends ParserRuleContext {
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROCEDURE, 0); }
	public PROCEDURES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROCEDURES, 0); }
	public EXECUTABLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXECUTABLE, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BY, 0); }
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CURRENT, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public symbolicNameString(): SymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showProcedures; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowProcedures) {
			listener.enterShowProcedures(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowProcedures) {
			listener.exitShowProcedures(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowProcedures) {
			return visitor.visitShowProcedures(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowFunctionsContext extends ParserRuleContext {
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FUNCTION, 0); }
	public FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FUNCTIONS, 0); }
	public EXECUTABLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXECUTABLE, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public BY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BY, 0); }
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CURRENT, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public symbolicNameString(): SymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showFunctions; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowFunctions) {
			listener.enterShowFunctions(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowFunctions) {
			listener.exitShowFunctions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowFunctions) {
			return visitor.visitShowFunctions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowTransactionsContext extends ParserRuleContext {
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTION, 0); }
	public TRANSACTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTIONS, 0); }
	public showOrTerminateTransactions(): ShowOrTerminateTransactionsContext | undefined {
		return this.tryGetRuleContext(0, ShowOrTerminateTransactionsContext);
	}
	public stringsOrExpression(): StringsOrExpressionContext | undefined {
		return this.tryGetRuleContext(0, StringsOrExpressionContext);
	}
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showTransactions; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowTransactions) {
			listener.enterShowTransactions(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowTransactions) {
			listener.exitShowTransactions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowTransactions) {
			return visitor.visitShowTransactions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class TerminateTransactionsContext extends ParserRuleContext {
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTION, 0); }
	public TRANSACTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTIONS, 0); }
	public showOrTerminateTransactions(): ShowOrTerminateTransactionsContext | undefined {
		return this.tryGetRuleContext(0, ShowOrTerminateTransactionsContext);
	}
	public stringsOrExpression(): StringsOrExpressionContext | undefined {
		return this.tryGetRuleContext(0, StringsOrExpressionContext);
	}
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_terminateTransactions; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterTerminateTransactions) {
			listener.enterTerminateTransactions(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitTerminateTransactions) {
			listener.exitTerminateTransactions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitTerminateTransactions) {
			return visitor.visitTerminateTransactions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowOrTerminateTransactionsContext extends ParserRuleContext {
	public TERMINATE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TERMINATE, 0); }
	public terminateTransactions(): TerminateTransactionsContext | undefined {
		return this.tryGetRuleContext(0, TerminateTransactionsContext);
	}
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SHOW, 0); }
	public showTransactions(): ShowTransactionsContext | undefined {
		return this.tryGetRuleContext(0, ShowTransactionsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showOrTerminateTransactions; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowOrTerminateTransactions) {
			listener.enterShowOrTerminateTransactions(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowOrTerminateTransactions) {
			listener.exitShowOrTerminateTransactions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowOrTerminateTransactions) {
			return visitor.visitShowOrTerminateTransactions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringsOrExpressionContext extends ParserRuleContext {
	public stringList(): StringListContext | undefined {
		return this.tryGetRuleContext(0, StringListContext);
	}
	public expression(): ExpressionContext | undefined {
		return this.tryGetRuleContext(0, ExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_stringsOrExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStringsOrExpression) {
			listener.enterStringsOrExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStringsOrExpression) {
			listener.exitStringsOrExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStringsOrExpression) {
			return visitor.visitStringsOrExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowSettingsContext extends ParserRuleContext {
	public SETTING(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SETTING, 0); }
	public SETTINGS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SETTINGS, 0); }
	public stringsOrExpression(): StringsOrExpressionContext | undefined {
		return this.tryGetRuleContext(0, StringsOrExpressionContext);
	}
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showSettings; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowSettings) {
			listener.enterShowSettings(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowSettings) {
			listener.exitShowSettings(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowSettings) {
			return visitor.visitShowSettings(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateConstraintContext extends ParserRuleContext {
	public CONSTRAINT(): TerminalNode { return this.getToken(CypherParser.CONSTRAINT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.LPAREN);
		} else {
			return this.getToken(CypherParser.LPAREN, i);
		}
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FOR, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public NOT(): TerminalNode[];
	public NOT(i: number): TerminalNode;
	public NOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.NOT);
		} else {
			return this.getToken(CypherParser.NOT, i);
		}
	}
	public EXISTS(): TerminalNode[];
	public EXISTS(i: number): TerminalNode;
	public EXISTS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.EXISTS);
		} else {
			return this.getToken(CypherParser.EXISTS, i);
		}
	}
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public labelOrRelType(): LabelOrRelTypeContext | undefined {
		return this.tryGetRuleContext(0, LabelOrRelTypeContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.RPAREN);
		} else {
			return this.getToken(CypherParser.RPAREN, i);
		}
	}
	public arrowLine(): ArrowLineContext[];
	public arrowLine(i: number): ArrowLineContext;
	public arrowLine(i?: number): ArrowLineContext | ArrowLineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArrowLineContext);
		} else {
			return this.getRuleContext(i, ArrowLineContext);
		}
	}
	public LBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LBRACKET, 0); }
	public RBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RBRACKET, 0); }
	public ASSERT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ASSERT, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IS, 0); }
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REQUIRE, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OPTIONS, 0); }
	public mapOrParameter(): MapOrParameterContext | undefined {
		return this.tryGetRuleContext(0, MapOrParameterContext);
	}
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.KEY, 0); }
	public NODE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NODE, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NULL, 0); }
	public symbolicNameString(): SymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameStringContext);
	}
	public leftArrow(): LeftArrowContext | undefined {
		return this.tryGetRuleContext(0, LeftArrowContext);
	}
	public rightArrow(): RightArrowContext | undefined {
		return this.tryGetRuleContext(0, RightArrowContext);
	}
	public RELATIONSHIP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RELATIONSHIP, 0); }
	public REL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REL, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createConstraint; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateConstraint) {
			listener.enterCreateConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateConstraint) {
			listener.exitCreateConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateConstraint) {
			return visitor.visitCreateConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropConstraintContext extends ParserRuleContext {
	public CONSTRAINT(): TerminalNode { return this.getToken(CypherParser.CONSTRAINT, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.LPAREN);
		} else {
			return this.getToken(CypherParser.LPAREN, i);
		}
	}
	public ASSERT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ASSERT, 0); }
	public symbolicNameString(): SymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameStringContext);
	}
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public labelOrRelType(): LabelOrRelTypeContext | undefined {
		return this.tryGetRuleContext(0, LabelOrRelTypeContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.RPAREN);
		} else {
			return this.getToken(CypherParser.RPAREN, i);
		}
	}
	public arrowLine(): ArrowLineContext[];
	public arrowLine(i: number): ArrowLineContext;
	public arrowLine(i?: number): ArrowLineContext | ArrowLineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArrowLineContext);
		} else {
			return this.getRuleContext(i, ArrowLineContext);
		}
	}
	public LBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LBRACKET, 0); }
	public RBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RBRACKET, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public propertyList(): PropertyListContext | undefined {
		return this.tryGetRuleContext(0, PropertyListContext);
	}
	public IS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IS, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUE, 0); }
	public NODE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NODE, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.KEY, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NULL, 0); }
	public leftArrow(): LeftArrowContext | undefined {
		return this.tryGetRuleContext(0, LeftArrowContext);
	}
	public rightArrow(): RightArrowContext | undefined {
		return this.tryGetRuleContext(0, RightArrowContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dropConstraint; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDropConstraint) {
			listener.enterDropConstraint(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDropConstraint) {
			listener.exitDropConstraint(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDropConstraint) {
			return visitor.visitDropConstraint(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateIndexContext extends ParserRuleContext {
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BTREE, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEX, 0); }
	public createIndex_(): CreateIndex_Context | undefined {
		return this.tryGetRuleContext(0, CreateIndex_Context);
	}
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RANGE, 0); }
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FULLTEXT, 0); }
	public createFulltextIndex(): CreateFulltextIndexContext | undefined {
		return this.tryGetRuleContext(0, CreateFulltextIndexContext);
	}
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TEXT, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.POINT, 0); }
	public LOOKUP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LOOKUP, 0); }
	public createLookupIndex(): CreateLookupIndexContext | undefined {
		return this.tryGetRuleContext(0, CreateLookupIndexContext);
	}
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public oldCreateIndex(): OldCreateIndexContext | undefined {
		return this.tryGetRuleContext(0, OldCreateIndexContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createIndex; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateIndex) {
			listener.enterCreateIndex(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateIndex) {
			listener.exitCreateIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateIndex) {
			return visitor.visitCreateIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class OldCreateIndexContext extends ParserRuleContext {
	public labelOrRelType(): LabelOrRelTypeContext {
		return this.getRuleContext(0, LabelOrRelTypeContext);
	}
	public LPAREN(): TerminalNode { return this.getToken(CypherParser.LPAREN, 0); }
	public symbolicNamePositions(): SymbolicNamePositionsContext {
		return this.getRuleContext(0, SymbolicNamePositionsContext);
	}
	public RPAREN(): TerminalNode { return this.getToken(CypherParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_oldCreateIndex; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterOldCreateIndex) {
			listener.enterOldCreateIndex(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitOldCreateIndex) {
			listener.exitOldCreateIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitOldCreateIndex) {
			return visitor.visitOldCreateIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateIndex_Context extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public propertyList(): PropertyListContext {
		return this.getRuleContext(0, PropertyListContext);
	}
	public createIndex(): CreateIndexContext {
		return this.getRuleContext(0, CreateIndexContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FOR, 0); }
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.LPAREN);
		} else {
			return this.getToken(CypherParser.LPAREN, i);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public symbolicNameString(): SymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameStringContext);
	}
	public variable(): VariableContext | undefined {
		return this.tryGetRuleContext(0, VariableContext);
	}
	public labelOrRelType(): LabelOrRelTypeContext | undefined {
		return this.tryGetRuleContext(0, LabelOrRelTypeContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.RPAREN);
		} else {
			return this.getToken(CypherParser.RPAREN, i);
		}
	}
	public arrowLine(): ArrowLineContext[];
	public arrowLine(i: number): ArrowLineContext;
	public arrowLine(i?: number): ArrowLineContext | ArrowLineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArrowLineContext);
		} else {
			return this.getRuleContext(i, ArrowLineContext);
		}
	}
	public LBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LBRACKET, 0); }
	public RBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RBRACKET, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OPTIONS, 0); }
	public mapOrParameter(): MapOrParameterContext | undefined {
		return this.tryGetRuleContext(0, MapOrParameterContext);
	}
	public leftArrow(): LeftArrowContext | undefined {
		return this.tryGetRuleContext(0, LeftArrowContext);
	}
	public rightArrow(): RightArrowContext | undefined {
		return this.tryGetRuleContext(0, RightArrowContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createIndex_; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateIndex_) {
			listener.enterCreateIndex_(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateIndex_) {
			listener.exitCreateIndex_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateIndex_) {
			return visitor.visitCreateIndex_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateFulltextIndexContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public EACH(): TerminalNode { return this.getToken(CypherParser.EACH, 0); }
	public LBRACKET(): TerminalNode[];
	public LBRACKET(i: number): TerminalNode;
	public LBRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.LBRACKET);
		} else {
			return this.getToken(CypherParser.LBRACKET, i);
		}
	}
	public variable(): VariableContext[];
	public variable(i: number): VariableContext;
	public variable(i?: number): VariableContext | VariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableContext);
		} else {
			return this.getRuleContext(i, VariableContext);
		}
	}
	public property(): PropertyContext[];
	public property(i: number): PropertyContext;
	public property(i?: number): PropertyContext | PropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyContext);
		} else {
			return this.getRuleContext(i, PropertyContext);
		}
	}
	public RBRACKET(): TerminalNode[];
	public RBRACKET(i: number): TerminalNode;
	public RBRACKET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.RBRACKET);
		} else {
			return this.getToken(CypherParser.RBRACKET, i);
		}
	}
	public createFulltextIndex(): CreateFulltextIndexContext {
		return this.getRuleContext(0, CreateFulltextIndexContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FOR, 0); }
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.LPAREN);
		} else {
			return this.getToken(CypherParser.LPAREN, i);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public symbolicNameString(): SymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameStringContext);
	}
	public labelOrRelTypes(): LabelOrRelTypesContext | undefined {
		return this.tryGetRuleContext(0, LabelOrRelTypesContext);
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.RPAREN);
		} else {
			return this.getToken(CypherParser.RPAREN, i);
		}
	}
	public arrowLine(): ArrowLineContext[];
	public arrowLine(i: number): ArrowLineContext;
	public arrowLine(i?: number): ArrowLineContext | ArrowLineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArrowLineContext);
		} else {
			return this.getRuleContext(i, ArrowLineContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OPTIONS, 0); }
	public mapOrParameter(): MapOrParameterContext | undefined {
		return this.tryGetRuleContext(0, MapOrParameterContext);
	}
	public leftArrow(): LeftArrowContext | undefined {
		return this.tryGetRuleContext(0, LeftArrowContext);
	}
	public rightArrow(): RightArrowContext | undefined {
		return this.tryGetRuleContext(0, RightArrowContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createFulltextIndex; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateFulltextIndex) {
			listener.enterCreateFulltextIndex(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateFulltextIndex) {
			listener.exitCreateFulltextIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateFulltextIndex) {
			return visitor.visitCreateFulltextIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateLookupIndexContext extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public LPAREN(): TerminalNode[];
	public LPAREN(i: number): TerminalNode;
	public LPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.LPAREN);
		} else {
			return this.getToken(CypherParser.LPAREN, i);
		}
	}
	public variable(): VariableContext[];
	public variable(i: number): VariableContext;
	public variable(i?: number): VariableContext | VariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableContext);
		} else {
			return this.getRuleContext(i, VariableContext);
		}
	}
	public RPAREN(): TerminalNode[];
	public RPAREN(i: number): TerminalNode;
	public RPAREN(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.RPAREN);
		} else {
			return this.getToken(CypherParser.RPAREN, i);
		}
	}
	public createLookupIndex(): CreateLookupIndexContext {
		return this.getRuleContext(0, CreateLookupIndexContext);
	}
	public FOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FOR, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public EACH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EACH, 0); }
	public arrowLine(): ArrowLineContext[];
	public arrowLine(i: number): ArrowLineContext;
	public arrowLine(i?: number): ArrowLineContext | ArrowLineContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ArrowLineContext);
		} else {
			return this.getRuleContext(i, ArrowLineContext);
		}
	}
	public LBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LBRACKET, 0); }
	public RBRACKET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RBRACKET, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OPTIONS, 0); }
	public mapOrParameter(): MapOrParameterContext | undefined {
		return this.tryGetRuleContext(0, MapOrParameterContext);
	}
	public leftArrow(): LeftArrowContext | undefined {
		return this.tryGetRuleContext(0, LeftArrowContext);
	}
	public rightArrow(): RightArrowContext | undefined {
		return this.tryGetRuleContext(0, RightArrowContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createLookupIndex; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateLookupIndex) {
			listener.enterCreateLookupIndex(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateLookupIndex) {
			listener.exitCreateLookupIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateLookupIndex) {
			return visitor.visitCreateLookupIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropIndexContext extends ParserRuleContext {
	public INDEX(): TerminalNode { return this.getToken(CypherParser.INDEX, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public labelOrRelType(): LabelOrRelTypeContext | undefined {
		return this.tryGetRuleContext(0, LabelOrRelTypeContext);
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public symbolicNamePositions(): SymbolicNamePositionsContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNamePositionsContext);
	}
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	public symbolicNameString(): SymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameStringContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dropIndex; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDropIndex) {
			listener.enterDropIndex(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDropIndex) {
			listener.exitDropIndex(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDropIndex) {
			return visitor.visitDropIndex(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyListContext extends ParserRuleContext {
	public variable(): VariableContext[];
	public variable(i: number): VariableContext;
	public variable(i?: number): VariableContext | VariableContext[] {
		if (i === undefined) {
			return this.getRuleContexts(VariableContext);
		} else {
			return this.getRuleContext(i, VariableContext);
		}
	}
	public property(): PropertyContext[];
	public property(i: number): PropertyContext;
	public property(i?: number): PropertyContext | PropertyContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PropertyContext);
		} else {
			return this.getRuleContext(i, PropertyContext);
		}
	}
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_propertyList; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPropertyList) {
			listener.enterPropertyList(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPropertyList) {
			listener.exitPropertyList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPropertyList) {
			return visitor.visitPropertyList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameCommandContext extends ParserRuleContext {
	public RENAME(): TerminalNode { return this.getToken(CypherParser.RENAME, 0); }
	public renameRole(): RenameRoleContext | undefined {
		return this.tryGetRuleContext(0, RenameRoleContext);
	}
	public renameUser(): RenameUserContext | undefined {
		return this.tryGetRuleContext(0, RenameUserContext);
	}
	public renameServer(): RenameServerContext | undefined {
		return this.tryGetRuleContext(0, RenameServerContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_renameCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRenameCommand) {
			listener.enterRenameCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRenameCommand) {
			listener.exitRenameCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRenameCommand) {
			return visitor.visitRenameCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantCommandContext extends ParserRuleContext {
	public GRANT(): TerminalNode { return this.getToken(CypherParser.GRANT, 0); }
	public IMMUTABLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IMMUTABLE, 0); }
	public grantPrivilege(): GrantPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, GrantPrivilegeContext);
	}
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	public grantRoleManagement(): GrantRoleManagementContext | undefined {
		return this.tryGetRuleContext(0, GrantRoleManagementContext);
	}
	public ROLES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLES, 0); }
	public grantRole(): GrantRoleContext | undefined {
		return this.tryGetRuleContext(0, GrantRoleContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_grantCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGrantCommand) {
			listener.enterGrantCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGrantCommand) {
			listener.exitGrantCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGrantCommand) {
			return visitor.visitGrantCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeCommandContext extends ParserRuleContext {
	public REVOKE(): TerminalNode { return this.getToken(CypherParser.REVOKE, 0); }
	public DENY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DENY, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.GRANT, 0); }
	public IMMUTABLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IMMUTABLE, 0); }
	public revokePrivilege(): RevokePrivilegeContext | undefined {
		return this.tryGetRuleContext(0, RevokePrivilegeContext);
	}
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	public revokeRoleManagement(): RevokeRoleManagementContext | undefined {
		return this.tryGetRuleContext(0, RevokeRoleManagementContext);
	}
	public revokeRole(): RevokeRoleContext | undefined {
		return this.tryGetRuleContext(0, RevokeRoleContext);
	}
	public ROLES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_revokeCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRevokeCommand) {
			listener.enterRevokeCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRevokeCommand) {
			listener.exitRevokeCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRevokeCommand) {
			return visitor.visitRevokeCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EnableServerCommandContext extends ParserRuleContext {
	public ENABLE(): TerminalNode { return this.getToken(CypherParser.ENABLE, 0); }
	public SERVER(): TerminalNode { return this.getToken(CypherParser.SERVER, 0); }
	public stringOrParameter(): StringOrParameterContext {
		return this.getRuleContext(0, StringOrParameterContext);
	}
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_enableServerCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterEnableServerCommand) {
			listener.enterEnableServerCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitEnableServerCommand) {
			listener.exitEnableServerCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitEnableServerCommand) {
			return visitor.visitEnableServerCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterServerContext extends ParserRuleContext {
	public SERVER(): TerminalNode { return this.getToken(CypherParser.SERVER, 0); }
	public stringOrParameter(): StringOrParameterContext {
		return this.getRuleContext(0, StringOrParameterContext);
	}
	public SET(): TerminalNode { return this.getToken(CypherParser.SET, 0); }
	public options_(): Options_Context {
		return this.getRuleContext(0, Options_Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_alterServer; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAlterServer) {
			listener.enterAlterServer(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAlterServer) {
			listener.exitAlterServer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAlterServer) {
			return visitor.visitAlterServer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameServerContext extends ParserRuleContext {
	public SERVER(): TerminalNode { return this.getToken(CypherParser.SERVER, 0); }
	public stringOrParameter(): StringOrParameterContext[];
	public stringOrParameter(i: number): StringOrParameterContext;
	public stringOrParameter(i?: number): StringOrParameterContext | StringOrParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringOrParameterContext);
		} else {
			return this.getRuleContext(i, StringOrParameterContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(CypherParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_renameServer; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRenameServer) {
			listener.enterRenameServer(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRenameServer) {
			listener.exitRenameServer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRenameServer) {
			return visitor.visitRenameServer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropServerContext extends ParserRuleContext {
	public SERVER(): TerminalNode { return this.getToken(CypherParser.SERVER, 0); }
	public stringOrParameter(): StringOrParameterContext {
		return this.getRuleContext(0, StringOrParameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dropServer; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDropServer) {
			listener.enterDropServer(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDropServer) {
			listener.exitDropServer(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDropServer) {
			return visitor.visitDropServer(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowServersContext extends ParserRuleContext {
	public SERVERS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SERVERS, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SERVER, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showServers; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowServers) {
			listener.enterShowServers(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowServers) {
			listener.exitShowServers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowServers) {
			return visitor.visitShowServers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AllocationCommandContext extends ParserRuleContext {
	public deallocateDatabaseFromServers(): DeallocateDatabaseFromServersContext | undefined {
		return this.tryGetRuleContext(0, DeallocateDatabaseFromServersContext);
	}
	public reallocateDatabases(): ReallocateDatabasesContext | undefined {
		return this.tryGetRuleContext(0, ReallocateDatabasesContext);
	}
	public DRYRUN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DRYRUN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_allocationCommand; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAllocationCommand) {
			listener.enterAllocationCommand(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAllocationCommand) {
			listener.exitAllocationCommand(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAllocationCommand) {
			return visitor.visitAllocationCommand(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DeallocateDatabaseFromServersContext extends ParserRuleContext {
	public DEALLOCATE(): TerminalNode { return this.getToken(CypherParser.DEALLOCATE, 0); }
	public FROM(): TerminalNode { return this.getToken(CypherParser.FROM, 0); }
	public stringOrParameter(): StringOrParameterContext[];
	public stringOrParameter(i: number): StringOrParameterContext;
	public stringOrParameter(i?: number): StringOrParameterContext | StringOrParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringOrParameterContext);
		} else {
			return this.getRuleContext(i, StringOrParameterContext);
		}
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASES, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SERVER, 0); }
	public SERVERS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SERVERS, 0); }
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_deallocateDatabaseFromServers; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDeallocateDatabaseFromServers) {
			listener.enterDeallocateDatabaseFromServers(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDeallocateDatabaseFromServers) {
			listener.exitDeallocateDatabaseFromServers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDeallocateDatabaseFromServers) {
			return visitor.visitDeallocateDatabaseFromServers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ReallocateDatabasesContext extends ParserRuleContext {
	public REALLOCATE(): TerminalNode { return this.getToken(CypherParser.REALLOCATE, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASES, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_reallocateDatabases; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterReallocateDatabases) {
			listener.enterReallocateDatabases(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitReallocateDatabases) {
			listener.exitReallocateDatabases(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitReallocateDatabases) {
			return visitor.visitReallocateDatabases(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateRoleContext extends ParserRuleContext {
	public ROLE(): TerminalNode { return this.getToken(CypherParser.ROLE, 0); }
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext[];
	public symbolicNameOrStringParameter(i: number): SymbolicNameOrStringParameterContext;
	public symbolicNameOrStringParameter(i?: number): SymbolicNameOrStringParameterContext | SymbolicNameOrStringParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameOrStringParameterContext);
		} else {
			return this.getRuleContext(i, SymbolicNameOrStringParameterContext);
		}
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AS, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COPY, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createRole; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateRole) {
			listener.enterCreateRole(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateRole) {
			listener.exitCreateRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateRole) {
			return visitor.visitCreateRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropRoleContext extends ParserRuleContext {
	public ROLE(): TerminalNode { return this.getToken(CypherParser.ROLE, 0); }
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dropRole; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDropRole) {
			listener.enterDropRole(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDropRole) {
			listener.exitDropRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDropRole) {
			return visitor.visitDropRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameRoleContext extends ParserRuleContext {
	public ROLE(): TerminalNode { return this.getToken(CypherParser.ROLE, 0); }
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext[];
	public symbolicNameOrStringParameter(i: number): SymbolicNameOrStringParameterContext;
	public symbolicNameOrStringParameter(i?: number): SymbolicNameOrStringParameterContext | SymbolicNameOrStringParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameOrStringParameterContext);
		} else {
			return this.getRuleContext(i, SymbolicNameOrStringParameterContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(CypherParser.TO, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_renameRole; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRenameRole) {
			listener.enterRenameRole(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRenameRole) {
			listener.exitRenameRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRenameRole) {
			return visitor.visitRenameRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRolesContext extends ParserRuleContext {
	public WITH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WITH, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public USERS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USERS, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showRoles; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowRoles) {
			listener.enterShowRoles(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowRoles) {
			listener.exitShowRoles(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowRoles) {
			return visitor.visitShowRoles(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantRoleContext extends ParserRuleContext {
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext[];
	public symbolicNameOrStringParameterList(i: number): SymbolicNameOrStringParameterListContext;
	public symbolicNameOrStringParameterList(i?: number): SymbolicNameOrStringParameterListContext | SymbolicNameOrStringParameterListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameOrStringParameterListContext);
		} else {
			return this.getRuleContext(i, SymbolicNameOrStringParameterListContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(CypherParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_grantRole; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGrantRole) {
			listener.enterGrantRole(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGrantRole) {
			listener.exitGrantRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGrantRole) {
			return visitor.visitGrantRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeRoleContext extends ParserRuleContext {
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext[];
	public symbolicNameOrStringParameterList(i: number): SymbolicNameOrStringParameterListContext;
	public symbolicNameOrStringParameterList(i?: number): SymbolicNameOrStringParameterListContext | SymbolicNameOrStringParameterListContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameOrStringParameterListContext);
		} else {
			return this.getRuleContext(i, SymbolicNameOrStringParameterListContext);
		}
	}
	public FROM(): TerminalNode { return this.getToken(CypherParser.FROM, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_revokeRole; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRevokeRole) {
			listener.enterRevokeRole(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRevokeRole) {
			listener.exitRevokeRole(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRevokeRole) {
			return visitor.visitRevokeRole(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateUserContext extends ParserRuleContext {
	public USER(): TerminalNode { return this.getToken(CypherParser.USER, 0); }
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterContext);
	}
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.SET);
		} else {
			return this.getToken(CypherParser.SET, i);
		}
	}
	public PASSWORD(): TerminalNode[];
	public PASSWORD(i: number): TerminalNode;
	public PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PASSWORD);
		} else {
			return this.getToken(CypherParser.PASSWORD, i);
		}
	}
	public passwordExpression(): PasswordExpressionContext {
		return this.getRuleContext(0, PasswordExpressionContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public passwordChangeRequired(): PasswordChangeRequiredContext[];
	public passwordChangeRequired(i: number): PasswordChangeRequiredContext;
	public passwordChangeRequired(i?: number): PasswordChangeRequiredContext | PasswordChangeRequiredContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PasswordChangeRequiredContext);
		} else {
			return this.getRuleContext(i, PasswordChangeRequiredContext);
		}
	}
	public PLAINTEXT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PLAINTEXT, 0); }
	public ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ENCRYPTED, 0); }
	public userStatus(): UserStatusContext[];
	public userStatus(i: number): UserStatusContext;
	public userStatus(i?: number): UserStatusContext | UserStatusContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserStatusContext);
		} else {
			return this.getRuleContext(i, UserStatusContext);
		}
	}
	public homeDatabase(): HomeDatabaseContext[];
	public homeDatabase(i: number): HomeDatabaseContext;
	public homeDatabase(i?: number): HomeDatabaseContext | HomeDatabaseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HomeDatabaseContext);
		} else {
			return this.getRuleContext(i, HomeDatabaseContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createUser; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateUser) {
			listener.enterCreateUser(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateUser) {
			listener.exitCreateUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateUser) {
			return visitor.visitCreateUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropUserContext extends ParserRuleContext {
	public USER(): TerminalNode { return this.getToken(CypherParser.USER, 0); }
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dropUser; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDropUser) {
			listener.enterDropUser(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDropUser) {
			listener.exitDropUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDropUser) {
			return visitor.visitDropUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RenameUserContext extends ParserRuleContext {
	public USER(): TerminalNode { return this.getToken(CypherParser.USER, 0); }
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext[];
	public symbolicNameOrStringParameter(i: number): SymbolicNameOrStringParameterContext;
	public symbolicNameOrStringParameter(i?: number): SymbolicNameOrStringParameterContext | SymbolicNameOrStringParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameOrStringParameterContext);
		} else {
			return this.getRuleContext(i, SymbolicNameOrStringParameterContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(CypherParser.TO, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_renameUser; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRenameUser) {
			listener.enterRenameUser(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRenameUser) {
			listener.exitRenameUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRenameUser) {
			return visitor.visitRenameUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterCurrentUserContext extends ParserRuleContext {
	public CURRENT(): TerminalNode { return this.getToken(CypherParser.CURRENT, 0); }
	public USER(): TerminalNode { return this.getToken(CypherParser.USER, 0); }
	public SET(): TerminalNode { return this.getToken(CypherParser.SET, 0); }
	public PASSWORD(): TerminalNode { return this.getToken(CypherParser.PASSWORD, 0); }
	public FROM(): TerminalNode { return this.getToken(CypherParser.FROM, 0); }
	public passwordExpression(): PasswordExpressionContext[];
	public passwordExpression(i: number): PasswordExpressionContext;
	public passwordExpression(i?: number): PasswordExpressionContext | PasswordExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PasswordExpressionContext);
		} else {
			return this.getRuleContext(i, PasswordExpressionContext);
		}
	}
	public TO(): TerminalNode { return this.getToken(CypherParser.TO, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_alterCurrentUser; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAlterCurrentUser) {
			listener.enterAlterCurrentUser(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAlterCurrentUser) {
			listener.exitAlterCurrentUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAlterCurrentUser) {
			return visitor.visitAlterCurrentUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterUserContext extends ParserRuleContext {
	public USER(): TerminalNode { return this.getToken(CypherParser.USER, 0); }
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterContext);
	}
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REMOVE, 0); }
	public HOME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.HOME, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.SET);
		} else {
			return this.getToken(CypherParser.SET, i);
		}
	}
	public PLAINTEXT(): TerminalNode[];
	public PLAINTEXT(i: number): TerminalNode;
	public PLAINTEXT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PLAINTEXT);
		} else {
			return this.getToken(CypherParser.PLAINTEXT, i);
		}
	}
	public PASSWORD(): TerminalNode[];
	public PASSWORD(i: number): TerminalNode;
	public PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PASSWORD);
		} else {
			return this.getToken(CypherParser.PASSWORD, i);
		}
	}
	public setPassword(): SetPasswordContext[];
	public setPassword(i: number): SetPasswordContext;
	public setPassword(i?: number): SetPasswordContext | SetPasswordContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SetPasswordContext);
		} else {
			return this.getRuleContext(i, SetPasswordContext);
		}
	}
	public ENCRYPTED(): TerminalNode[];
	public ENCRYPTED(i: number): TerminalNode;
	public ENCRYPTED(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.ENCRYPTED);
		} else {
			return this.getToken(CypherParser.ENCRYPTED, i);
		}
	}
	public userStatus(): UserStatusContext[];
	public userStatus(i: number): UserStatusContext;
	public userStatus(i?: number): UserStatusContext | UserStatusContext[] {
		if (i === undefined) {
			return this.getRuleContexts(UserStatusContext);
		} else {
			return this.getRuleContext(i, UserStatusContext);
		}
	}
	public homeDatabase(): HomeDatabaseContext[];
	public homeDatabase(i: number): HomeDatabaseContext;
	public homeDatabase(i?: number): HomeDatabaseContext | HomeDatabaseContext[] {
		if (i === undefined) {
			return this.getRuleContexts(HomeDatabaseContext);
		} else {
			return this.getRuleContext(i, HomeDatabaseContext);
		}
	}
	public passwordChangeRequired(): PasswordChangeRequiredContext[];
	public passwordChangeRequired(i: number): PasswordChangeRequiredContext;
	public passwordChangeRequired(i?: number): PasswordChangeRequiredContext | PasswordChangeRequiredContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PasswordChangeRequiredContext);
		} else {
			return this.getRuleContext(i, PasswordChangeRequiredContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_alterUser; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAlterUser) {
			listener.enterAlterUser(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAlterUser) {
			listener.exitAlterUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAlterUser) {
			return visitor.visitAlterUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetPasswordContext extends ParserRuleContext {
	public passwordExpression(): PasswordExpressionContext {
		return this.getRuleContext(0, PasswordExpressionContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_setPassword; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSetPassword) {
			listener.enterSetPassword(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSetPassword) {
			listener.exitSetPassword(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSetPassword) {
			return visitor.visitSetPassword(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PasswordExpressionContext extends ParserRuleContext {
	public stringToken(): StringTokenContext | undefined {
		return this.tryGetRuleContext(0, StringTokenContext);
	}
	public parameter(): ParameterContext | undefined {
		return this.tryGetRuleContext(0, ParameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_passwordExpression; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPasswordExpression) {
			listener.enterPasswordExpression(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPasswordExpression) {
			listener.exitPasswordExpression(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPasswordExpression) {
			return visitor.visitPasswordExpression(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PasswordChangeRequiredContext extends ParserRuleContext {
	public CHANGE(): TerminalNode { return this.getToken(CypherParser.CHANGE, 0); }
	public REQUIRED(): TerminalNode { return this.getToken(CypherParser.REQUIRED, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_passwordChangeRequired; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPasswordChangeRequired) {
			listener.enterPasswordChangeRequired(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPasswordChangeRequired) {
			listener.exitPasswordChangeRequired(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPasswordChangeRequired) {
			return visitor.visitPasswordChangeRequired(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UserStatusContext extends ParserRuleContext {
	public STATUS(): TerminalNode { return this.getToken(CypherParser.STATUS, 0); }
	public SUSPENDED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SUSPENDED, 0); }
	public ACTIVE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ACTIVE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_userStatus; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterUserStatus) {
			listener.enterUserStatus(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitUserStatus) {
			listener.exitUserStatus(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitUserStatus) {
			return visitor.visitUserStatus(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class HomeDatabaseContext extends ParserRuleContext {
	public HOME(): TerminalNode { return this.getToken(CypherParser.HOME, 0); }
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext {
		return this.getRuleContext(0, SymbolicAliasNameContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_homeDatabase; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterHomeDatabase) {
			listener.enterHomeDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitHomeDatabase) {
			listener.exitHomeDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitHomeDatabase) {
			return visitor.visitHomeDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowUsersContext extends ParserRuleContext {
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showUsers; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowUsers) {
			listener.enterShowUsers(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowUsers) {
			listener.exitShowUsers(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowUsers) {
			return visitor.visitShowUsers(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowCurrentUserContext extends ParserRuleContext {
	public CURRENT(): TerminalNode { return this.getToken(CypherParser.CURRENT, 0); }
	public USER(): TerminalNode { return this.getToken(CypherParser.USER, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showCurrentUser; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowCurrentUser) {
			listener.enterShowCurrentUser(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowCurrentUser) {
			listener.exitShowCurrentUser(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowCurrentUser) {
			return visitor.visitShowCurrentUser(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowPrivilegesContext extends ParserRuleContext {
	public PRIVILEGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGE, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGES, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AS, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public COMMAND(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMAND, 0); }
	public COMMANDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMANDS, 0); }
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REVOKE, 0); }
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showPrivileges; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowPrivileges) {
			listener.enterShowPrivileges(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowPrivileges) {
			listener.exitShowPrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowPrivileges) {
			return visitor.visitShowPrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowRolePrivilegesContext extends ParserRuleContext {
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	public PRIVILEGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGE, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGES, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AS, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public COMMAND(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMAND, 0); }
	public COMMANDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMANDS, 0); }
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REVOKE, 0); }
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showRolePrivileges; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowRolePrivileges) {
			listener.enterShowRolePrivileges(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowRolePrivileges) {
			listener.exitShowRolePrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowRolePrivileges) {
			return visitor.visitShowRolePrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowUserPrivilegesContext extends ParserRuleContext {
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	public PRIVILEGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGE, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGES, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AS, 0); }
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public COMMAND(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMAND, 0); }
	public COMMANDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMANDS, 0); }
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REVOKE, 0); }
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showUserPrivileges; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowUserPrivileges) {
			listener.enterShowUserPrivileges(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowUserPrivileges) {
			listener.exitShowUserPrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowUserPrivileges) {
			return visitor.visitShowUserPrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantRoleManagementContext extends ParserRuleContext {
	public roleManagementPrivilege(): RoleManagementPrivilegeContext {
		return this.getRuleContext(0, RoleManagementPrivilegeContext);
	}
	public TO(): TerminalNode { return this.getToken(CypherParser.TO, 0); }
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	public grantPrivilege(): GrantPrivilegeContext {
		return this.getRuleContext(0, GrantPrivilegeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_grantRoleManagement; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGrantRoleManagement) {
			listener.enterGrantRoleManagement(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGrantRoleManagement) {
			listener.exitGrantRoleManagement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGrantRoleManagement) {
			return visitor.visitGrantRoleManagement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokeRoleManagementContext extends ParserRuleContext {
	public roleManagementPrivilege(): RoleManagementPrivilegeContext {
		return this.getRuleContext(0, RoleManagementPrivilegeContext);
	}
	public FROM(): TerminalNode { return this.getToken(CypherParser.FROM, 0); }
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_revokeRoleManagement; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRevokeRoleManagement) {
			listener.enterRevokeRoleManagement(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRevokeRoleManagement) {
			listener.exitRevokeRoleManagement(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRevokeRoleManagement) {
			return visitor.visitRevokeRoleManagement(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RoleManagementPrivilegeContext extends ParserRuleContext {
	public MANAGEMENT(): TerminalNode { return this.getToken(CypherParser.MANAGEMENT, 0); }
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public DBMS(): TerminalNode { return this.getToken(CypherParser.DBMS, 0); }
	public dbmsPrivilege(): DbmsPrivilegeContext {
		return this.getRuleContext(0, DbmsPrivilegeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_roleManagementPrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRoleManagementPrivilege) {
			listener.enterRoleManagementPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRoleManagementPrivilege) {
			listener.exitRoleManagementPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRoleManagementPrivilege) {
			return visitor.visitRoleManagementPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GrantPrivilegeContext extends ParserRuleContext {
	public privilege(): PrivilegeContext {
		return this.getRuleContext(0, PrivilegeContext);
	}
	public TO(): TerminalNode { return this.getToken(CypherParser.TO, 0); }
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	public grantPrivilege(): GrantPrivilegeContext {
		return this.getRuleContext(0, GrantPrivilegeContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_grantPrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGrantPrivilege) {
			listener.enterGrantPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGrantPrivilege) {
			listener.exitGrantPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGrantPrivilege) {
			return visitor.visitGrantPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DenyPrivilegeContext extends ParserRuleContext {
	public DENY(): TerminalNode { return this.getToken(CypherParser.DENY, 0); }
	public TO(): TerminalNode { return this.getToken(CypherParser.TO, 0); }
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	public privilege(): PrivilegeContext | undefined {
		return this.tryGetRuleContext(0, PrivilegeContext);
	}
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	public roleManagementPrivilege(): RoleManagementPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, RoleManagementPrivilegeContext);
	}
	public IMMUTABLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IMMUTABLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_denyPrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDenyPrivilege) {
			listener.enterDenyPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDenyPrivilege) {
			listener.exitDenyPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDenyPrivilege) {
			return visitor.visitDenyPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RevokePrivilegeContext extends ParserRuleContext {
	public privilege(): PrivilegeContext {
		return this.getRuleContext(0, PrivilegeContext);
	}
	public FROM(): TerminalNode { return this.getToken(CypherParser.FROM, 0); }
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext {
		return this.getRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_revokePrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRevokePrivilege) {
			listener.enterRevokePrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRevokePrivilege) {
			listener.exitRevokePrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRevokePrivilege) {
			return visitor.visitRevokePrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PrivilegeContext extends ParserRuleContext {
	public allPrivilege(): AllPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, AllPrivilegeContext);
	}
	public createPrivilege(): CreatePrivilegeContext | undefined {
		return this.tryGetRuleContext(0, CreatePrivilegeContext);
	}
	public dropPrivilege(): DropPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DropPrivilegeContext);
	}
	public showPrivilege(): ShowPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, ShowPrivilegeContext);
	}
	public setPrivilege(): SetPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, SetPrivilegeContext);
	}
	public removePrivilege(): RemovePrivilegeContext | undefined {
		return this.tryGetRuleContext(0, RemovePrivilegeContext);
	}
	public databasePrivilege(): DatabasePrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DatabasePrivilegeContext);
	}
	public dbmsPrivilege(): DbmsPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DbmsPrivilegeContext);
	}
	public writePrivilege(): WritePrivilegeContext | undefined {
		return this.tryGetRuleContext(0, WritePrivilegeContext);
	}
	public qualifiedGraphPrivileges(): QualifiedGraphPrivilegesContext | undefined {
		return this.tryGetRuleContext(0, QualifiedGraphPrivilegesContext);
	}
	public qualifiedGraphPrivilegesWithProperty(): QualifiedGraphPrivilegesWithPropertyContext | undefined {
		return this.tryGetRuleContext(0, QualifiedGraphPrivilegesWithPropertyContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_privilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPrivilege) {
			listener.enterPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPrivilege) {
			listener.exitPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPrivilege) {
			return visitor.visitPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AllPrivilegeContext extends ParserRuleContext {
	public ALL(): TerminalNode { return this.getToken(CypherParser.ALL, 0); }
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public DEFAULT_TOKEN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DEFAULT_TOKEN, 0); }
	public HOME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.HOME, 0); }
	public DBMS(): TerminalNode[];
	public DBMS(i: number): TerminalNode;
	public DBMS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.DBMS);
		} else {
			return this.getToken(CypherParser.DBMS, i);
		}
	}
	public dbmsPrivilege(): DbmsPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DbmsPrivilegeContext);
	}
	public databasePrivilege(): DatabasePrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DatabasePrivilegeContext);
	}
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGES, 0); }
	public GRAPH(): TerminalNode[];
	public GRAPH(i: number): TerminalNode;
	public GRAPH(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.GRAPH);
		} else {
			return this.getToken(CypherParser.GRAPH, i);
		}
	}
	public GRAPHS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.GRAPHS, 0); }
	public DATABASE(): TerminalNode[];
	public DATABASE(i: number): TerminalNode;
	public DATABASE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.DATABASE);
		} else {
			return this.getToken(CypherParser.DATABASE, i);
		}
	}
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASES, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public symbolicAliasNameList(): SymbolicAliasNameListContext | undefined {
		return this.tryGetRuleContext(0, SymbolicAliasNameListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_allPrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAllPrivilege) {
			listener.enterAllPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAllPrivilege) {
			listener.exitAllPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAllPrivilege) {
			return visitor.visitAllPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreatePrivilegeContext extends ParserRuleContext {
	public CREATE(): TerminalNode { return this.getToken(CypherParser.CREATE, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public databaseScopeList(): DatabaseScopeListContext | undefined {
		return this.tryGetRuleContext(0, DatabaseScopeListContext);
	}
	public databasePrivilege(): DatabasePrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DatabasePrivilegeContext);
	}
	public DBMS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DBMS, 0); }
	public dbmsPrivilege(): DbmsPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DbmsPrivilegeContext);
	}
	public graphScopeList(): GraphScopeListContext | undefined {
		return this.tryGetRuleContext(0, GraphScopeListContext);
	}
	public graphQualifier(): GraphQualifierContext | undefined {
		return this.tryGetRuleContext(0, GraphQualifierContext);
	}
	public NEW(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NEW, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public ALIAS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALIAS, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public COMPOSITE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMPOSITE, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEXES, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINT, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINTS, 0); }
	public LABEL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LABEL, 0); }
	public LABELS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LABELS, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TYPE, 0); }
	public TYPES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TYPES, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NAME, 0); }
	public NAMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NAMES, 0); }
	public NODE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NODE, 0); }
	public RELATIONSHIP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RELATIONSHIP, 0); }
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROPERTY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createPrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreatePrivilege) {
			listener.enterCreatePrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreatePrivilege) {
			listener.exitCreatePrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreatePrivilege) {
			return visitor.visitCreatePrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropPrivilegeContext extends ParserRuleContext {
	public DROP(): TerminalNode { return this.getToken(CypherParser.DROP, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public databaseScopeList(): DatabaseScopeListContext | undefined {
		return this.tryGetRuleContext(0, DatabaseScopeListContext);
	}
	public databasePrivilege(): DatabasePrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DatabasePrivilegeContext);
	}
	public DBMS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DBMS, 0); }
	public dbmsPrivilege(): DbmsPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DbmsPrivilegeContext);
	}
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public ALIAS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALIAS, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public COMPOSITE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMPOSITE, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEXES, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINT, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dropPrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDropPrivilege) {
			listener.enterDropPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDropPrivilege) {
			listener.exitDropPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDropPrivilege) {
			return visitor.visitDropPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowPrivilegeContext extends ParserRuleContext {
	public SHOW(): TerminalNode { return this.getToken(CypherParser.SHOW, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public databaseScopeList(): DatabaseScopeListContext | undefined {
		return this.tryGetRuleContext(0, DatabaseScopeListContext);
	}
	public databasePrivilege(): DatabasePrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DatabasePrivilegeContext);
	}
	public DBMS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DBMS, 0); }
	public dbmsPrivilege(): DbmsPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DbmsPrivilegeContext);
	}
	public ALIAS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALIAS, 0); }
	public PRIVILEGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGE, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public settingQualifier(): SettingQualifierContext | undefined {
		return this.tryGetRuleContext(0, SettingQualifierContext);
	}
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEXES, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINT, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINTS, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTION, 0); }
	public TRANSACTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTIONS, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SERVER, 0); }
	public SERVERS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SERVERS, 0); }
	public SETTING(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SETTING, 0); }
	public SETTINGS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SETTINGS, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showPrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowPrivilege) {
			listener.enterShowPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowPrivilege) {
			listener.exitShowPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowPrivilege) {
			return visitor.visitShowPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SetPrivilegeContext extends ParserRuleContext {
	public SET(): TerminalNode { return this.getToken(CypherParser.SET, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public DBMS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DBMS, 0); }
	public dbmsPrivilege(): DbmsPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DbmsPrivilegeContext);
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ACCESS, 0); }
	public LABEL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LABEL, 0); }
	public labelResource(): LabelResourceContext | undefined {
		return this.tryGetRuleContext(0, LabelResourceContext);
	}
	public graphScopeList(): GraphScopeListContext | undefined {
		return this.tryGetRuleContext(0, GraphScopeListContext);
	}
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROPERTY, 0); }
	public propertyResource(): PropertyResourceContext | undefined {
		return this.tryGetRuleContext(0, PropertyResourceContext);
	}
	public graphQualifier(): GraphQualifierContext | undefined {
		return this.tryGetRuleContext(0, GraphQualifierContext);
	}
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PASSWORD, 0); }
	public PASSWORDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PASSWORDS, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.STATUS, 0); }
	public HOME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.HOME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_setPrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSetPrivilege) {
			listener.enterSetPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSetPrivilege) {
			listener.exitSetPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSetPrivilege) {
			return visitor.visitSetPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class RemovePrivilegeContext extends ParserRuleContext {
	public REMOVE(): TerminalNode { return this.getToken(CypherParser.REMOVE, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public DBMS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DBMS, 0); }
	public dbmsPrivilege(): DbmsPrivilegeContext | undefined {
		return this.tryGetRuleContext(0, DbmsPrivilegeContext);
	}
	public LABEL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LABEL, 0); }
	public labelResource(): LabelResourceContext | undefined {
		return this.tryGetRuleContext(0, LabelResourceContext);
	}
	public graphScopeList(): GraphScopeListContext | undefined {
		return this.tryGetRuleContext(0, GraphScopeListContext);
	}
	public PRIVILEGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGE, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_removePrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterRemovePrivilege) {
			listener.enterRemovePrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitRemovePrivilege) {
			listener.exitRemovePrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitRemovePrivilege) {
			return visitor.visitRemovePrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WritePrivilegeContext extends ParserRuleContext {
	public WRITE(): TerminalNode { return this.getToken(CypherParser.WRITE, 0); }
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public graphScopeList(): GraphScopeListContext {
		return this.getRuleContext(0, GraphScopeListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_writePrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterWritePrivilege) {
			listener.enterWritePrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitWritePrivilege) {
			listener.exitWritePrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitWritePrivilege) {
			return visitor.visitWritePrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DatabasePrivilegeContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public databaseScopeList(): DatabaseScopeListContext {
		return this.getRuleContext(0, DatabaseScopeListContext);
	}
	public databasePrivilege(): DatabasePrivilegeContext {
		return this.getRuleContext(0, DatabasePrivilegeContext);
	}
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ACCESS, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(CypherParser.START, 0); }
	public STOP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.STOP, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTION, 0); }
	public TERMINATE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TERMINATE, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NAME, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEXES, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINT, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINTS, 0); }
	public TRANSACTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTIONS, 0); }
	public MANAGEMENT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MANAGEMENT, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_databasePrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDatabasePrivilege) {
			listener.enterDatabasePrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDatabasePrivilege) {
			listener.exitDatabasePrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDatabasePrivilege) {
			return visitor.visitDatabasePrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DbmsPrivilegeContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public DBMS(): TerminalNode { return this.getToken(CypherParser.DBMS, 0); }
	public dbmsPrivilege(): DbmsPrivilegeContext {
		return this.getRuleContext(0, DbmsPrivilegeContext);
	}
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALTER, 0); }
	public ASSIGN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ASSIGN, 0); }
	public COMPOSITE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMPOSITE, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public MANAGEMENT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MANAGEMENT, 0); }
	public ALIAS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALIAS, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXECUTE, 0); }
	public PRIVILEGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RENAME, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SERVER, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public IMPERSONATE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IMPERSONATE, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	public PROCEDURES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROCEDURES, 0); }
	public BOOSTED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BOOSTED, 0); }
	public executeProcedureQualifier(): ExecuteProcedureQualifierContext | undefined {
		return this.tryGetRuleContext(0, ExecuteProcedureQualifierContext);
	}
	public executeFunctionQualifier(): ExecuteFunctionQualifierContext | undefined {
		return this.tryGetRuleContext(0, ExecuteFunctionQualifierContext);
	}
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ADMIN, 0); }
	public ADMINISTRATOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ADMINISTRATOR, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROCEDURE, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FUNCTION, 0); }
	public FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FUNCTIONS, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public symbolicNameOrStringParameterList(): SymbolicNameOrStringParameterListContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameOrStringParameterListContext);
	}
	public DEFINED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DEFINED, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dbmsPrivilege; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDbmsPrivilege) {
			listener.enterDbmsPrivilege(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDbmsPrivilege) {
			listener.exitDbmsPrivilege(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDbmsPrivilege) {
			return visitor.visitDbmsPrivilege(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecuteFunctionQualifierContext extends ParserRuleContext {
	public globs(): GlobsContext {
		return this.getRuleContext(0, GlobsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_executeFunctionQualifier; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExecuteFunctionQualifier) {
			listener.enterExecuteFunctionQualifier(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExecuteFunctionQualifier) {
			listener.exitExecuteFunctionQualifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExecuteFunctionQualifier) {
			return visitor.visitExecuteFunctionQualifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ExecuteProcedureQualifierContext extends ParserRuleContext {
	public globs(): GlobsContext {
		return this.getRuleContext(0, GlobsContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_executeProcedureQualifier; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterExecuteProcedureQualifier) {
			listener.enterExecuteProcedureQualifier(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitExecuteProcedureQualifier) {
			listener.exitExecuteProcedureQualifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitExecuteProcedureQualifier) {
			return visitor.visitExecuteProcedureQualifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SettingQualifierContext extends ParserRuleContext {
	public globs(): GlobsContext[];
	public globs(i: number): GlobsContext;
	public globs(i?: number): GlobsContext | GlobsContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GlobsContext);
		} else {
			return this.getRuleContext(i, GlobsContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_settingQualifier; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSettingQualifier) {
			listener.enterSettingQualifier(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSettingQualifier) {
			listener.exitSettingQualifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSettingQualifier) {
			return visitor.visitSettingQualifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GlobsContext extends ParserRuleContext {
	public glob(): GlobContext[];
	public glob(i: number): GlobContext;
	public glob(i?: number): GlobContext | GlobContext[] {
		if (i === undefined) {
			return this.getRuleContexts(GlobContext);
		} else {
			return this.getRuleContext(i, GlobContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_globs; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGlobs) {
			listener.enterGlobs(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGlobs) {
			listener.exitGlobs(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGlobs) {
			return visitor.visitGlobs(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedGraphPrivilegesWithPropertyContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public graphScopeList(): GraphScopeListContext {
		return this.getRuleContext(0, GraphScopeListContext);
	}
	public graphQualifier(): GraphQualifierContext {
		return this.getRuleContext(0, GraphQualifierContext);
	}
	public TRAVERSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRAVERSE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(CypherParser.READ, 0); }
	public propertyResource(): PropertyResourceContext | undefined {
		return this.tryGetRuleContext(0, PropertyResourceContext);
	}
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MATCH, 0); }
	public LPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LPAREN, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public RPAREN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RPAREN, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_qualifiedGraphPrivilegesWithProperty; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterQualifiedGraphPrivilegesWithProperty) {
			listener.enterQualifiedGraphPrivilegesWithProperty(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitQualifiedGraphPrivilegesWithProperty) {
			listener.exitQualifiedGraphPrivilegesWithProperty(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitQualifiedGraphPrivilegesWithProperty) {
			return visitor.visitQualifiedGraphPrivilegesWithProperty(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class QualifiedGraphPrivilegesContext extends ParserRuleContext {
	public ON(): TerminalNode { return this.getToken(CypherParser.ON, 0); }
	public graphScopeList(): GraphScopeListContext {
		return this.getRuleContext(0, GraphScopeListContext);
	}
	public graphQualifier(): GraphQualifierContext {
		return this.getRuleContext(0, GraphQualifierContext);
	}
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DELETE, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MERGE, 0); }
	public propertyResource(): PropertyResourceContext | undefined {
		return this.tryGetRuleContext(0, PropertyResourceContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_qualifiedGraphPrivileges; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterQualifiedGraphPrivileges) {
			listener.enterQualifiedGraphPrivileges(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitQualifiedGraphPrivileges) {
			listener.exitQualifiedGraphPrivileges(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitQualifiedGraphPrivileges) {
			return visitor.visitQualifiedGraphPrivileges(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class LabelResourceContext extends ParserRuleContext {
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public symbolicNameList1(): SymbolicNameList1Context | undefined {
		return this.tryGetRuleContext(0, SymbolicNameList1Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_labelResource; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterLabelResource) {
			listener.enterLabelResource(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitLabelResource) {
			listener.exitLabelResource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitLabelResource) {
			return visitor.visitLabelResource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class PropertyResourceContext extends ParserRuleContext {
	public LCURLY(): TerminalNode { return this.getToken(CypherParser.LCURLY, 0); }
	public RCURLY(): TerminalNode { return this.getToken(CypherParser.RCURLY, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public symbolicNameList1(): SymbolicNameList1Context | undefined {
		return this.tryGetRuleContext(0, SymbolicNameList1Context);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_propertyResource; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterPropertyResource) {
			listener.enterPropertyResource(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitPropertyResource) {
			listener.exitPropertyResource(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitPropertyResource) {
			return visitor.visitPropertyResource(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GraphQualifierContext extends ParserRuleContext {
	public RELATIONSHIP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RELATIONSHIP, 0); }
	public RELATIONSHIPS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RELATIONSHIPS, 0); }
	public NODE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NODE, 0); }
	public NODES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NODES, 0); }
	public ELEMENT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ELEMENT, 0); }
	public ELEMENTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ELEMENTS, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_graphQualifier; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGraphQualifier) {
			listener.enterGraphQualifier(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGraphQualifier) {
			listener.exitGraphQualifier(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGraphQualifier) {
			return visitor.visitGraphQualifier(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateDatabaseContext extends ParserRuleContext {
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext {
		return this.getRuleContext(0, SymbolicAliasNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public TOPOLOGY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TOPOLOGY, 0); }
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	public waitClause(): WaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitClauseContext);
	}
	public UNSIGNED_DECIMAL_INTEGER(): TerminalNode[];
	public UNSIGNED_DECIMAL_INTEGER(i: number): TerminalNode;
	public UNSIGNED_DECIMAL_INTEGER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.UNSIGNED_DECIMAL_INTEGER);
		} else {
			return this.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, i);
		}
	}
	public PRIMARY(): TerminalNode[];
	public PRIMARY(i: number): TerminalNode;
	public PRIMARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PRIMARY);
		} else {
			return this.getToken(CypherParser.PRIMARY, i);
		}
	}
	public PRIMARIES(): TerminalNode[];
	public PRIMARIES(i: number): TerminalNode;
	public PRIMARIES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PRIMARIES);
		} else {
			return this.getToken(CypherParser.PRIMARIES, i);
		}
	}
	public SECONDARY(): TerminalNode[];
	public SECONDARY(i: number): TerminalNode;
	public SECONDARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.SECONDARY);
		} else {
			return this.getToken(CypherParser.SECONDARY, i);
		}
	}
	public SECONDARIES(): TerminalNode[];
	public SECONDARIES(i: number): TerminalNode;
	public SECONDARIES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.SECONDARIES);
		} else {
			return this.getToken(CypherParser.SECONDARIES, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createDatabase; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateDatabase) {
			listener.enterCreateDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateDatabase) {
			listener.exitCreateDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateDatabase) {
			return visitor.visitCreateDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class Options_Context extends ParserRuleContext {
	public OPTIONS(): TerminalNode { return this.getToken(CypherParser.OPTIONS, 0); }
	public mapOrParameter(): MapOrParameterContext {
		return this.getRuleContext(0, MapOrParameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_options_; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterOptions_) {
			listener.enterOptions_(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitOptions_) {
			listener.exitOptions_(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitOptions_) {
			return visitor.visitOptions_(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateCompositeDatabaseContext extends ParserRuleContext {
	public COMPOSITE(): TerminalNode { return this.getToken(CypherParser.COMPOSITE, 0); }
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext {
		return this.getRuleContext(0, SymbolicAliasNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public options_(): Options_Context | undefined {
		return this.tryGetRuleContext(0, Options_Context);
	}
	public waitClause(): WaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createCompositeDatabase; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateCompositeDatabase) {
			listener.enterCreateCompositeDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateCompositeDatabase) {
			listener.exitCreateCompositeDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateCompositeDatabase) {
			return visitor.visitCreateCompositeDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropDatabaseContext extends ParserRuleContext {
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext {
		return this.getRuleContext(0, SymbolicAliasNameContext);
	}
	public COMPOSITE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMPOSITE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATA, 0); }
	public waitClause(): WaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitClauseContext);
	}
	public DUMP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DUMP, 0); }
	public DESTROY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DESTROY, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dropDatabase; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDropDatabase) {
			listener.enterDropDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDropDatabase) {
			listener.exitDropDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDropDatabase) {
			return visitor.visitDropDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterDatabaseContext extends ParserRuleContext {
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext {
		return this.getRuleContext(0, SymbolicAliasNameContext);
	}
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public SET(): TerminalNode[];
	public SET(i: number): TerminalNode;
	public SET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.SET);
		} else {
			return this.getToken(CypherParser.SET, i);
		}
	}
	public REMOVE(): TerminalNode[];
	public REMOVE(i: number): TerminalNode;
	public REMOVE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.REMOVE);
		} else {
			return this.getToken(CypherParser.REMOVE, i);
		}
	}
	public OPTION(): TerminalNode[];
	public OPTION(i: number): TerminalNode;
	public OPTION(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.OPTION);
		} else {
			return this.getToken(CypherParser.OPTION, i);
		}
	}
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public ACCESS(): TerminalNode[];
	public ACCESS(i: number): TerminalNode;
	public ACCESS(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.ACCESS);
		} else {
			return this.getToken(CypherParser.ACCESS, i);
		}
	}
	public READ(): TerminalNode[];
	public READ(i: number): TerminalNode;
	public READ(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.READ);
		} else {
			return this.getToken(CypherParser.READ, i);
		}
	}
	public TOPOLOGY(): TerminalNode[];
	public TOPOLOGY(i: number): TerminalNode;
	public TOPOLOGY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.TOPOLOGY);
		} else {
			return this.getToken(CypherParser.TOPOLOGY, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public ONLY(): TerminalNode[];
	public ONLY(i: number): TerminalNode;
	public ONLY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.ONLY);
		} else {
			return this.getToken(CypherParser.ONLY, i);
		}
	}
	public WRITE(): TerminalNode[];
	public WRITE(i: number): TerminalNode;
	public WRITE(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.WRITE);
		} else {
			return this.getToken(CypherParser.WRITE, i);
		}
	}
	public UNSIGNED_DECIMAL_INTEGER(): TerminalNode[];
	public UNSIGNED_DECIMAL_INTEGER(i: number): TerminalNode;
	public UNSIGNED_DECIMAL_INTEGER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.UNSIGNED_DECIMAL_INTEGER);
		} else {
			return this.getToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, i);
		}
	}
	public PRIMARY(): TerminalNode[];
	public PRIMARY(i: number): TerminalNode;
	public PRIMARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PRIMARY);
		} else {
			return this.getToken(CypherParser.PRIMARY, i);
		}
	}
	public PRIMARIES(): TerminalNode[];
	public PRIMARIES(i: number): TerminalNode;
	public PRIMARIES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PRIMARIES);
		} else {
			return this.getToken(CypherParser.PRIMARIES, i);
		}
	}
	public SECONDARY(): TerminalNode[];
	public SECONDARY(i: number): TerminalNode;
	public SECONDARY(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.SECONDARY);
		} else {
			return this.getToken(CypherParser.SECONDARY, i);
		}
	}
	public SECONDARIES(): TerminalNode[];
	public SECONDARIES(i: number): TerminalNode;
	public SECONDARIES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.SECONDARIES);
		} else {
			return this.getToken(CypherParser.SECONDARIES, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_alterDatabase; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAlterDatabase) {
			listener.enterAlterDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAlterDatabase) {
			listener.exitAlterDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAlterDatabase) {
			return visitor.visitAlterDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StartDatabaseContext extends ParserRuleContext {
	public START(): TerminalNode { return this.getToken(CypherParser.START, 0); }
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext {
		return this.getRuleContext(0, SymbolicAliasNameContext);
	}
	public waitClause(): WaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_startDatabase; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStartDatabase) {
			listener.enterStartDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStartDatabase) {
			listener.exitStartDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStartDatabase) {
			return visitor.visitStartDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StopDatabaseContext extends ParserRuleContext {
	public STOP(): TerminalNode { return this.getToken(CypherParser.STOP, 0); }
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext {
		return this.getRuleContext(0, SymbolicAliasNameContext);
	}
	public waitClause(): WaitClauseContext | undefined {
		return this.tryGetRuleContext(0, WaitClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_stopDatabase; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStopDatabase) {
			listener.enterStopDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStopDatabase) {
			listener.exitStopDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStopDatabase) {
			return visitor.visitStopDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class WaitClauseContext extends ParserRuleContext {
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WAIT, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOWAIT, 0); }
	public UNSIGNED_DECIMAL_INTEGER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNSIGNED_DECIMAL_INTEGER, 0); }
	public SEC(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SEC, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SECOND, 0); }
	public SECONDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SECONDS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_waitClause; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterWaitClause) {
			listener.enterWaitClause(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitWaitClause) {
			listener.exitWaitClause(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitWaitClause) {
			return visitor.visitWaitClause(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowDatabaseContext extends ParserRuleContext {
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASES, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public DEFAULT_TOKEN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DEFAULT_TOKEN, 0); }
	public HOME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.HOME, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext | undefined {
		return this.tryGetRuleContext(0, SymbolicAliasNameContext);
	}
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showDatabase; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowDatabase) {
			listener.enterShowDatabase(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowDatabase) {
			listener.exitShowDatabase(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowDatabase) {
			return visitor.visitShowDatabase(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DatabaseScopeListContext extends ParserRuleContext {
	public DEFAULT_TOKEN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DEFAULT_TOKEN, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public HOME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.HOME, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASES, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public symbolicAliasNameList(): SymbolicAliasNameListContext | undefined {
		return this.tryGetRuleContext(0, SymbolicAliasNameListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_databaseScopeList; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDatabaseScopeList) {
			listener.enterDatabaseScopeList(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDatabaseScopeList) {
			listener.exitDatabaseScopeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDatabaseScopeList) {
			return visitor.visitDatabaseScopeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GraphScopeListContext extends ParserRuleContext {
	public DEFAULT_TOKEN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DEFAULT_TOKEN, 0); }
	public GRAPH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.GRAPH, 0); }
	public HOME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.HOME, 0); }
	public GRAPHS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.GRAPHS, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public symbolicAliasNameList(): SymbolicAliasNameListContext | undefined {
		return this.tryGetRuleContext(0, SymbolicAliasNameListContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_graphScopeList; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGraphScopeList) {
			listener.enterGraphScopeList(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGraphScopeList) {
			listener.exitGraphScopeList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGraphScopeList) {
			return visitor.visitGraphScopeList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class CreateAliasContext extends ParserRuleContext {
	public ALIAS(): TerminalNode { return this.getToken(CypherParser.ALIAS, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext[];
	public symbolicAliasName(i: number): SymbolicAliasNameContext;
	public symbolicAliasName(i?: number): SymbolicAliasNameContext | SymbolicAliasNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicAliasNameContext);
		} else {
			return this.getRuleContext(i, SymbolicAliasNameContext);
		}
	}
	public FOR(): TerminalNode { return this.getToken(CypherParser.FOR, 0); }
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AT, 0); }
	public stringOrParameter(): StringOrParameterContext | undefined {
		return this.tryGetRuleContext(0, StringOrParameterContext);
	}
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameOrStringParameterContext);
	}
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PASSWORD, 0); }
	public passwordExpression(): PasswordExpressionContext | undefined {
		return this.tryGetRuleContext(0, PasswordExpressionContext);
	}
	public PROPERTIES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROPERTIES, 0); }
	public mapOrParameter(): MapOrParameterContext[];
	public mapOrParameter(i: number): MapOrParameterContext;
	public mapOrParameter(i?: number): MapOrParameterContext | MapOrParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MapOrParameterContext);
		} else {
			return this.getRuleContext(i, MapOrParameterContext);
		}
	}
	public DRIVER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DRIVER, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_createAlias; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterCreateAlias) {
			listener.enterCreateAlias(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitCreateAlias) {
			listener.exitCreateAlias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitCreateAlias) {
			return visitor.visitCreateAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class DropAliasContext extends ParserRuleContext {
	public ALIAS(): TerminalNode { return this.getToken(CypherParser.ALIAS, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext {
		return this.getRuleContext(0, SymbolicAliasNameContext);
	}
	public FOR(): TerminalNode { return this.getToken(CypherParser.FOR, 0); }
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_dropAlias; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterDropAlias) {
			listener.enterDropAlias(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitDropAlias) {
			listener.exitDropAlias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitDropAlias) {
			return visitor.visitDropAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class AlterAliasContext extends ParserRuleContext {
	public ALIAS(): TerminalNode { return this.getToken(CypherParser.ALIAS, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext[];
	public symbolicAliasName(i: number): SymbolicAliasNameContext;
	public symbolicAliasName(i?: number): SymbolicAliasNameContext | SymbolicAliasNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicAliasNameContext);
		} else {
			return this.getRuleContext(i, SymbolicAliasNameContext);
		}
	}
	public SET(): TerminalNode { return this.getToken(CypherParser.SET, 0); }
	public DATABASE(): TerminalNode { return this.getToken(CypherParser.DATABASE, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public TARGET(): TerminalNode[];
	public TARGET(i: number): TerminalNode;
	public TARGET(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.TARGET);
		} else {
			return this.getToken(CypherParser.TARGET, i);
		}
	}
	public USER(): TerminalNode[];
	public USER(i: number): TerminalNode;
	public USER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.USER);
		} else {
			return this.getToken(CypherParser.USER, i);
		}
	}
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext[];
	public symbolicNameOrStringParameter(i: number): SymbolicNameOrStringParameterContext;
	public symbolicNameOrStringParameter(i?: number): SymbolicNameOrStringParameterContext | SymbolicNameOrStringParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameOrStringParameterContext);
		} else {
			return this.getRuleContext(i, SymbolicNameOrStringParameterContext);
		}
	}
	public PASSWORD(): TerminalNode[];
	public PASSWORD(i: number): TerminalNode;
	public PASSWORD(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PASSWORD);
		} else {
			return this.getToken(CypherParser.PASSWORD, i);
		}
	}
	public passwordExpression(): PasswordExpressionContext[];
	public passwordExpression(i: number): PasswordExpressionContext;
	public passwordExpression(i?: number): PasswordExpressionContext | PasswordExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(PasswordExpressionContext);
		} else {
			return this.getRuleContext(i, PasswordExpressionContext);
		}
	}
	public DRIVER(): TerminalNode[];
	public DRIVER(i: number): TerminalNode;
	public DRIVER(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.DRIVER);
		} else {
			return this.getToken(CypherParser.DRIVER, i);
		}
	}
	public mapOrParameter(): MapOrParameterContext[];
	public mapOrParameter(i: number): MapOrParameterContext;
	public mapOrParameter(i?: number): MapOrParameterContext | MapOrParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(MapOrParameterContext);
		} else {
			return this.getRuleContext(i, MapOrParameterContext);
		}
	}
	public PROPERTIES(): TerminalNode[];
	public PROPERTIES(i: number): TerminalNode;
	public PROPERTIES(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.PROPERTIES);
		} else {
			return this.getToken(CypherParser.PROPERTIES, i);
		}
	}
	public AT(): TerminalNode[];
	public AT(i: number): TerminalNode;
	public AT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.AT);
		} else {
			return this.getToken(CypherParser.AT, i);
		}
	}
	public stringOrParameter(): StringOrParameterContext[];
	public stringOrParameter(i: number): StringOrParameterContext;
	public stringOrParameter(i?: number): StringOrParameterContext | StringOrParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringOrParameterContext);
		} else {
			return this.getRuleContext(i, StringOrParameterContext);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_alterAlias; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterAlterAlias) {
			listener.enterAlterAlias(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitAlterAlias) {
			listener.exitAlterAlias(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitAlterAlias) {
			return visitor.visitAlterAlias(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class ShowAliasesContext extends ParserRuleContext {
	public FOR(): TerminalNode { return this.getToken(CypherParser.FOR, 0); }
	public ALIAS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALIAS, 0); }
	public ALIASES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALIASES, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASES, 0); }
	public symbolicAliasName(): SymbolicAliasNameContext | undefined {
		return this.tryGetRuleContext(0, SymbolicAliasNameContext);
	}
	public yieldClause(): YieldClauseContext | undefined {
		return this.tryGetRuleContext(0, YieldClauseContext);
	}
	public whereClause(): WhereClauseContext | undefined {
		return this.tryGetRuleContext(0, WhereClauseContext);
	}
	public returnClause(): ReturnClauseContext | undefined {
		return this.tryGetRuleContext(0, ReturnClauseContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_showAliases; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterShowAliases) {
			listener.enterShowAliases(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitShowAliases) {
			listener.exitShowAliases(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitShowAliases) {
			return visitor.visitShowAliases(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicAliasNameListContext extends ParserRuleContext {
	public symbolicAliasName(): SymbolicAliasNameContext[];
	public symbolicAliasName(i: number): SymbolicAliasNameContext;
	public symbolicAliasName(i?: number): SymbolicAliasNameContext | SymbolicAliasNameContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicAliasNameContext);
		} else {
			return this.getRuleContext(i, SymbolicAliasNameContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_symbolicAliasNameList; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSymbolicAliasNameList) {
			listener.enterSymbolicAliasNameList(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSymbolicAliasNameList) {
			listener.exitSymbolicAliasNameList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSymbolicAliasNameList) {
			return visitor.visitSymbolicAliasNameList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicAliasNameContext extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public parameter(): ParameterContext | undefined {
		return this.tryGetRuleContext(0, ParameterContext);
	}
	public DOT(): TerminalNode[];
	public DOT(i: number): TerminalNode;
	public DOT(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.DOT);
		} else {
			return this.getToken(CypherParser.DOT, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_symbolicAliasName; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSymbolicAliasName) {
			listener.enterSymbolicAliasName(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSymbolicAliasName) {
			listener.exitSymbolicAliasName(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSymbolicAliasName) {
			return visitor.visitSymbolicAliasName(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicNameOrStringParameterListContext extends ParserRuleContext {
	public symbolicNameOrStringParameter(): SymbolicNameOrStringParameterContext[];
	public symbolicNameOrStringParameter(i: number): SymbolicNameOrStringParameterContext;
	public symbolicNameOrStringParameter(i?: number): SymbolicNameOrStringParameterContext | SymbolicNameOrStringParameterContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameOrStringParameterContext);
		} else {
			return this.getRuleContext(i, SymbolicNameOrStringParameterContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_symbolicNameOrStringParameterList; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSymbolicNameOrStringParameterList) {
			listener.enterSymbolicNameOrStringParameterList(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSymbolicNameOrStringParameterList) {
			listener.exitSymbolicNameOrStringParameterList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSymbolicNameOrStringParameterList) {
			return visitor.visitSymbolicNameOrStringParameterList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicNameOrStringParameterContext extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, SymbolicNameStringContext);
	}
	public parameter(): ParameterContext | undefined {
		return this.tryGetRuleContext(0, ParameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_symbolicNameOrStringParameter; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSymbolicNameOrStringParameter) {
			listener.enterSymbolicNameOrStringParameter(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSymbolicNameOrStringParameter) {
			listener.exitSymbolicNameOrStringParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSymbolicNameOrStringParameter) {
			return visitor.visitSymbolicNameOrStringParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GlobContext extends ParserRuleContext {
	public escapedSymbolicNameString(): EscapedSymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, EscapedSymbolicNameStringContext);
	}
	public globRecursive(): GlobRecursiveContext | undefined {
		return this.tryGetRuleContext(0, GlobRecursiveContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_glob; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGlob) {
			listener.enterGlob(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGlob) {
			listener.exitGlob(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGlob) {
			return visitor.visitGlob(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GlobRecursiveContext extends ParserRuleContext {
	public globPart(): GlobPartContext | undefined {
		return this.tryGetRuleContext(0, GlobPartContext);
	}
	public globRecursive(): GlobRecursiveContext | undefined {
		return this.tryGetRuleContext(0, GlobRecursiveContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_globRecursive; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGlobRecursive) {
			listener.enterGlobRecursive(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGlobRecursive) {
			listener.exitGlobRecursive(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGlobRecursive) {
			return visitor.visitGlobRecursive(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class GlobPartContext extends ParserRuleContext {
	public DOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DOT, 0); }
	public escapedSymbolicNameString(): EscapedSymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, EscapedSymbolicNameStringContext);
	}
	public QUESTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.QUESTION, 0); }
	public TIMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TIMES, 0); }
	public unescapedSymbolicNameString(): UnescapedSymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, UnescapedSymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_globPart; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterGlobPart) {
			listener.enterGlobPart(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitGlobPart) {
			listener.exitGlobPart(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitGlobPart) {
			return visitor.visitGlobPart(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringImageContext extends ParserRuleContext {
	public stringToken(): StringTokenContext {
		return this.getRuleContext(0, StringTokenContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_stringImage; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStringImage) {
			listener.enterStringImage(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStringImage) {
			listener.exitStringImage(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStringImage) {
			return visitor.visitStringImage(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringListContext extends ParserRuleContext {
	public stringImage(): StringImageContext[];
	public stringImage(i: number): StringImageContext;
	public stringImage(i?: number): StringImageContext | StringImageContext[] {
		if (i === undefined) {
			return this.getRuleContexts(StringImageContext);
		} else {
			return this.getRuleContext(i, StringImageContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_stringList; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStringList) {
			listener.enterStringList(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStringList) {
			listener.exitStringList(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStringList) {
			return visitor.visitStringList(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringTokenContext extends ParserRuleContext {
	public STRING_LITERAL1(): TerminalNode | undefined { return this.tryGetToken(CypherParser.STRING_LITERAL1, 0); }
	public STRING_LITERAL2(): TerminalNode | undefined { return this.tryGetToken(CypherParser.STRING_LITERAL2, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_stringToken; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStringToken) {
			listener.enterStringToken(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStringToken) {
			listener.exitStringToken(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStringToken) {
			return visitor.visitStringToken(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class StringOrParameterContext extends ParserRuleContext {
	public stringToken(): StringTokenContext | undefined {
		return this.tryGetRuleContext(0, StringTokenContext);
	}
	public parameter(): ParameterContext | undefined {
		return this.tryGetRuleContext(0, ParameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_stringOrParameter; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterStringOrParameter) {
			listener.enterStringOrParameter(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitStringOrParameter) {
			listener.exitStringOrParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitStringOrParameter) {
			return visitor.visitStringOrParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapOrParameterContext extends ParserRuleContext {
	public map(): MapContext | undefined {
		return this.tryGetRuleContext(0, MapContext);
	}
	public parameter(): ParameterContext | undefined {
		return this.tryGetRuleContext(0, ParameterContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_mapOrParameter; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterMapOrParameter) {
			listener.enterMapOrParameter(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitMapOrParameter) {
			listener.exitMapOrParameter(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitMapOrParameter) {
			return visitor.visitMapOrParameter(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class MapContext extends ParserRuleContext {
	public LCURLY(): TerminalNode { return this.getToken(CypherParser.LCURLY, 0); }
	public RCURLY(): TerminalNode { return this.getToken(CypherParser.RCURLY, 0); }
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public COLON(): TerminalNode[];
	public COLON(i: number): TerminalNode;
	public COLON(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COLON);
		} else {
			return this.getToken(CypherParser.COLON, i);
		}
	}
	public expression(): ExpressionContext[];
	public expression(i: number): ExpressionContext;
	public expression(i?: number): ExpressionContext | ExpressionContext[] {
		if (i === undefined) {
			return this.getRuleContexts(ExpressionContext);
		} else {
			return this.getRuleContext(i, ExpressionContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_map; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterMap) {
			listener.enterMap(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitMap) {
			listener.exitMap(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitMap) {
			return visitor.visitMap(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicNamePositionsContext extends ParserRuleContext {
	public symbolicNameString(): SymbolicNameStringContext[];
	public symbolicNameString(i: number): SymbolicNameStringContext;
	public symbolicNameString(i?: number): SymbolicNameStringContext | SymbolicNameStringContext[] {
		if (i === undefined) {
			return this.getRuleContexts(SymbolicNameStringContext);
		} else {
			return this.getRuleContext(i, SymbolicNameStringContext);
		}
	}
	public COMMA(): TerminalNode[];
	public COMMA(i: number): TerminalNode;
	public COMMA(i?: number): TerminalNode | TerminalNode[] {
		if (i === undefined) {
			return this.getTokens(CypherParser.COMMA);
		} else {
			return this.getToken(CypherParser.COMMA, i);
		}
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_symbolicNamePositions; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSymbolicNamePositions) {
			listener.enterSymbolicNamePositions(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSymbolicNamePositions) {
			listener.exitSymbolicNamePositions(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSymbolicNamePositions) {
			return visitor.visitSymbolicNamePositions(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class SymbolicNameStringContext extends ParserRuleContext {
	public escapedSymbolicNameString(): EscapedSymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, EscapedSymbolicNameStringContext);
	}
	public unescapedSymbolicNameString(): UnescapedSymbolicNameStringContext | undefined {
		return this.tryGetRuleContext(0, UnescapedSymbolicNameStringContext);
	}
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_symbolicNameString; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterSymbolicNameString) {
			listener.enterSymbolicNameString(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitSymbolicNameString) {
			listener.exitSymbolicNameString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitSymbolicNameString) {
			return visitor.visitSymbolicNameString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EscapedSymbolicNameStringContext extends ParserRuleContext {
	public ESCAPED_SYMBOLIC_NAME(): TerminalNode { return this.getToken(CypherParser.ESCAPED_SYMBOLIC_NAME, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_escapedSymbolicNameString; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterEscapedSymbolicNameString) {
			listener.enterEscapedSymbolicNameString(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitEscapedSymbolicNameString) {
			listener.exitEscapedSymbolicNameString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitEscapedSymbolicNameString) {
			return visitor.visitEscapedSymbolicNameString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class UnescapedSymbolicNameStringContext extends ParserRuleContext {
	public IDENTIFIER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IDENTIFIER, 0); }
	public ACCESS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ACCESS, 0); }
	public ACTIVE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ACTIVE, 0); }
	public ADMIN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ADMIN, 0); }
	public ADMINISTRATOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ADMINISTRATOR, 0); }
	public ALIAS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALIAS, 0); }
	public ALIASES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALIASES, 0); }
	public ALL_SHORTEST_PATH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALL_SHORTEST_PATH, 0); }
	public ALL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALL, 0); }
	public ALTER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ALTER, 0); }
	public AND(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AND, 0); }
	public ANY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ANY, 0); }
	public AS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AS, 0); }
	public ASC(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ASC, 0); }
	public ASSERT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ASSERT, 0); }
	public ASSIGN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ASSIGN, 0); }
	public AT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.AT, 0); }
	public BOOSTED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BOOSTED, 0); }
	public BREAK(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BREAK, 0); }
	public BRIEF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BRIEF, 0); }
	public BTREE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BTREE, 0); }
	public BUILT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BUILT, 0); }
	public BY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.BY, 0); }
	public CALL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CALL, 0); }
	public CASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CASE, 0); }
	public CHANGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CHANGE, 0); }
	public COMMAND(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMAND, 0); }
	public COMMANDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMANDS, 0); }
	public COMMIT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMMIT, 0); }
	public COMPOSITE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COMPOSITE, 0); }
	public CONSTRAINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINT, 0); }
	public CONSTRAINTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONSTRAINTS, 0); }
	public CONTAINS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONTAINS, 0); }
	public CONTINUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CONTINUE, 0); }
	public COPY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COPY, 0); }
	public COUNT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.COUNT, 0); }
	public CREATE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CREATE, 0); }
	public CSV(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CSV, 0); }
	public CURRENT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.CURRENT, 0); }
	public DATA(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATA, 0); }
	public DATABASE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASE, 0); }
	public DATABASES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DATABASES, 0); }
	public DBMS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DBMS, 0); }
	public DEALLOCATE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DEALLOCATE, 0); }
	public DEFAULT_TOKEN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DEFAULT_TOKEN, 0); }
	public DEFINED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DEFINED, 0); }
	public DELETE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DELETE, 0); }
	public DENY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DENY, 0); }
	public DESC(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DESC, 0); }
	public DESTROY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DESTROY, 0); }
	public DETACH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DETACH, 0); }
	public DISTINCT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DISTINCT, 0); }
	public DRIVER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DRIVER, 0); }
	public DROP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DROP, 0); }
	public DRYRUN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DRYRUN, 0); }
	public DUMP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.DUMP, 0); }
	public EACH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EACH, 0); }
	public ELEMENT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ELEMENT, 0); }
	public ELEMENTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ELEMENTS, 0); }
	public ELSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ELSE, 0); }
	public ENABLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ENABLE, 0); }
	public ENCRYPTED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ENCRYPTED, 0); }
	public END(): TerminalNode | undefined { return this.tryGetToken(CypherParser.END, 0); }
	public ENDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ENDS, 0); }
	public ERROR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ERROR, 0); }
	public EXECUTABLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXECUTABLE, 0); }
	public EXECUTE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXECUTE, 0); }
	public EXIST(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXIST, 0); }
	public EXISTENCE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTENCE, 0); }
	public EXISTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.EXISTS, 0); }
	public FAIL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FAIL, 0); }
	public FALSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FALSE, 0); }
	public FIELDTERMINATOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FIELDTERMINATOR, 0); }
	public FOREACH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FOREACH, 0); }
	public FOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FOR, 0); }
	public FROM(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FROM, 0); }
	public FULLTEXT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FULLTEXT, 0); }
	public FUNCTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FUNCTION, 0); }
	public FUNCTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.FUNCTIONS, 0); }
	public GRANT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.GRANT, 0); }
	public GRAPH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.GRAPH, 0); }
	public GRAPHS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.GRAPHS, 0); }
	public HEADERS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.HEADERS, 0); }
	public HOME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.HOME, 0); }
	public IF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IF, 0); }
	public IMMUTABLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IMMUTABLE, 0); }
	public IN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IN, 0); }
	public INDEX(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEX, 0); }
	public INDEXES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INDEXES, 0); }
	public INF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INF, 0); }
	public INFINITY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.INFINITY, 0); }
	public IS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.IS, 0); }
	public JOIN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.JOIN, 0); }
	public KEY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.KEY, 0); }
	public LABEL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LABEL, 0); }
	public LABELS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LABELS, 0); }
	public LIMITROWS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LIMITROWS, 0); }
	public LOAD(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LOAD, 0); }
	public LOOKUP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.LOOKUP, 0); }
	public MATCH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MATCH, 0); }
	public MANAGEMENT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MANAGEMENT, 0); }
	public MERGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.MERGE, 0); }
	public NAME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NAME, 0); }
	public NAMES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NAMES, 0); }
	public NAN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NAN, 0); }
	public NEW(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NEW, 0); }
	public NODE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NODE, 0); }
	public NODES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NODES, 0); }
	public NONE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NONE, 0); }
	public NOT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOT, 0); }
	public NOWAIT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NOWAIT, 0); }
	public NULL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.NULL, 0); }
	public OF(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OF, 0); }
	public ON(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ON, 0); }
	public ONLY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ONLY, 0); }
	public OPTIONAL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OPTIONAL, 0); }
	public OPTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OPTIONS, 0); }
	public OPTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OPTION, 0); }
	public OR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OR, 0); }
	public ORDER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ORDER, 0); }
	public OUTPUT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.OUTPUT, 0); }
	public PASSWORD(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PASSWORD, 0); }
	public PASSWORDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PASSWORDS, 0); }
	public PERIODIC(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PERIODIC, 0); }
	public PLAINTEXT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PLAINTEXT, 0); }
	public POINT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.POINT, 0); }
	public POPULATED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.POPULATED, 0); }
	public PRIMARY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIMARY, 0); }
	public PRIMARIES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIMARIES, 0); }
	public PRIVILEGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGE, 0); }
	public PRIVILEGES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PRIVILEGES, 0); }
	public PROCEDURE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROCEDURE, 0); }
	public PROCEDURES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROCEDURES, 0); }
	public PROPERTIES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROPERTIES, 0); }
	public PROPERTY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.PROPERTY, 0); }
	public RANGE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RANGE, 0); }
	public READ(): TerminalNode | undefined { return this.tryGetToken(CypherParser.READ, 0); }
	public REALLOCATE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REALLOCATE, 0); }
	public REDUCE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REDUCE, 0); }
	public REL(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REL, 0); }
	public RELATIONSHIP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RELATIONSHIP, 0); }
	public RELATIONSHIPS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RELATIONSHIPS, 0); }
	public REMOVE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REMOVE, 0); }
	public RENAME(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RENAME, 0); }
	public REPLACE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REPLACE, 0); }
	public REPORT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REPORT, 0); }
	public REQUIRE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REQUIRE, 0); }
	public REQUIRED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REQUIRED, 0); }
	public RETURN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.RETURN, 0); }
	public REVOKE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.REVOKE, 0); }
	public ROLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLE, 0); }
	public ROLES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROLES, 0); }
	public ROW(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROW, 0); }
	public ROWS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.ROWS, 0); }
	public SCAN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SCAN, 0); }
	public SEC(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SEC, 0); }
	public SECOND(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SECOND, 0); }
	public SECONDARY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SECONDARY, 0); }
	public SECONDARIES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SECONDARIES, 0); }
	public SECONDS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SECONDS, 0); }
	public SEEK(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SEEK, 0); }
	public SERVER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SERVER, 0); }
	public SERVERS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SERVERS, 0); }
	public SET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SET, 0); }
	public SETTING(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SETTING, 0); }
	public SETTINGS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SETTINGS, 0); }
	public SHORTEST_PATH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SHORTEST_PATH, 0); }
	public SHOW(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SHOW, 0); }
	public SINGLE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SINGLE, 0); }
	public SKIPROWS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SKIPROWS, 0); }
	public START(): TerminalNode | undefined { return this.tryGetToken(CypherParser.START, 0); }
	public STARTS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.STARTS, 0); }
	public STATUS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.STATUS, 0); }
	public STOP(): TerminalNode | undefined { return this.tryGetToken(CypherParser.STOP, 0); }
	public SUSPENDED(): TerminalNode | undefined { return this.tryGetToken(CypherParser.SUSPENDED, 0); }
	public TARGET(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TARGET, 0); }
	public TERMINATE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TERMINATE, 0); }
	public TEXT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TEXT, 0); }
	public THEN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.THEN, 0); }
	public TO(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TO, 0); }
	public TOPOLOGY(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TOPOLOGY, 0); }
	public TRANSACTION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTION, 0); }
	public TRANSACTIONS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRANSACTIONS, 0); }
	public TRAVERSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRAVERSE, 0); }
	public TRUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TRUE, 0); }
	public TYPE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TYPE, 0); }
	public TYPES(): TerminalNode | undefined { return this.tryGetToken(CypherParser.TYPES, 0); }
	public UNION(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNION, 0); }
	public UNIQUE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUE, 0); }
	public UNIQUENESS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNIQUENESS, 0); }
	public UNWIND(): TerminalNode | undefined { return this.tryGetToken(CypherParser.UNWIND, 0); }
	public USE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USE, 0); }
	public USER(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USER, 0); }
	public USERS(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USERS, 0); }
	public USING(): TerminalNode | undefined { return this.tryGetToken(CypherParser.USING, 0); }
	public VERBOSE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.VERBOSE, 0); }
	public WAIT(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WAIT, 0); }
	public WHEN(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHEN, 0); }
	public WHERE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WHERE, 0); }
	public WITH(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WITH, 0); }
	public WRITE(): TerminalNode | undefined { return this.tryGetToken(CypherParser.WRITE, 0); }
	public XOR(): TerminalNode | undefined { return this.tryGetToken(CypherParser.XOR, 0); }
	public YIELD(): TerminalNode | undefined { return this.tryGetToken(CypherParser.YIELD, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_unescapedSymbolicNameString; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterUnescapedSymbolicNameString) {
			listener.enterUnescapedSymbolicNameString(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitUnescapedSymbolicNameString) {
			listener.exitUnescapedSymbolicNameString(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitUnescapedSymbolicNameString) {
			return visitor.visitUnescapedSymbolicNameString(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


export class EndOfFileContext extends ParserRuleContext {
	public EOF(): TerminalNode { return this.getToken(CypherParser.EOF, 0); }
	constructor(parent: ParserRuleContext | undefined, invokingState: number) {
		super(parent, invokingState);
	}
	// @Override
	public get ruleIndex(): number { return CypherParser.RULE_endOfFile; }
	// @Override
	public enterRule(listener: CypherParserListener): void {
		if (listener.enterEndOfFile) {
			listener.enterEndOfFile(this);
		}
	}
	// @Override
	public exitRule(listener: CypherParserListener): void {
		if (listener.exitEndOfFile) {
			listener.exitEndOfFile(this);
		}
	}
	// @Override
	public accept<Result>(visitor: CypherParserVisitor<Result>): Result {
		if (visitor.visitEndOfFile) {
			return visitor.visitEndOfFile(this);
		} else {
			return visitor.visitChildren(this);
		}
	}
}


